
ATMega168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000cac  00000d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080016c  0080016c  00000dac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ddc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f02  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cb  00000000  00000000  00002ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000096f  00000000  00000000  00003699  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  00004008  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d7  00000000  00000000  00004434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b7a  00000000  00000000  0000490b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005485  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b1 04 	jmp	0x962	; 0x962 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 42 04 	jmp	0x884	; 0x884 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__vector_14>
  3c:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 36       	cpi	r26, 0x6C	; 108
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e6       	ldi	r26, 0x6C	; 108
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 38       	cpi	r26, 0x88	; 136
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <main>
  9e:	0c 94 54 06 	jmp	0xca8	; 0xca8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <System_Init>:
#include "SWUART.H"


void System_Init(void){
	
	DirtyDawg.status = 0;
  a6:	e9 e7       	ldi	r30, 0x79	; 121
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	17 82       	std	Z+7, r1	; 0x07
	DirtyDawg.front_sensor = 0;
  ac:	12 82       	std	Z+2, r1	; 0x02
	DirtyDawg.back_sensor = 0;
  ae:	13 82       	std	Z+3, r1	; 0x03
	DirtyDawg.left_sensor = 0;
  b0:	10 82       	st	Z, r1
	DirtyDawg.right_sensor = 0;
  b2:	11 82       	std	Z+1, r1	; 0x01
	
	// Enable global interrupt
	sei();
  b4:	78 94       	sei
	// Enable interrupt on 
	// PCINT20 (pin 6 on AtMega 168P)
	// PCINT21 (pin 11 on AtMega 168P)
	EICRA = (1<<ISC11);
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	80 93 69 00 	sts	0x0069, r24
	EIMSK = (1<<INT1);
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	8d bb       	out	0x1d, r24	; 29
	PCICR = (1<<PCIE2);
  c0:	84 e0       	ldi	r24, 0x04	; 4
  c2:	80 93 68 00 	sts	0x0068, r24
	PCMSK2 = (1<<PCINT20) | (1<<PCINT21);
  c6:	80 e3       	ldi	r24, 0x30	; 48
  c8:	80 93 6d 00 	sts	0x006D, r24
	
	/*Setting ports - page 75*/
		
	DDRB = (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB3) | (1<<PORTB0); //PB0 is debug greenlight
  cc:	8f e0       	ldi	r24, 0x0F	; 15
  ce:	84 b9       	out	0x04, r24	; 4
	DDRD = (1<<PORTD3) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7); //PD7 is debug yellow
  d0:	88 ee       	ldi	r24, 0xE8	; 232
  d2:	8a b9       	out	0x0a, r24	; 10
	
	//Turn on and off the red LED for 2 seconds
	PORTB |= (1<<PORTB1);
  d4:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	83 ed       	ldi	r24, 0xD3	; 211
  da:	90 e3       	ldi	r25, 0x30	; 48
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <System_Init+0x36>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <System_Init+0x40>
  e6:	00 00       	nop
	_delay_ms(2000);
	PORTB &= (0<<PORTB1);
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	15 b8       	out	0x05, r1	; 5
	

	//Signs the status
	DirtyDawg.status = MCU_STARTED;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	87 83       	std	Z+7, r24	; 0x07
  f0:	08 95       	ret

000000f2 <UART_Init>:
}

void UART_Init(unsigned int baud){
	
	//Set double speed
	UCSR0A = (1<<U2X0);
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	20 93 c0 00 	sts	0x00C0, r18
	
	//Set baudrate
	unsigned int baudrate;
	baudrate = 8000000/8/baud-1;
  f8:	9c 01       	movw	r18, r24
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	60 e4       	ldi	r22, 0x40	; 64
 100:	72 e4       	ldi	r23, 0x42	; 66
 102:	8f e0       	ldi	r24, 0x0F	; 15
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 21 06 	call	0xc42	; 0xc42 <__divmodsi4>
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	31 09       	sbc	r19, r1
	//Double speed use frequency/8/baud
	
	//Set the baudrate in the registry
	UBRR0H = (unsigned char) (baudrate>>8);
 10e:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) (baudrate);
 112:	20 93 c4 00 	sts	0x00C4, r18

	//Enables Receive and Transmit over UART
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); //RXCIE and TXCIE for interrupt based UART.
 116:	88 e1       	ldi	r24, 0x18	; 24
 118:	80 93 c1 00 	sts	0x00C1, r24
	
	//Sets to 1 stop bit and 8 data bits
	UCSR0C = (0<<USBS0) | (3<<UCSZ00);
 11c:	e2 ec       	ldi	r30, 0xC2	; 194
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	80 83       	st	Z, r24
	
	//Disables Parity
	UCSR0C |= (0<<UPM01) | (0<<UPM00);
 124:	80 81       	ld	r24, Z
 126:	80 83       	st	Z, r24
	
	// Set status flag
	DirtyDawg.status |= UART_STARTED;
 128:	e9 e7       	ldi	r30, 0x79	; 121
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	87 81       	ldd	r24, Z+7	; 0x07
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	87 83       	std	Z+7, r24	; 0x07
 132:	08 95       	ret

00000134 <LCD_Update>:
}

void LCD_Update(void){
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
	
	// Prints the distance to front obstacle
	LCD_Byte(LCD_LINE_1, LCD_CMD);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	80 e8       	ldi	r24, 0x80	; 128
 140:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_String("C: ");
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 c2 05 	call	0xb84	; 0xb84 <LCD_String>
 14c:	c6 e7       	ldi	r28, 0x76	; 118
 14e:	d1 e0       	ldi	r29, 0x01	; 1
 150:	09 e7       	ldi	r16, 0x79	; 121
 152:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
		LCD_Byte(front[i], LCD_CHR);
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	89 91       	ld	r24, Y+
 158:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
void LCD_Update(void){
	
	// Prints the distance to front obstacle
	LCD_Byte(LCD_LINE_1, LCD_CMD);
	LCD_String("C: ");
	for(int i = 0; i < 3; i++)
 15c:	c0 17       	cp	r28, r16
 15e:	d1 07       	cpc	r29, r17
 160:	c9 f7       	brne	.-14     	; 0x154 <LCD_Update+0x20>
		LCD_Byte(front[i], LCD_CHR);
	
	// Prints the distance to back obstacle
	LCD_String("  S: ");
 162:	80 e1       	ldi	r24, 0x10	; 16
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 c2 05 	call	0xb84	; 0xb84 <LCD_String>
 16a:	cd e6       	ldi	r28, 0x6D	; 109
 16c:	d1 e0       	ldi	r29, 0x01	; 1
 16e:	00 e7       	ldi	r16, 0x70	; 112
 170:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
		LCD_Byte(back[i], LCD_CHR);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	89 91       	ld	r24, Y+
 176:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	for(int i = 0; i < 3; i++)
		LCD_Byte(front[i], LCD_CHR);
	
	// Prints the distance to back obstacle
	LCD_String("  S: ");
	for(int i = 0; i < 3; i++)
 17a:	c0 17       	cp	r28, r16
 17c:	d1 07       	cpc	r29, r17
 17e:	c9 f7       	brne	.-14     	; 0x172 <LCD_Update+0x3e>
		LCD_Byte(back[i], LCD_CHR);

	// Prints the distance to left obstacle
	LCD_Byte(LCD_LINE_2, LCD_CMD);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	80 ec       	ldi	r24, 0xC0	; 192
 184:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_String("L: ");
 188:	86 e1       	ldi	r24, 0x16	; 22
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 c2 05 	call	0xb84	; 0xb84 <LCD_String>
 190:	c3 e7       	ldi	r28, 0x73	; 115
 192:	d1 e0       	ldi	r29, 0x01	; 1
 194:	06 e7       	ldi	r16, 0x76	; 118
 196:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
		LCD_Byte(left[i], LCD_CHR);
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	89 91       	ld	r24, Y+
 19c:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
		LCD_Byte(back[i], LCD_CHR);

	// Prints the distance to left obstacle
	LCD_Byte(LCD_LINE_2, LCD_CMD);
	LCD_String("L: ");
	for(int i = 0; i < 3; i++)
 1a0:	c0 17       	cp	r28, r16
 1a2:	d1 07       	cpc	r29, r17
 1a4:	c9 f7       	brne	.-14     	; 0x198 <LCD_Update+0x64>
		LCD_Byte(left[i], LCD_CHR);

	// Prints the distance to right obstacle
	LCD_String("  R: ");
 1a6:	8a e1       	ldi	r24, 0x1A	; 26
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 c2 05 	call	0xb84	; 0xb84 <LCD_String>
 1ae:	c0 e7       	ldi	r28, 0x70	; 112
 1b0:	d1 e0       	ldi	r29, 0x01	; 1
 1b2:	03 e7       	ldi	r16, 0x73	; 115
 1b4:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
		LCD_Byte(right[i], LCD_CHR);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	89 91       	ld	r24, Y+
 1ba:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	for(int i = 0; i < 3; i++)
		LCD_Byte(left[i], LCD_CHR);

	// Prints the distance to right obstacle
	LCD_String("  R: ");
	for(int i = 0; i < 3; i++)
 1be:	c0 17       	cp	r28, r16
 1c0:	d1 07       	cpc	r29, r17
 1c2:	c9 f7       	brne	.-14     	; 0x1b6 <LCD_Update+0x82>
		LCD_Byte(right[i], LCD_CHR);

	//Change state
	DirtyDawg.state = SEND_DATA_STATE;
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	80 93 81 01 	sts	0x0181, r24
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <Uart_Flush>:

void Uart_Flush(void){
	uint8_t dummy;
	while (UCSR0A & (1<<RXC0)) 
 1d4:	80 91 c0 00 	lds	r24, 0x00C0
 1d8:	88 23       	and	r24, r24
 1da:	44 f4       	brge	.+16     	; 0x1ec <Uart_Flush+0x18>
		dummy = UDR0;	
 1dc:	a6 ec       	ldi	r26, 0xC6	; 198
 1de:	b0 e0       	ldi	r27, 0x00	; 0
	DirtyDawg.state = SEND_DATA_STATE;
}

void Uart_Flush(void){
	uint8_t dummy;
	while (UCSR0A & (1<<RXC0)) 
 1e0:	e0 ec       	ldi	r30, 0xC0	; 192
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
		dummy = UDR0;	
 1e4:	8c 91       	ld	r24, X
	DirtyDawg.state = SEND_DATA_STATE;
}

void Uart_Flush(void){
	uint8_t dummy;
	while (UCSR0A & (1<<RXC0)) 
 1e6:	80 81       	ld	r24, Z
 1e8:	88 23       	and	r24, r24
 1ea:	e4 f3       	brlt	.-8      	; 0x1e4 <Uart_Flush+0x10>
 1ec:	08 95       	ret

000001ee <BT_Recieve>:
}

uint8_t BT_Recieve(void){
	
	//Wait for data to be received (wait for flag to be set)
	while(!(UCSR0A & (1<<RXC0)));
 1ee:	e0 ec       	ldi	r30, 0xC0	; 192
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	88 23       	and	r24, r24
 1f6:	ec f7       	brge	.-6      	; 0x1f2 <BT_Recieve+0x4>

	//Returns the data from buffer
	return UDR0;
 1f8:	80 91 c6 00 	lds	r24, 0x00C6
}
 1fc:	08 95       	ret

000001fe <BT_Send>:

void BT_Send(uint8_t data){
	
	//Waits for the transmit buffer to be empty (wait for flag)
	while(!(UCSR0A & (1<<UDRE0)));
 1fe:	e0 ec       	ldi	r30, 0xC0	; 192
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	90 81       	ld	r25, Z
 204:	95 ff       	sbrs	r25, 5
 206:	fd cf       	rjmp	.-6      	; 0x202 <BT_Send+0x4>
	
	//Put data in buffer and sends it
	UDR0 = data;
 208:	80 93 c6 00 	sts	0x00C6, r24
 20c:	08 95       	ret

0000020e <BT_Init>:
/*                 Functions for the BlueSmirf                          */
/************************************************************************/
void BT_Init(void){
	
	// Send "---" to ensure BlueSmirf is not in command mode
	for(int i = 0; i<3; i++) BT_Send('-');
 20e:	8d e2       	ldi	r24, 0x2D	; 45
 210:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 214:	8d e2       	ldi	r24, 0x2D	; 45
 216:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 21a:	8d e2       	ldi	r24, 0x2D	; 45
 21c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(LF); // Line feed
 220:	8a e0       	ldi	r24, 0x0A	; 10
 222:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(CR); // Carriage return
 226:	8d e0       	ldi	r24, 0x0D	; 13
 228:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 22c:	2f e7       	ldi	r18, 0x7F	; 127
 22e:	8a e1       	ldi	r24, 0x1A	; 26
 230:	96 e0       	ldi	r25, 0x06	; 6
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <BT_Init+0x24>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <BT_Init+0x2e>
 23c:	00 00       	nop
	_delay_ms(250);
	// Clear LCD display
	LCD_Byte(LCD_CLEAR, LCD_CMD);
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
 246:	2f e7       	ldi	r18, 0x7F	; 127
 248:	89 ea       	ldi	r24, 0xA9	; 169
 24a:	93 e0       	ldi	r25, 0x03	; 3
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <BT_Init+0x3e>
 254:	00 c0       	rjmp	.+0      	; 0x256 <BT_Init+0x48>
 256:	00 00       	nop
	_delay_ms(150);
	Uart_Flush();
 258:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Uart_Flush>
 25c:	08 95       	ret

0000025e <BT_Connection_Check>:
}

void BT_Connection_Check(void){
	
	// Send command to end command mode
	for(int i = 0; i < 3; i++) BT_Send('-');
 25e:	8d e2       	ldi	r24, 0x2D	; 45
 260:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 264:	8d e2       	ldi	r24, 0x2D	; 45
 266:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 26a:	8d e2       	ldi	r24, 0x2D	; 45
 26c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	BT_Send(LF); //Line feed
 270:	8a e0       	ldi	r24, 0x0A	; 10
 272:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(CR); //Carriage return
 276:	8d e0       	ldi	r24, 0x0D	; 13
 278:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	84 e3       	ldi	r24, 0x34	; 52
 280:	9c e0       	ldi	r25, 0x0C	; 12
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <BT_Connection_Check+0x24>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <BT_Connection_Check+0x2e>
 28c:	00 00       	nop
	_delay_ms(500);
	Uart_Flush();
 28e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Uart_Flush>

	// Sends command to enter command mode
	for(int i = 0; i < 3; i++) BT_Send('$');
 292:	84 e2       	ldi	r24, 0x24	; 36
 294:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 298:	84 e2       	ldi	r24, 0x24	; 36
 29a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 29e:	84 e2       	ldi	r24, 0x24	; 36
 2a0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	// Ignore the message from BlueSmirf "CMD"
	while(BT_Recieve() != LF);
 2a4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 2a8:	8a 30       	cpi	r24, 0x0A	; 10
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <BT_Connection_Check+0x46>

	// Check if connected
	BT_Send('G');
 2ac:	87 e4       	ldi	r24, 0x47	; 71
 2ae:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send('K');
 2b2:	8b e4       	ldi	r24, 0x4B	; 75
 2b4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(LF);
 2b8:	8a e0       	ldi	r24, 0x0A	; 10
 2ba:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(CR);
 2be:	8d e0       	ldi	r24, 0x0D	; 13
 2c0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	if(BT_Recieve() == '1')
 2c4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 2c8:	81 33       	cpi	r24, 0x31	; 49
 2ca:	31 f4       	brne	.+12     	; 0x2d8 <BT_Connection_Check+0x7a>
		DirtyDawg.status |= BT_CONNECTED;
 2cc:	e9 e7       	ldi	r30, 0x79	; 121
 2ce:	f1 e0       	ldi	r31, 0x01	; 1
 2d0:	87 81       	ldd	r24, Z+7	; 0x07
 2d2:	88 60       	ori	r24, 0x08	; 8
 2d4:	87 83       	std	Z+7, r24	; 0x07
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <BT_Connection_Check+0x84>
	else
		DirtyDawg.status &= ~BT_CONNECTED;
 2d8:	e9 e7       	ldi	r30, 0x79	; 121
 2da:	f1 e0       	ldi	r31, 0x01	; 1
 2dc:	87 81       	ldd	r24, Z+7	; 0x07
 2de:	80 7f       	andi	r24, 0xF0	; 240
 2e0:	87 83       	std	Z+7, r24	; 0x07

	Uart_Flush();
 2e2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Uart_Flush>
	
	// End command mode
	for(int i = 0; i < 3; i++) BT_Send('-');
 2e6:	8d e2       	ldi	r24, 0x2D	; 45
 2e8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 2ec:	8d e2       	ldi	r24, 0x2D	; 45
 2ee:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 2f2:	8d e2       	ldi	r24, 0x2D	; 45
 2f4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	BT_Send(LF); //Line feed
 2f8:	8a e0       	ldi	r24, 0x0A	; 10
 2fa:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(CR); //Carriage return
 2fe:	8d e0       	ldi	r24, 0x0D	; 13
 300:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 304:	2f ef       	ldi	r18, 0xFF	; 255
 306:	84 e3       	ldi	r24, 0x34	; 52
 308:	9c e0       	ldi	r25, 0x0C	; 12
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <BT_Connection_Check+0xac>
 312:	00 c0       	rjmp	.+0      	; 0x314 <BT_Connection_Check+0xb6>
 314:	00 00       	nop
	_delay_ms(500);
	Uart_Flush();
 316:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Uart_Flush>
 31a:	08 95       	ret

0000031c <BT_Connect>:

}

void BT_Connect(void){
 31c:	ef 92       	push	r14
 31e:	ff 92       	push	r15
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	2c 97       	sbiw	r28, 0x0c	; 12
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61

	//Wait for 1 second to ensure the device has power
	//_delay_ms(1000);

	for(int i = 0; i < 3; i++) BT_Send('-');
 338:	8d e2       	ldi	r24, 0x2D	; 45
 33a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 33e:	8d e2       	ldi	r24, 0x2D	; 45
 340:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 344:	8d e2       	ldi	r24, 0x2D	; 45
 346:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	BT_Send(LF); //Line feed
 34a:	8a e0       	ldi	r24, 0x0A	; 10
 34c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(CR); //Carriage return
 350:	8d e0       	ldi	r24, 0x0D	; 13
 352:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 356:	2f ef       	ldi	r18, 0xFF	; 255
 358:	84 e3       	ldi	r24, 0x34	; 52
 35a:	9c e0       	ldi	r25, 0x0C	; 12
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <BT_Connect+0x40>
 364:	00 c0       	rjmp	.+0      	; 0x366 <BT_Connect+0x4a>
 366:	00 00       	nop
	_delay_ms(500);
	LCD_Byte(LCD_LINE_2 + 1, LCD_CMD);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	81 ec       	ldi	r24, 0xC1	; 193
 36c:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_Byte('*', LCD_CHR);
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	8a e2       	ldi	r24, 0x2A	; 42
 374:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_Byte(LCD_LINE_2 + 14, LCD_CMD);
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	8e ec       	ldi	r24, 0xCE	; 206
 37c:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_Byte('*', LCD_CHR);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	8a e2       	ldi	r24, 0x2A	; 42
 384:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	Uart_Flush();
 388:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Uart_Flush>

	//Sends command to enter command mode
	for(int i = 0; i < 3; i++) BT_Send('$');
 38c:	84 e2       	ldi	r24, 0x24	; 36
 38e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 392:	84 e2       	ldi	r24, 0x24	; 36
 394:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 398:	84 e2       	ldi	r24, 0x24	; 36
 39a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	// Ignore the message from BlueSmirf "CMD"
	while(BT_Recieve() != LF);
 39e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 3a2:	8a 30       	cpi	r24, 0x0A	; 10
 3a4:	e1 f7       	brne	.-8      	; 0x39e <BT_Connect+0x82>

	Uart_Flush();
 3a6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Uart_Flush>
		
	// Address to BlueSmirf in the car
	uint8_t adress[12] = {'0','0','0','6','6','6','7','6','A','0','A','A'};
 3aa:	8c e0       	ldi	r24, 0x0C	; 12
 3ac:	e0 e0       	ldi	r30, 0x00	; 0
 3ae:	f1 e0       	ldi	r31, 0x01	; 1
 3b0:	de 01       	movw	r26, r28
 3b2:	11 96       	adiw	r26, 0x01	; 1
 3b4:	01 90       	ld	r0, Z+
 3b6:	0d 92       	st	X+, r0
 3b8:	8a 95       	dec	r24
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <BT_Connect+0x98>
		
	// Command to connect with BlueSmirf in the car
	BT_Send('c');
 3bc:	83 e6       	ldi	r24, 0x63	; 99
 3be:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(',');
 3c2:	8c e2       	ldi	r24, 0x2C	; 44
 3c4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 3c8:	8e 01       	movw	r16, r28
 3ca:	0f 5f       	subi	r16, 0xFF	; 255
 3cc:	1f 4f       	sbci	r17, 0xFF	; 255
 3ce:	7e 01       	movw	r14, r28
 3d0:	ed e0       	ldi	r30, 0x0D	; 13
 3d2:	ee 0e       	add	r14, r30
 3d4:	f1 1c       	adc	r15, r1
	for(int i = 0; i < 12;i++){
		BT_Send(adress[i]);
 3d6:	f8 01       	movw	r30, r16
 3d8:	81 91       	ld	r24, Z+
 3da:	8f 01       	movw	r16, r30
 3dc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	uint8_t adress[12] = {'0','0','0','6','6','6','7','6','A','0','A','A'};
		
	// Command to connect with BlueSmirf in the car
	BT_Send('c');
	BT_Send(',');
	for(int i = 0; i < 12;i++){
 3e0:	0e 15       	cp	r16, r14
 3e2:	1f 05       	cpc	r17, r15
 3e4:	c1 f7       	brne	.-16     	; 0x3d6 <BT_Connect+0xba>
		BT_Send(adress[i]);
	}
	BT_Send(LF);
 3e6:	8a e0       	ldi	r24, 0x0A	; 10
 3e8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(CR);
 3ec:	8d e0       	ldi	r24, 0x0D	; 13
 3ee:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	// Ignore the message from BlueSmirf "TRYING"
	while(BT_Recieve() != LF);
 3f2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 3f6:	8a 30       	cpi	r24, 0x0A	; 10
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <BT_Connect+0xd6>

	// If a good connection, set status
	if(BT_Recieve() == '%')
 3fa:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 3fe:	85 32       	cpi	r24, 0x25	; 37
 400:	29 f4       	brne	.+10     	; 0x40c <BT_Connect+0xf0>
		DirtyDawg.status |= BT_CONNECTED;
 402:	e9 e7       	ldi	r30, 0x79	; 121
 404:	f1 e0       	ldi	r31, 0x01	; 1
 406:	87 81       	ldd	r24, Z+7	; 0x07
 408:	88 60       	ori	r24, 0x08	; 8
 40a:	87 83       	std	Z+7, r24	; 0x07

	// Ignore the message from BlueSmirf "CONNECTING"
	while(BT_Recieve() != LF);
 40c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 410:	8a 30       	cpi	r24, 0x0A	; 10
 412:	e1 f7       	brne	.-8      	; 0x40c <BT_Connect+0xf0>

	LCD_Byte(LCD_LINE_2 + 1, LCD_CMD);
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	81 ec       	ldi	r24, 0xC1	; 193
 418:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_Byte(' ', LCD_CHR);
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	80 e2       	ldi	r24, 0x20	; 32
 420:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_Byte(LCD_LINE_2 + 14, LCD_CMD);
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	8e ec       	ldi	r24, 0xCE	; 206
 428:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_Byte(' ', LCD_CHR);
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	80 e2       	ldi	r24, 0x20	; 32
 430:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	
}
 434:	2c 96       	adiw	r28, 0x0c	; 12
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	f8 94       	cli
 43a:	de bf       	out	0x3e, r29	; 62
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	cd bf       	out	0x3d, r28	; 61
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	08 95       	ret

0000044e <BT_Send_Data>:
		ticks++;
	}
}


void BT_Send_Data(void){
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
	
	uint8_t stop_go;

	// Wait for start command from Linkura device
	while(sgetchar() != 'S');
 454:	0e 94 a8 04 	call	0x950	; 0x950 <sgetchar>
 458:	83 35       	cpi	r24, 0x53	; 83
 45a:	e1 f7       	brne	.-8      	; 0x454 <BT_Send_Data+0x6>

	// Get accelerometer and ECG data from Linkura device
	DirtyDawg.accelerometer = sgetchar(); // Store the tilt 
 45c:	0e 94 a8 04 	call	0x950	; 0x950 <sgetchar>
 460:	c9 e7       	ldi	r28, 0x79	; 121
 462:	d1 e0       	ldi	r29, 0x01	; 1
 464:	8c 83       	std	Y+4, r24	; 0x04
	stop_go = sgetchar(); // Stop the car or go
 466:	0e 94 a8 04 	call	0x950	; 0x950 <sgetchar>
 46a:	18 2f       	mov	r17, r24
	DirtyDawg.ECG = sgetchar(); // ECG data
 46c:	0e 94 a8 04 	call	0x950	; 0x950 <sgetchar>
 470:	8d 83       	std	Y+5, r24	; 0x05

	if(stop_go)
 472:	11 23       	and	r17, r17
 474:	21 f0       	breq	.+8      	; 0x47e <BT_Send_Data+0x30>
		DirtyDawg.command &= ~STOP;
 476:	8e 81       	ldd	r24, Y+6	; 0x06
 478:	8c 7f       	andi	r24, 0xFC	; 252
 47a:	8e 83       	std	Y+6, r24	; 0x06
 47c:	05 c0       	rjmp	.+10     	; 0x488 <BT_Send_Data+0x3a>
	else
		DirtyDawg.command |= STOP;
 47e:	e9 e7       	ldi	r30, 0x79	; 121
 480:	f1 e0       	ldi	r31, 0x01	; 1
 482:	86 81       	ldd	r24, Z+6	; 0x06
 484:	82 60       	ori	r24, 0x02	; 2
 486:	86 83       	std	Z+6, r24	; 0x06
		
	if(DirtyDawg.accelerometer == TILT_LEFT)
 488:	80 91 7d 01 	lds	r24, 0x017D
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	31 f4       	brne	.+12     	; 0x49c <BT_Send_Data+0x4e>
		DirtyDawg.command |= TURN_LEFT;
 490:	e9 e7       	ldi	r30, 0x79	; 121
 492:	f1 e0       	ldi	r31, 0x01	; 1
 494:	86 81       	ldd	r24, Z+6	; 0x06
 496:	88 60       	ori	r24, 0x08	; 8
 498:	86 83       	std	Z+6, r24	; 0x06
 49a:	0d c0       	rjmp	.+26     	; 0x4b6 <BT_Send_Data+0x68>
	else if(DirtyDawg.accelerometer == TILT_RIGHT)
 49c:	82 30       	cpi	r24, 0x02	; 2
 49e:	31 f4       	brne	.+12     	; 0x4ac <BT_Send_Data+0x5e>
		DirtyDawg.command |= TURN_RIGHT;
 4a0:	e9 e7       	ldi	r30, 0x79	; 121
 4a2:	f1 e0       	ldi	r31, 0x01	; 1
 4a4:	86 81       	ldd	r24, Z+6	; 0x06
 4a6:	80 61       	ori	r24, 0x10	; 16
 4a8:	86 83       	std	Z+6, r24	; 0x06
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <BT_Send_Data+0x68>
	else
		DirtyDawg.command &= ~(TURN_LEFT | TURN_RIGHT);
 4ac:	e9 e7       	ldi	r30, 0x79	; 121
 4ae:	f1 e0       	ldi	r31, 0x01	; 1
 4b0:	86 81       	ldd	r24, Z+6	; 0x06
 4b2:	87 7e       	andi	r24, 0xE7	; 231
 4b4:	86 83       	std	Z+6, r24	; 0x06

	// Send command flags and ECG data to car
	BT_Send(DirtyDawg.command);
 4b6:	c9 e7       	ldi	r28, 0x79	; 121
 4b8:	d1 e0       	ldi	r29, 0x01	; 1
 4ba:	8e 81       	ldd	r24, Y+6	; 0x06
 4bc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 4c0:	8d 81       	ldd	r24, Y+5	; 0x05
 4c2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	// Change state
	DirtyDawg.state = GET_DATA_STATE;
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	88 87       	std	Y+8, r24	; 0x08
}
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	08 95       	ret

000004d2 <BT_Recieve_Data>:

void BT_Recieve_Data(void){
 4d2:	df 92       	push	r13
 4d4:	ef 92       	push	r14
 4d6:	ff 92       	push	r15
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29

	uint8_t ch;

	ch = 0;
	Uart_Flush();
 4e0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Uart_Flush>

	// Wait for start command
	while((ch = BT_Recieve()) != 'S');
 4e4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 4e8:	83 35       	cpi	r24, 0x53	; 83
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <BT_Recieve_Data+0x12>

	// If start command received
	if(ch == 'S'){
		// Get IR sensor data from the car
		DirtyDawg.front_sensor = BT_Recieve();
 4ec:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 4f0:	c9 e7       	ldi	r28, 0x79	; 121
 4f2:	d1 e0       	ldi	r29, 0x01	; 1
 4f4:	8a 83       	std	Y+2, r24	; 0x02
		DirtyDawg.back_sensor = BT_Recieve();
 4f6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 4fa:	8b 83       	std	Y+3, r24	; 0x03
		DirtyDawg.left_sensor = BT_Recieve();
 4fc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 500:	88 83       	st	Y, r24
		DirtyDawg.right_sensor = BT_Recieve();
 502:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 506:	38 2f       	mov	r19, r24
 508:	89 83       	std	Y+1, r24	; 0x01

		DirtyDawg.back_sensor = DirtyDawg.ECG;
 50a:	ed 81       	ldd	r30, Y+5	; 0x05
 50c:	eb 83       	std	Y+3, r30	; 0x03
		DirtyDawg.front_sensor = DirtyDawg.command;
 50e:	fe 81       	ldd	r31, Y+6	; 0x06
 510:	fa 83       	std	Y+2, r31	; 0x02
		// Convert sensor value to ASCII
		front[0] = DirtyDawg.front_sensor / 100;
 512:	29 e2       	ldi	r18, 0x29	; 41
 514:	f2 9f       	mul	r31, r18
 516:	d1 2c       	mov	r13, r1
 518:	11 24       	eor	r1, r1
 51a:	d6 94       	lsr	r13
 51c:	d6 94       	lsr	r13
 51e:	d6 94       	lsr	r13
 520:	d6 94       	lsr	r13
 522:	0f 2e       	mov	r0, r31
 524:	f6 e7       	ldi	r31, 0x76	; 118
 526:	ef 2e       	mov	r14, r31
 528:	f1 e0       	ldi	r31, 0x01	; 1
 52a:	ff 2e       	mov	r15, r31
 52c:	f0 2d       	mov	r31, r0
 52e:	d7 01       	movw	r26, r14
 530:	dc 92       	st	X, r13
		front[1] = (DirtyDawg.front_sensor - (front[0] * 100 )) / 10;
 532:	4c e9       	ldi	r20, 0x9C	; 156
 534:	5d 2d       	mov	r21, r13
 536:	45 03       	mulsu	r20, r21
 538:	c0 01       	movw	r24, r0
 53a:	11 24       	eor	r1, r1
 53c:	8f 0f       	add	r24, r31
 53e:	91 1d       	adc	r25, r1
 540:	0a e0       	ldi	r16, 0x0A	; 10
 542:	10 e0       	ldi	r17, 0x00	; 0
 544:	b8 01       	movw	r22, r16
 546:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__divmodhi4>
 54a:	d7 01       	movw	r26, r14
 54c:	11 96       	adiw	r26, 0x01	; 1
 54e:	6c 93       	st	X, r22
 550:	11 97       	sbiw	r26, 0x01	; 1
 552:	d4 9e       	mul	r13, r20
 554:	f0 0d       	add	r31, r0
 556:	11 24       	eor	r1, r1
		front[2] = (DirtyDawg.front_sensor - (front[0] * 100 )) - front[1] * 10;
 558:	66 0f       	add	r22, r22
 55a:	86 2f       	mov	r24, r22
 55c:	88 0f       	add	r24, r24
 55e:	88 0f       	add	r24, r24
 560:	68 0f       	add	r22, r24
 562:	f6 1b       	sub	r31, r22
 564:	12 96       	adiw	r26, 0x02	; 2
 566:	fc 93       	st	X, r31

		back[0] = DirtyDawg.back_sensor / 100;
 568:	e2 9f       	mul	r30, r18
 56a:	f1 2d       	mov	r31, r1
 56c:	11 24       	eor	r1, r1
 56e:	f2 95       	swap	r31
 570:	ff 70       	andi	r31, 0x0F	; 15
 572:	0f 2e       	mov	r0, r31
 574:	fd e6       	ldi	r31, 0x6D	; 109
 576:	ef 2e       	mov	r14, r31
 578:	f1 e0       	ldi	r31, 0x01	; 1
 57a:	ff 2e       	mov	r15, r31
 57c:	f0 2d       	mov	r31, r0
 57e:	d7 01       	movw	r26, r14
 580:	fc 93       	st	X, r31
		back[1] = (DirtyDawg.back_sensor - (back[0] * 100 )) / 10;
 582:	5f 2f       	mov	r21, r31
 584:	45 03       	mulsu	r20, r21
 586:	c0 01       	movw	r24, r0
 588:	11 24       	eor	r1, r1
 58a:	8e 0f       	add	r24, r30
 58c:	91 1d       	adc	r25, r1
 58e:	b8 01       	movw	r22, r16
 590:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__divmodhi4>
 594:	d7 01       	movw	r26, r14
 596:	11 96       	adiw	r26, 0x01	; 1
 598:	6c 93       	st	X, r22
 59a:	11 97       	sbiw	r26, 0x01	; 1
 59c:	f4 9f       	mul	r31, r20
 59e:	e0 0d       	add	r30, r0
 5a0:	11 24       	eor	r1, r1
		back[2] = (DirtyDawg.back_sensor - (back[0] * 100 )) - back[1] * 10;
 5a2:	66 0f       	add	r22, r22
 5a4:	86 2f       	mov	r24, r22
 5a6:	88 0f       	add	r24, r24
 5a8:	88 0f       	add	r24, r24
 5aa:	68 0f       	add	r22, r24
 5ac:	e6 1b       	sub	r30, r22
 5ae:	12 96       	adiw	r26, 0x02	; 2
 5b0:	ec 93       	st	X, r30

		left[0] = DirtyDawg.left_sensor / 100;
 5b2:	e8 81       	ld	r30, Y
 5b4:	e2 9f       	mul	r30, r18
 5b6:	f1 2d       	mov	r31, r1
 5b8:	11 24       	eor	r1, r1
 5ba:	f2 95       	swap	r31
 5bc:	ff 70       	andi	r31, 0x0F	; 15
 5be:	c3 e7       	ldi	r28, 0x73	; 115
 5c0:	d1 e0       	ldi	r29, 0x01	; 1
 5c2:	f8 83       	st	Y, r31
		left[1] = (DirtyDawg.left_sensor - (left[0] * 100 )) / 10;
 5c4:	5f 2f       	mov	r21, r31
 5c6:	45 03       	mulsu	r20, r21
 5c8:	c0 01       	movw	r24, r0
 5ca:	11 24       	eor	r1, r1
 5cc:	8e 0f       	add	r24, r30
 5ce:	91 1d       	adc	r25, r1
 5d0:	b8 01       	movw	r22, r16
 5d2:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__divmodhi4>
 5d6:	69 83       	std	Y+1, r22	; 0x01
 5d8:	f4 9f       	mul	r31, r20
 5da:	e0 0d       	add	r30, r0
 5dc:	11 24       	eor	r1, r1
		left[2] = (DirtyDawg.left_sensor - (left[0] * 100 )) - left[1] * 10;
 5de:	66 0f       	add	r22, r22
 5e0:	86 2f       	mov	r24, r22
 5e2:	88 0f       	add	r24, r24
 5e4:	88 0f       	add	r24, r24
 5e6:	68 0f       	add	r22, r24
 5e8:	e6 1b       	sub	r30, r22
 5ea:	ea 83       	std	Y+2, r30	; 0x02

		right[0] = DirtyDawg.right_sensor / 100;
 5ec:	32 9f       	mul	r19, r18
 5ee:	21 2d       	mov	r18, r1
 5f0:	11 24       	eor	r1, r1
 5f2:	22 95       	swap	r18
 5f4:	2f 70       	andi	r18, 0x0F	; 15
 5f6:	e0 e7       	ldi	r30, 0x70	; 112
 5f8:	f1 e0       	ldi	r31, 0x01	; 1
 5fa:	20 83       	st	Z, r18
		right[1] = (DirtyDawg.right_sensor - (right[0] * 100 )) / 10;
 5fc:	42 03       	mulsu	r20, r18
 5fe:	c0 01       	movw	r24, r0
 600:	11 24       	eor	r1, r1
 602:	83 0f       	add	r24, r19
 604:	91 1d       	adc	r25, r1
 606:	b8 01       	movw	r22, r16
 608:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__divmodhi4>
 60c:	61 83       	std	Z+1, r22	; 0x01
 60e:	24 9f       	mul	r18, r20
 610:	30 0d       	add	r19, r0
 612:	11 24       	eor	r1, r1
		right[2] = (DirtyDawg.right_sensor - (right[0] * 100 )) - right[1] * 10;
 614:	66 0f       	add	r22, r22
 616:	86 2f       	mov	r24, r22
 618:	88 0f       	add	r24, r24
 61a:	88 0f       	add	r24, r24
 61c:	68 0f       	add	r22, r24
 61e:	36 1b       	sub	r19, r22
 620:	32 83       	std	Z+2, r19	; 0x02
 622:	e6 e7       	ldi	r30, 0x76	; 118
 624:	f1 e0       	ldi	r31, 0x01	; 1
 626:	97 01       	movw	r18, r14
 628:	60 e7       	ldi	r22, 0x70	; 112
 62a:	71 e0       	ldi	r23, 0x01	; 1
 62c:	49 e7       	ldi	r20, 0x79	; 121
 62e:	51 e0       	ldi	r21, 0x01	; 1

		for(int i = 0; i < 3; i++){
			front[i] += '0';
 630:	80 81       	ld	r24, Z
 632:	80 5d       	subi	r24, 0xD0	; 208
 634:	81 93       	st	Z+, r24
			back[i] += '0';
 636:	d9 01       	movw	r26, r18
 638:	8c 91       	ld	r24, X
 63a:	80 5d       	subi	r24, 0xD0	; 208
 63c:	8d 93       	st	X+, r24
 63e:	9d 01       	movw	r18, r26
			left[i] += '0';
 640:	88 81       	ld	r24, Y
 642:	80 5d       	subi	r24, 0xD0	; 208
 644:	89 93       	st	Y+, r24
			right[i] += '0';
 646:	db 01       	movw	r26, r22
 648:	8c 91       	ld	r24, X
 64a:	80 5d       	subi	r24, 0xD0	; 208
 64c:	8d 93       	st	X+, r24
 64e:	bd 01       	movw	r22, r26

		right[0] = DirtyDawg.right_sensor / 100;
		right[1] = (DirtyDawg.right_sensor - (right[0] * 100 )) / 10;
		right[2] = (DirtyDawg.right_sensor - (right[0] * 100 )) - right[1] * 10;

		for(int i = 0; i < 3; i++){
 650:	e4 17       	cp	r30, r20
 652:	f5 07       	cpc	r31, r21
 654:	69 f7       	brne	.-38     	; 0x630 <__stack+0x131>
			right[i] += '0';
		}
	}

	// Change state 
	DirtyDawg.state = LCD_STATE;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	80 93 81 01 	sts	0x0181, r24
}
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	ff 90       	pop	r15
 666:	ef 90       	pop	r14
 668:	df 90       	pop	r13
 66a:	08 95       	ret

0000066c <Test_Car_Commands>:

void Test_Car_Commands(void){
 66c:	0f 93       	push	r16
 66e:	1f 93       	push	r17
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
	#define STOP 1<<1
	#define REVERSE 1<<2
	#define TURN_LEFT 1<<3
	#define TURN_RIGHT 1<<4
*/
	LCD_Byte(LCD_CLEAR,LCD_CMD);
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_Byte(LCD_LINE_1, LCD_CMD);
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	80 e8       	ldi	r24, 0x80	; 128
 680:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_String("Test commands");
 684:	80 e2       	ldi	r24, 0x20	; 32
 686:	91 e0       	ldi	r25, 0x01	; 1
 688:	0e 94 c2 05 	call	0xb84	; 0xb84 <LCD_String>

	// Stop
	DirtyDawg.command = STOP;
 68c:	c9 e7       	ldi	r28, 0x79	; 121
 68e:	d1 e0       	ldi	r29, 0x01	; 1
 690:	12 e0       	ldi	r17, 0x02	; 2
 692:	1e 83       	std	Y+6, r17	; 0x06
	DirtyDawg.ECG = 0;
 694:	1d 82       	std	Y+5, r1	; 0x05
	BT_Send(DirtyDawg.command);
 696:	82 e0       	ldi	r24, 0x02	; 2
 698:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 69c:	8d 81       	ldd	r24, Y+5	; 0x05
 69e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 6a2:	2f ef       	ldi	r18, 0xFF	; 255
 6a4:	83 ed       	ldi	r24, 0xD3	; 211
 6a6:	90 e3       	ldi	r25, 0x30	; 48
 6a8:	21 50       	subi	r18, 0x01	; 1
 6aa:	80 40       	sbci	r24, 0x00	; 0
 6ac:	90 40       	sbci	r25, 0x00	; 0
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <Test_Car_Commands+0x3c>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <Test_Car_Commands+0x46>
 6b2:	00 00       	nop

	_delay_ms(2000);

	// Drive forward
	DirtyDawg.command = 0;
 6b4:	1e 82       	std	Y+6, r1	; 0x06
	DirtyDawg.ECG = 100;
 6b6:	04 e6       	ldi	r16, 0x64	; 100
 6b8:	0d 83       	std	Y+5, r16	; 0x05
	BT_Send(DirtyDawg.command);
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 6c0:	8d 81       	ldd	r24, Y+5	; 0x05
 6c2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 6c6:	2f ef       	ldi	r18, 0xFF	; 255
 6c8:	83 ed       	ldi	r24, 0xD3	; 211
 6ca:	90 e3       	ldi	r25, 0x30	; 48
 6cc:	21 50       	subi	r18, 0x01	; 1
 6ce:	80 40       	sbci	r24, 0x00	; 0
 6d0:	90 40       	sbci	r25, 0x00	; 0
 6d2:	e1 f7       	brne	.-8      	; 0x6cc <Test_Car_Commands+0x60>
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <Test_Car_Commands+0x6a>
 6d6:	00 00       	nop

	_delay_ms(2000);
	
	// Reverse
	DirtyDawg.command = REVERSE;
 6d8:	84 e0       	ldi	r24, 0x04	; 4
 6da:	8e 83       	std	Y+6, r24	; 0x06
	DirtyDawg.ECG = 100;
 6dc:	0d 83       	std	Y+5, r16	; 0x05
	BT_Send(DirtyDawg.command);
 6de:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 6e2:	8d 81       	ldd	r24, Y+5	; 0x05
 6e4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 6e8:	2f ef       	ldi	r18, 0xFF	; 255
 6ea:	83 ed       	ldi	r24, 0xD3	; 211
 6ec:	90 e3       	ldi	r25, 0x30	; 48
 6ee:	21 50       	subi	r18, 0x01	; 1
 6f0:	80 40       	sbci	r24, 0x00	; 0
 6f2:	90 40       	sbci	r25, 0x00	; 0
 6f4:	e1 f7       	brne	.-8      	; 0x6ee <Test_Car_Commands+0x82>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <Test_Car_Commands+0x8c>
 6f8:	00 00       	nop
	
	_delay_ms(2000);
	
	// Turn on lights
	DirtyDawg.command = LIGHT;
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	8e 83       	std	Y+6, r24	; 0x06
	DirtyDawg.ECG = 0;
 6fe:	1d 82       	std	Y+5, r1	; 0x05
	BT_Send(DirtyDawg.command);
 700:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 704:	8d 81       	ldd	r24, Y+5	; 0x05
 706:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 70a:	2f ef       	ldi	r18, 0xFF	; 255
 70c:	83 ed       	ldi	r24, 0xD3	; 211
 70e:	90 e3       	ldi	r25, 0x30	; 48
 710:	21 50       	subi	r18, 0x01	; 1
 712:	80 40       	sbci	r24, 0x00	; 0
 714:	90 40       	sbci	r25, 0x00	; 0
 716:	e1 f7       	brne	.-8      	; 0x710 <Test_Car_Commands+0xa4>
 718:	00 c0       	rjmp	.+0      	; 0x71a <Test_Car_Commands+0xae>
 71a:	00 00       	nop

	_delay_ms(2000);
	
	// Turn left
	DirtyDawg.command = TURN_LEFT;
 71c:	88 e0       	ldi	r24, 0x08	; 8
 71e:	8e 83       	std	Y+6, r24	; 0x06
	DirtyDawg.ECG = 0;
 720:	1d 82       	std	Y+5, r1	; 0x05
	BT_Send(DirtyDawg.command);
 722:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 726:	8d 81       	ldd	r24, Y+5	; 0x05
 728:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 72c:	2f ef       	ldi	r18, 0xFF	; 255
 72e:	83 ed       	ldi	r24, 0xD3	; 211
 730:	90 e3       	ldi	r25, 0x30	; 48
 732:	21 50       	subi	r18, 0x01	; 1
 734:	80 40       	sbci	r24, 0x00	; 0
 736:	90 40       	sbci	r25, 0x00	; 0
 738:	e1 f7       	brne	.-8      	; 0x732 <Test_Car_Commands+0xc6>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <Test_Car_Commands+0xd0>
 73c:	00 00       	nop

	_delay_ms(2000);
	
	// Turn right
	DirtyDawg.command = TURN_RIGHT;
 73e:	80 e1       	ldi	r24, 0x10	; 16
 740:	8e 83       	std	Y+6, r24	; 0x06
	DirtyDawg.ECG = 0;
 742:	1d 82       	std	Y+5, r1	; 0x05
	BT_Send(DirtyDawg.command);
 744:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 748:	8d 81       	ldd	r24, Y+5	; 0x05
 74a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 74e:	2f ef       	ldi	r18, 0xFF	; 255
 750:	83 ed       	ldi	r24, 0xD3	; 211
 752:	90 e3       	ldi	r25, 0x30	; 48
 754:	21 50       	subi	r18, 0x01	; 1
 756:	80 40       	sbci	r24, 0x00	; 0
 758:	90 40       	sbci	r25, 0x00	; 0
 75a:	e1 f7       	brne	.-8      	; 0x754 <Test_Car_Commands+0xe8>
 75c:	00 c0       	rjmp	.+0      	; 0x75e <Test_Car_Commands+0xf2>
 75e:	00 00       	nop

	_delay_ms(2000);

	// Stop
	DirtyDawg.command = STOP;
 760:	1e 83       	std	Y+6, r17	; 0x06
	DirtyDawg.ECG = 0;
 762:	1d 82       	std	Y+5, r1	; 0x05
	BT_Send(DirtyDawg.command);
 764:	82 e0       	ldi	r24, 0x02	; 2
 766:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 76a:	8d 81       	ldd	r24, Y+5	; 0x05
 76c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	LCD_Byte(LCD_CLEAR,LCD_CMD);
 770:	60 e0       	ldi	r22, 0x00	; 0
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>

}
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	1f 91       	pop	r17
 77e:	0f 91       	pop	r16
 780:	08 95       	ret

00000782 <Red_LED_On>:
void Yellow_LED_Off(void){
	PORTD &= (0<<PORTD7);
}

void Red_LED_On(void){
	PORTB |= (1<<PORTB1);
 782:	29 9a       	sbi	0x05, 1	; 5
 784:	08 95       	ret

00000786 <Error>:

void Error(unsigned int errorcode){
	
	//Flashes the red lights and show message on LCD
	unsigned long ticks = 0;
	LCD_Byte(LCD_CLEAR, LCD_CMD);
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_Byte(LCD_LINE_1 + 5, LCD_CMD);
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	85 e8       	ldi	r24, 0x85	; 133
 792:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_String("Error");
 796:	8e e2       	ldi	r24, 0x2E	; 46
 798:	91 e0       	ldi	r25, 0x01	; 1
 79a:	0e 94 c2 05 	call	0xb84	; 0xb84 <LCD_String>
}

void Error(unsigned int errorcode){
	
	//Flashes the red lights and show message on LCD
	unsigned long ticks = 0;
 79e:	c1 2c       	mov	r12, r1
 7a0:	d1 2c       	mov	r13, r1
 7a2:	76 01       	movw	r14, r12
	LCD_Byte(LCD_CLEAR, LCD_CMD);
	LCD_Byte(LCD_LINE_1 + 5, LCD_CMD);
	LCD_String("Error");
	for(;;){
		if(ticks%10000 == 0){
 7a4:	0f 2e       	mov	r0, r31
 7a6:	f0 e1       	ldi	r31, 0x10	; 16
 7a8:	8f 2e       	mov	r8, r31
 7aa:	f7 e2       	ldi	r31, 0x27	; 39
 7ac:	9f 2e       	mov	r9, r31
 7ae:	a1 2c       	mov	r10, r1
 7b0:	b1 2c       	mov	r11, r1
 7b2:	f0 2d       	mov	r31, r0
 7b4:	c7 01       	movw	r24, r14
 7b6:	b6 01       	movw	r22, r12
 7b8:	a5 01       	movw	r20, r10
 7ba:	94 01       	movw	r18, r8
 7bc:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__udivmodsi4>
 7c0:	67 2b       	or	r22, r23
 7c2:	68 2b       	or	r22, r24
 7c4:	69 2b       	or	r22, r25
 7c6:	11 f4       	brne	.+4      	; 0x7cc <Error+0x46>
			Red_LED_On();
 7c8:	0e 94 c1 03 	call	0x782	; 0x782 <Red_LED_On>
		}
		if(ticks%10000 == 50000){
			Red_LED_Off();
		}
		ticks++;
 7cc:	8f ef       	ldi	r24, 0xFF	; 255
 7ce:	c8 1a       	sub	r12, r24
 7d0:	d8 0a       	sbc	r13, r24
 7d2:	e8 0a       	sbc	r14, r24
 7d4:	f8 0a       	sbc	r15, r24
	}
 7d6:	ee cf       	rjmp	.-36     	; 0x7b4 <Error+0x2e>

000007d8 <main>:
volatile uint8_t portbhistory = 0;

int main(void){

	// Sets the starting state
	DirtyDawg.state = LCD_STATE;
 7d8:	c9 e7       	ldi	r28, 0x79	; 121
 7da:	d1 e0       	ldi	r29, 0x01	; 1
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	88 87       	std	Y+8, r24	; 0x08

	// Initiate the hardware
	System_Init();
 7e0:	0e 94 53 00 	call	0xa6	; 0xa6 <System_Init>
	
	// Initiate the TWI bus as a master
	TWI_Master_Init();
 7e4:	0e 94 d2 05 	call	0xba4	; 0xba4 <TWI_Master_Init>

	// Initiate the hardware defined UART
	UART_Init(19200);
 7e8:	80 e0       	ldi	r24, 0x00	; 0
 7ea:	9b e4       	ldi	r25, 0x4B	; 75
 7ec:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_Init>
	
	// Initiate the LCD Screen
	LCD_Init();
 7f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_Init>
	
	// Initiate the software define UART
	suart_init();
 7f4:	0e 94 98 04 	call	0x930	; 0x930 <suart_init>

	// Initiate/Clear the BlueSmirf from previous commands
	BT_Init();
 7f8:	0e 94 07 01 	call	0x20e	; 0x20e <BT_Init>

	// Connect the BlueSmirf to the car
	LCD_Byte(LCD_LINE_1 + 3, LCD_CMD);
 7fc:	60 e0       	ldi	r22, 0x00	; 0
 7fe:	83 e8       	ldi	r24, 0x83	; 131
 800:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_String("DirtyDawg!");
 804:	84 e3       	ldi	r24, 0x34	; 52
 806:	91 e0       	ldi	r25, 0x01	; 1
 808:	0e 94 c2 05 	call	0xb84	; 0xb84 <LCD_String>
	LCD_Byte(LCD_LINE_2 + 3, LCD_CMD);
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	83 ec       	ldi	r24, 0xC3	; 195
 810:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_String("Connecting");
 814:	8f e3       	ldi	r24, 0x3F	; 63
 816:	91 e0       	ldi	r25, 0x01	; 1
 818:	0e 94 c2 05 	call	0xb84	; 0xb84 <LCD_String>
	BT_Connection_Check();
 81c:	0e 94 2f 01 	call	0x25e	; 0x25e <BT_Connection_Check>
	while(!(DirtyDawg.status & BT_CONNECTED))
 820:	8f 81       	ldd	r24, Y+7	; 0x07
 822:	83 fd       	sbrc	r24, 3
 824:	05 c0       	rjmp	.+10     	; 0x830 <main+0x58>
		BT_Connect();
 826:	0e 94 8e 01 	call	0x31c	; 0x31c <BT_Connect>
	LCD_Byte(LCD_LINE_1 + 3, LCD_CMD);
	LCD_String("DirtyDawg!");
	LCD_Byte(LCD_LINE_2 + 3, LCD_CMD);
	LCD_String("Connecting");
	BT_Connection_Check();
	while(!(DirtyDawg.status & BT_CONNECTED))
 82a:	8f 81       	ldd	r24, Y+7	; 0x07
 82c:	83 ff       	sbrs	r24, 3
 82e:	fb cf       	rjmp	.-10     	; 0x826 <main+0x4e>
		BT_Connect();
	  
	// When active connection send '=' to car 
	BT_Send('=');
 830:	8d e3       	ldi	r24, 0x3D	; 61
 832:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
//	_delay_ms(500);
//	Test_Car_Commands();
	

	// Prepare the LCD for distance data
	LCD_Byte(LCD_LINE_1, LCD_CMD);
 836:	60 e0       	ldi	r22, 0x00	; 0
 838:	80 e8       	ldi	r24, 0x80	; 128
 83a:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_String(ROW1);
 83e:	8a e4       	ldi	r24, 0x4A	; 74
 840:	91 e0       	ldi	r25, 0x01	; 1
 842:	0e 94 c2 05 	call	0xb84	; 0xb84 <LCD_String>
	LCD_Byte(LCD_LINE_2, LCD_CMD);
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	80 ec       	ldi	r24, 0xC0	; 192
 84a:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_String(ROW2);
 84e:	8b e5       	ldi	r24, 0x5B	; 91
 850:	91 e0       	ldi	r25, 0x01	; 1
 852:	0e 94 c2 05 	call	0xb84	; 0xb84 <LCD_String>
	
	// Main loop
	while(TRUE){
		
		switch(DirtyDawg.state){
 856:	c9 e7       	ldi	r28, 0x79	; 121
 858:	d1 e0       	ldi	r29, 0x01	; 1
 85a:	88 85       	ldd	r24, Y+8	; 0x08
 85c:	82 30       	cpi	r24, 0x02	; 2
 85e:	39 f0       	breq	.+14     	; 0x86e <main+0x96>
 860:	83 30       	cpi	r24, 0x03	; 3
 862:	41 f0       	breq	.+16     	; 0x874 <main+0x9c>
 864:	81 30       	cpi	r24, 0x01	; 1
 866:	49 f4       	brne	.+18     	; 0x87a <main+0xa2>
			
			// Put sensor data to LCD
			case LCD_STATE:
				LCD_Update();
 868:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Update>
				break;
 86c:	f6 cf       	rjmp	.-20     	; 0x85a <main+0x82>
			
			// Send commands to the car
			case SEND_DATA_STATE:
				BT_Send_Data();
 86e:	0e 94 27 02 	call	0x44e	; 0x44e <BT_Send_Data>
				break;
 872:	f3 cf       	rjmp	.-26     	; 0x85a <main+0x82>

			// Get sensor data from the car
			case GET_DATA_STATE:
				BT_Recieve_Data();
 874:	0e 94 69 02 	call	0x4d2	; 0x4d2 <BT_Recieve_Data>
				break;
 878:	f0 cf       	rjmp	.-32     	; 0x85a <main+0x82>
				
			default:
				Error(0x53);
 87a:	83 e5       	ldi	r24, 0x53	; 83
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 c3 03 	call	0x786	; 0x786 <Error>
 882:	eb cf       	rjmp	.-42     	; 0x85a <main+0x82>

00000884 <__vector_5>:
			
		}
	}	
}

ISR(PCINT2_vect){
 884:	1f 92       	push	r1
 886:	0f 92       	push	r0
 888:	0f b6       	in	r0, 0x3f	; 63
 88a:	0f 92       	push	r0
 88c:	11 24       	eor	r1, r1
 88e:	2f 93       	push	r18
 890:	3f 93       	push	r19
 892:	4f 93       	push	r20
 894:	5f 93       	push	r21
 896:	6f 93       	push	r22
 898:	7f 93       	push	r23
 89a:	8f 93       	push	r24
 89c:	9f 93       	push	r25
 89e:	af 93       	push	r26
 8a0:	bf 93       	push	r27
 8a2:	ef 93       	push	r30
 8a4:	ff 93       	push	r31
    uint8_t changedbits;

    changedbits = PIND ^ portbhistory;
 8a6:	89 b1       	in	r24, 0x09	; 9
 8a8:	90 91 6c 01 	lds	r25, 0x016C
 8ac:	89 27       	eor	r24, r25
    portbhistory = PIND;
 8ae:	99 b1       	in	r25, 0x09	; 9
 8b0:	90 93 6c 01 	sts	0x016C, r25

    // Interrupt PCINT20
	// Toggles light on and off
    if(changedbits & (1 << PIND4)){
 8b4:	84 ff       	sbrs	r24, 4
 8b6:	10 c0       	rjmp	.+32     	; 0x8d8 <__vector_5+0x54>
		if(DirtyDawg.status & LIGHT_BUTTON){
 8b8:	90 91 80 01 	lds	r25, 0x0180
 8bc:	94 ff       	sbrs	r25, 4
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__vector_5+0x4e>
			DirtyDawg.command ^= LIGHT;
 8c0:	e9 e7       	ldi	r30, 0x79	; 121
 8c2:	f1 e0       	ldi	r31, 0x01	; 1
 8c4:	36 81       	ldd	r19, Z+6	; 0x06
 8c6:	21 e0       	ldi	r18, 0x01	; 1
 8c8:	23 27       	eor	r18, r19
 8ca:	26 83       	std	Z+6, r18	; 0x06
			DirtyDawg.status &= ~LIGHT_BUTTON;
 8cc:	90 7e       	andi	r25, 0xE0	; 224
 8ce:	97 83       	std	Z+7, r25	; 0x07
 8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <__vector_5+0x54>
		}
		else{
			DirtyDawg.status |= LIGHT_BUTTON;
 8d2:	90 61       	ori	r25, 0x10	; 16
 8d4:	90 93 80 01 	sts	0x0180, r25
		}
    }

    // Interrupt PCINT21
	// Toggles reverse and forward
    if(changedbits & (1 << PIND5)){
 8d8:	85 ff       	sbrs	r24, 5
 8da:	0f c0       	rjmp	.+30     	; 0x8fa <__vector_5+0x76>
		if(DirtyDawg.status & REVERSE_BUTTON){
 8dc:	80 91 80 01 	lds	r24, 0x0180
 8e0:	85 ff       	sbrs	r24, 5
 8e2:	08 c0       	rjmp	.+16     	; 0x8f4 <__vector_5+0x70>
			// DirtyDawg.command ^= REVERSE;
			Test_Car_Commands();
 8e4:	0e 94 36 03 	call	0x66c	; 0x66c <Test_Car_Commands>
			DirtyDawg.status &= ~REVERSE_BUTTON;
 8e8:	e9 e7       	ldi	r30, 0x79	; 121
 8ea:	f1 e0       	ldi	r31, 0x01	; 1
 8ec:	87 81       	ldd	r24, Z+7	; 0x07
 8ee:	80 7c       	andi	r24, 0xC0	; 192
 8f0:	87 83       	std	Z+7, r24	; 0x07
 8f2:	03 c0       	rjmp	.+6      	; 0x8fa <__vector_5+0x76>
		}
		else{
			DirtyDawg.status |= REVERSE_BUTTON;
 8f4:	80 62       	ori	r24, 0x20	; 32
 8f6:	80 93 80 01 	sts	0x0180, r24
		}
    }
}
 8fa:	ff 91       	pop	r31
 8fc:	ef 91       	pop	r30
 8fe:	bf 91       	pop	r27
 900:	af 91       	pop	r26
 902:	9f 91       	pop	r25
 904:	8f 91       	pop	r24
 906:	7f 91       	pop	r23
 908:	6f 91       	pop	r22
 90a:	5f 91       	pop	r21
 90c:	4f 91       	pop	r20
 90e:	3f 91       	pop	r19
 910:	2f 91       	pop	r18
 912:	0f 90       	pop	r0
 914:	0f be       	out	0x3f, r0	; 63
 916:	0f 90       	pop	r0
 918:	1f 90       	pop	r1
 91a:	18 95       	reti

0000091c <__vector_18>:

ISR(USART_RX_vect){
 91c:	1f 92       	push	r1
 91e:	0f 92       	push	r0
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	0f 92       	push	r0
 924:	11 24       	eor	r1, r1
		DirtyDawg.front_sensor = BT_Recieve();
		DirtyDawg.back_sensor = BT_Recieve();
		DirtyDawg.left_sensor = BT_Recieve();
		DirtyDawg.right_sensor = BT_Recieve();
	} */
}
 926:	0f 90       	pop	r0
 928:	0f be       	out	0x3f, r0	; 63
 92a:	0f 90       	pop	r0
 92c:	1f 90       	pop	r1
 92e:	18 95       	reti

00000930 <suart_init>:


void suart_init( void )
{
	// Enable interrupt
	sei();
 930:	78 94       	sei
	
	// Set the port HIGH
	SBIT(PORTD,STX) = 1;
 932:	5b 9a       	sbi	0x0b, 3	; 11

	// Set the prescaler to 1
	TCCR0B = (1 << CS00);	
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	85 bd       	out	0x25, r24	; 37
	
	// Enable output compare interrupt
	TIMSK0 = (1 << OCIE0A);		
 938:	92 e0       	ldi	r25, 0x02	; 2
 93a:	90 93 6e 00 	sts	0x006E, r25

	// Falling edge
	EICRA = (1 << ISC01);
 93e:	90 93 69 00 	sts	0x0069, r25
	
	// Enable edge interrupt			
	EIMSK = (1 << INT0);			
 942:	8d bb       	out	0x1d, r24	; 29

	// Nothing to send
	stx_count = 0;	
 944:	10 92 85 01 	sts	0x0185, r1
	
	// Nothing to receive			
	srx_done = 0;	
 948:	10 92 86 01 	sts	0x0186, r1
	
	// Sets the output	        
	STXDDR |= 1 << STX;			
 94c:	53 9a       	sbi	0x0a, 3	; 10
 94e:	08 95       	ret

00000950 <sgetchar>:
}


u8 sgetchar (void)      // Receive Byte
{
	while (!srx_done);      // wait until byte is received
 950:	80 91 86 01 	lds	r24, 0x0186
 954:	88 23       	and	r24, r24
 956:	e1 f3       	breq	.-8      	; 0x950 <sgetchar>
	srx_done = 0;
 958:	10 92 86 01 	sts	0x0186, r1
	return srx_data;
}
 95c:	80 91 84 01 	lds	r24, 0x0184
 960:	08 95       	ret

00000962 <__vector_1>:


ISR (INT0_vect)    // RX start
{
 962:	1f 92       	push	r1
 964:	0f 92       	push	r0
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	0f 92       	push	r0
 96a:	11 24       	eor	r1, r1
 96c:	8f 93       	push	r24
	// scan 1.5 bits after start (to set timing right)
	OCR0B = TCNT0 + (u8)((BIT_TIME * 3) / 2);
 96e:	86 b5       	in	r24, 0x26	; 38
 970:	80 53       	subi	r24, 0x30	; 48
 972:	88 bd       	out	0x28, r24	; 40

	// Clear bit storage
	srx_tmp = 0;  
 974:	10 92 87 01 	sts	0x0187, r1
	
	// Set bit-mask      
	srx_mask = 1;        
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	80 93 83 01 	sts	0x0183, r24
	if( !(SRXPIN & 1<<SRX))  {  // still low
 97e:	4a 99       	sbic	0x09, 2	; 9
 980:	04 c0       	rjmp	.+8      	; 0x98a <__vector_1+0x28>
		EIMSK &= ~(1 << INT0);			// disable edge interrupt
 982:	e8 98       	cbi	0x1d, 0	; 29
		TIMSK0 = 1<<OCIE0A^1<<OCIE0B;  // wait for first bit
 984:	86 e0       	ldi	r24, 0x06	; 6
 986:	80 93 6e 00 	sts	0x006E, r24
	}
	TIFR0 = (1<<OCF0B);      // clear pending interrupt ? why does that output compare int occur?
 98a:	84 e0       	ldi	r24, 0x04	; 4
 98c:	85 bb       	out	0x15, r24	; 21
	EIFR |= (1 << INTF0);		// clear any pending edge interrupt
 98e:	e0 9a       	sbi	0x1c, 0	; 28
}
 990:	8f 91       	pop	r24
 992:	0f 90       	pop	r0
 994:	0f be       	out	0x3f, r0	; 63
 996:	0f 90       	pop	r0
 998:	1f 90       	pop	r1
 99a:	18 95       	reti

0000099c <__vector_15>:


ISR (TIMER0_COMPB_vect)
{
 99c:	1f 92       	push	r1
 99e:	0f 92       	push	r0
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	0f 92       	push	r0
 9a4:	11 24       	eor	r1, r1
 9a6:	8f 93       	push	r24
 9a8:	9f 93       	push	r25
	u8 in = SRXPIN;      // scan RX line
 9aa:	99 b1       	in	r25, 0x09	; 9

	if (srx_mask) {
 9ac:	80 91 83 01 	lds	r24, 0x0183
 9b0:	88 23       	and	r24, r24
 9b2:	71 f0       	breq	.+28     	; 0x9d0 <__vector_15+0x34>
		if (in & 1 << SRX)
 9b4:	92 ff       	sbrs	r25, 2
 9b6:	05 c0       	rjmp	.+10     	; 0x9c2 <__vector_15+0x26>
			srx_tmp |= srx_mask;
 9b8:	90 91 87 01 	lds	r25, 0x0187
 9bc:	98 2b       	or	r25, r24
 9be:	90 93 87 01 	sts	0x0187, r25
		srx_mask <<= 1; 
 9c2:	88 0f       	add	r24, r24
 9c4:	80 93 83 01 	sts	0x0183, r24
		OCR0B += BIT_TIME;      // next bit slice
 9c8:	88 b5       	in	r24, 0x28	; 40
 9ca:	85 57       	subi	r24, 0x75	; 117
 9cc:	88 bd       	out	0x28, r24	; 40
 9ce:	0c c0       	rjmp	.+24     	; 0x9e8 <__vector_15+0x4c>
		} else {
		srx_done = 1;      // mark RX data valid
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	80 93 86 01 	sts	0x0186, r24
		srx_data = srx_tmp;      // store RX data
 9d6:	90 91 87 01 	lds	r25, 0x0187
 9da:	90 93 84 01 	sts	0x0184, r25

		TIMSK0 = 1<<OCIE0A;        // enable TX and wait for start
 9de:	92 e0       	ldi	r25, 0x02	; 2
 9e0:	90 93 6e 00 	sts	0x006E, r25
		EIFR |= (1 << INTF0);		// clear any pending edge interrupt: This hinders the in0-vect from beeing triggerd again just now which may occur by falling edges in the serial data bits
 9e4:	e0 9a       	sbi	0x1c, 0	; 28
		EIMSK = 1 << INT0;	// Re-enable edge interrupt
 9e6:	8d bb       	out	0x1d, r24	; 29
	}

}
 9e8:	9f 91       	pop	r25
 9ea:	8f 91       	pop	r24
 9ec:	0f 90       	pop	r0
 9ee:	0f be       	out	0x3f, r0	; 63
 9f0:	0f 90       	pop	r0
 9f2:	1f 90       	pop	r1
 9f4:	18 95       	reti

000009f6 <__vector_14>:
	sputchar (*txt++);
}


ISR (TIMER0_COMPA_vect)    // TX bit
{
 9f6:	1f 92       	push	r1
 9f8:	0f 92       	push	r0
 9fa:	0f b6       	in	r0, 0x3f	; 63
 9fc:	0f 92       	push	r0
 9fe:	11 24       	eor	r1, r1
 a00:	8f 93       	push	r24
 a02:	9f 93       	push	r25
	u8 dout;
	u8 count;

	OCR0A += BIT_TIME;      // Next bit slice
 a04:	87 b5       	in	r24, 0x27	; 39
 a06:	85 57       	subi	r24, 0x75	; 117
 a08:	87 bd       	out	0x27, r24	; 39
	count = stx_count;
 a0a:	80 91 85 01 	lds	r24, 0x0185

	if (count) {
 a0e:	88 23       	and	r24, r24
 a10:	99 f0       	breq	.+38     	; 0xa38 <__vector_14+0x42>
		stx_count = --count;    // Count down
 a12:	81 50       	subi	r24, 0x01	; 1
 a14:	80 93 85 01 	sts	0x0185, r24

		dout = 0;
		if (count != 9) {      // No start bit
 a18:	89 30       	cpi	r24, 0x09	; 9
 a1a:	49 f0       	breq	.+18     	; 0xa2e <__vector_14+0x38>
			if (!(stx_data & 1))    // Test inverted data
 a1c:	80 91 82 01 	lds	r24, 0x0182
 a20:	98 2f       	mov	r25, r24
 a22:	90 95       	com	r25
 a24:	91 70       	andi	r25, 0x01	; 1

			dout = 1;
			stx_data >>= 1;      // Shift zero in from left
 a26:	86 95       	lsr	r24
 a28:	80 93 82 01 	sts	0x0182, r24
 a2c:	01 c0       	rjmp	.+2      	; 0xa30 <__vector_14+0x3a>
	count = stx_count;

	if (count) {
		stx_count = --count;    // Count down

		dout = 0;
 a2e:	90 e0       	ldi	r25, 0x00	; 0

			dout = 1;
			stx_data >>= 1;      // Shift zero in from left
		}

		SBIT(PORTD,STX) = dout;
 a30:	90 fd       	sbrc	r25, 0
 a32:	5b 9a       	sbi	0x0b, 3	; 11
 a34:	90 ff       	sbrs	r25, 0
 a36:	5b 98       	cbi	0x0b, 3	; 11
	}
}
 a38:	9f 91       	pop	r25
 a3a:	8f 91       	pop	r24
 a3c:	0f 90       	pop	r0
 a3e:	0f be       	out	0x3f, r0	; 63
 a40:	0f 90       	pop	r0
 a42:	1f 90       	pop	r1
 a44:	18 95       	reti

00000a46 <Write_Byte>:
	Write_Byte(LCD_ADDR, (bits & ~ENABLE));
	_delay_ms(5);
		
}

void Write_Byte(uint8_t addr, uint8_t bits){
 a46:	cf 93       	push	r28
 a48:	df 93       	push	r29
 a4a:	c8 2f       	mov	r28, r24
 a4c:	d6 2f       	mov	r29, r22
			
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 a4e:	84 ea       	ldi	r24, 0xA4	; 164
 a50:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 a54:	0e 94 e6 05 	call	0xbcc	; 0xbcc <TWI_Busy>
 a58:	89 2b       	or	r24, r25
 a5a:	e1 f3       	breq	.-8      	; 0xa54 <Write_Byte+0xe>
	if((TWSR & MASK) != START)Error(START);
 a5c:	80 91 b9 00 	lds	r24, 0x00B9
 a60:	88 7f       	andi	r24, 0xF8	; 248
 a62:	88 30       	cpi	r24, 0x08	; 8
 a64:	21 f0       	breq	.+8      	; 0xa6e <Write_Byte+0x28>
 a66:	88 e0       	ldi	r24, 0x08	; 8
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	0e 94 c3 03 	call	0x786	; 0x786 <Error>
		
	//Loads the slave address and set the R/W bit to 0
	TWDR = (addr<<1) | LCD_WRITE;
 a6e:	cc 0f       	add	r28, r28
 a70:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN); 
 a74:	84 e8       	ldi	r24, 0x84	; 132
 a76:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 a7a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <TWI_Busy>
 a7e:	89 2b       	or	r24, r25
 a80:	e1 f3       	breq	.-8      	; 0xa7a <Write_Byte+0x34>
	if((TWSR & MASK) !=  MT_ADDRESS_ACK)Error((TWSR & MASK));
 a82:	80 91 b9 00 	lds	r24, 0x00B9
 a86:	88 7f       	andi	r24, 0xF8	; 248
 a88:	88 31       	cpi	r24, 0x18	; 24
 a8a:	31 f0       	breq	.+12     	; 0xa98 <Write_Byte+0x52>
 a8c:	80 91 b9 00 	lds	r24, 0x00B9
 a90:	88 7f       	andi	r24, 0xF8	; 248
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	0e 94 c3 03 	call	0x786	; 0x786 <Error>
		
	//Sends the data to the slave
	TWDR = bits; //4bits
 a98:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
 a9c:	84 e8       	ldi	r24, 0x84	; 132
 a9e:	80 93 bc 00 	sts	0x00BC, r24
	
	while(!TWI_Busy());
 aa2:	0e 94 e6 05 	call	0xbcc	; 0xbcc <TWI_Busy>
 aa6:	89 2b       	or	r24, r25
 aa8:	e1 f3       	breq	.-8      	; 0xaa2 <Write_Byte+0x5c>
	if((TWSR & MASK) !=  MT_BYTE_ACK)Error((TWSR & MASK));
 aaa:	80 91 b9 00 	lds	r24, 0x00B9
 aae:	88 7f       	andi	r24, 0xF8	; 248
 ab0:	88 32       	cpi	r24, 0x28	; 40
 ab2:	31 f0       	breq	.+12     	; 0xac0 <Write_Byte+0x7a>
 ab4:	80 91 b9 00 	lds	r24, 0x00B9
 ab8:	88 7f       	andi	r24, 0xF8	; 248
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	0e 94 c3 03 	call	0x786	; 0x786 <Error>
		
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 ac0:	84 e9       	ldi	r24, 0x94	; 148
 ac2:	80 93 bc 00 	sts	0x00BC, r24
	
}
 ac6:	df 91       	pop	r29
 ac8:	cf 91       	pop	r28
 aca:	08 95       	ret

00000acc <LCD_Toggle_enable>:
	Write_Byte(LCD_ADDR, bits_low);
	LCD_Toggle_enable(bits_low);
	
}

void LCD_Toggle_enable(uint8_t bits){
 acc:	cf 93       	push	r28
 ace:	c8 2f       	mov	r28, r24
 ad0:	81 ee       	ldi	r24, 0xE1	; 225
 ad2:	94 e0       	ldi	r25, 0x04	; 4
 ad4:	01 97       	sbiw	r24, 0x01	; 1
 ad6:	f1 f7       	brne	.-4      	; 0xad4 <LCD_Toggle_enable+0x8>
 ad8:	00 c0       	rjmp	.+0      	; 0xada <LCD_Toggle_enable+0xe>
 ada:	00 00       	nop
	
	// Toggles the enable pin on the display to activate the code
	_delay_ms(5);
	Write_Byte(LCD_ADDR, (bits | ENABLE));
 adc:	6c 2f       	mov	r22, r28
 ade:	64 60       	ori	r22, 0x04	; 4
 ae0:	87 e2       	ldi	r24, 0x27	; 39
 ae2:	0e 94 23 05 	call	0xa46	; 0xa46 <Write_Byte>
 ae6:	81 ee       	ldi	r24, 0xE1	; 225
 ae8:	94 e0       	ldi	r25, 0x04	; 4
 aea:	01 97       	sbiw	r24, 0x01	; 1
 aec:	f1 f7       	brne	.-4      	; 0xaea <LCD_Toggle_enable+0x1e>
 aee:	00 c0       	rjmp	.+0      	; 0xaf0 <LCD_Toggle_enable+0x24>
 af0:	00 00       	nop
	_delay_ms(5);
	Write_Byte(LCD_ADDR, (bits & ~ENABLE));
 af2:	6c 2f       	mov	r22, r28
 af4:	6b 7f       	andi	r22, 0xFB	; 251
 af6:	87 e2       	ldi	r24, 0x27	; 39
 af8:	0e 94 23 05 	call	0xa46	; 0xa46 <Write_Byte>
 afc:	81 ee       	ldi	r24, 0xE1	; 225
 afe:	94 e0       	ldi	r25, 0x04	; 4
 b00:	01 97       	sbiw	r24, 0x01	; 1
 b02:	f1 f7       	brne	.-4      	; 0xb00 <LCD_Toggle_enable+0x34>
 b04:	00 c0       	rjmp	.+0      	; 0xb06 <LCD_Toggle_enable+0x3a>
 b06:	00 00       	nop
	_delay_ms(5);
		
}
 b08:	cf 91       	pop	r28
 b0a:	08 95       	ret

00000b0c <LCD_Byte>:
	LCD_Byte(0x01, LCD_CMD); 
	_delay_ms(5); //5 ms delay
	
}

void LCD_Byte(uint8_t bits, uint8_t mode){
 b0c:	cf 93       	push	r28
 b0e:	df 93       	push	r29
 b10:	c6 2f       	mov	r28, r22
 b12:	c8 60       	ori	r28, 0x08	; 8
	
	uint8_t bits_high, bits_low;
	
	//Divides the data in two 4 bit values
	bits_high = mode | (bits & 0xF0) | LCD_BACKLIGHT;
 b14:	d8 2f       	mov	r29, r24
 b16:	d0 7f       	andi	r29, 0xF0	; 240
 b18:	dc 2b       	or	r29, r28
	bits_low = mode | ((bits<<4) & 0xF0) | LCD_BACKLIGHT;
 b1a:	90 e1       	ldi	r25, 0x10	; 16
 b1c:	89 9f       	mul	r24, r25
 b1e:	90 01       	movw	r18, r0
 b20:	11 24       	eor	r1, r1
 b22:	c2 2b       	or	r28, r18
	
	// Send the high bits
	Write_Byte(LCD_ADDR, bits_high);
 b24:	6d 2f       	mov	r22, r29
 b26:	87 e2       	ldi	r24, 0x27	; 39
 b28:	0e 94 23 05 	call	0xa46	; 0xa46 <Write_Byte>
	LCD_Toggle_enable(bits_high);
 b2c:	8d 2f       	mov	r24, r29
 b2e:	0e 94 66 05 	call	0xacc	; 0xacc <LCD_Toggle_enable>
	
	// Send the low bits
	Write_Byte(LCD_ADDR, bits_low);
 b32:	6c 2f       	mov	r22, r28
 b34:	87 e2       	ldi	r24, 0x27	; 39
 b36:	0e 94 23 05 	call	0xa46	; 0xa46 <Write_Byte>
	LCD_Toggle_enable(bits_low);
 b3a:	8c 2f       	mov	r24, r28
 b3c:	0e 94 66 05 	call	0xacc	; 0xacc <LCD_Toggle_enable>
	
}
 b40:	df 91       	pop	r29
 b42:	cf 91       	pop	r28
 b44:	08 95       	ret

00000b46 <LCD_Init>:


void LCD_Init(void){
	
	// Basic initialization
	LCD_Byte(0x33, LCD_CMD); 
 b46:	60 e0       	ldi	r22, 0x00	; 0
 b48:	83 e3       	ldi	r24, 0x33	; 51
 b4a:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	LCD_Byte(0x32, LCD_CMD);
 b4e:	60 e0       	ldi	r22, 0x00	; 0
 b50:	82 e3       	ldi	r24, 0x32	; 50
 b52:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	 
	// Entry mode, move cursor left to right 
	LCD_Byte(0x06, LCD_CMD); 
 b56:	60 e0       	ldi	r22, 0x00	; 0
 b58:	86 e0       	ldi	r24, 0x06	; 6
 b5a:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	
	// Display on, Cursor off, Blink off
	LCD_Byte(0x0C, LCD_CMD); 
 b5e:	60 e0       	ldi	r22, 0x00	; 0
 b60:	8c e0       	ldi	r24, 0x0C	; 12
 b62:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	
	// Set to 4-bit operation, 2 lines and 5x7 dots
	LCD_Byte(0x28, LCD_CMD); 
 b66:	60 e0       	ldi	r22, 0x00	; 0
 b68:	88 e2       	ldi	r24, 0x28	; 40
 b6a:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	
	// Clears display and DDRAM
	LCD_Byte(0x01, LCD_CMD); 
 b6e:	60 e0       	ldi	r22, 0x00	; 0
 b70:	81 e0       	ldi	r24, 0x01	; 1
 b72:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
 b76:	81 ee       	ldi	r24, 0xE1	; 225
 b78:	94 e0       	ldi	r25, 0x04	; 4
 b7a:	01 97       	sbiw	r24, 0x01	; 1
 b7c:	f1 f7       	brne	.-4      	; 0xb7a <LCD_Init+0x34>
 b7e:	00 c0       	rjmp	.+0      	; 0xb80 <LCD_Init+0x3a>
 b80:	00 00       	nop
 b82:	08 95       	ret

00000b84 <LCD_String>:
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
	
}

void LCD_String(uint8_t *text){
 b84:	cf 93       	push	r28
 b86:	df 93       	push	r29
 b88:	ec 01       	movw	r28, r24
	
	while(*text){
 b8a:	88 81       	ld	r24, Y
 b8c:	88 23       	and	r24, r24
 b8e:	39 f0       	breq	.+14     	; 0xb9e <LCD_String+0x1a>
 b90:	21 96       	adiw	r28, 0x01	; 1
		LCD_Byte(*text++, LCD_CHR);
 b92:	61 e0       	ldi	r22, 0x01	; 1
 b94:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_Byte>
	
}

void LCD_String(uint8_t *text){
	
	while(*text){
 b98:	89 91       	ld	r24, Y+
 b9a:	81 11       	cpse	r24, r1
 b9c:	fa cf       	rjmp	.-12     	; 0xb92 <LCD_String+0xe>
		LCD_Byte(*text++, LCD_CHR);
	}
}
 b9e:	df 91       	pop	r29
 ba0:	cf 91       	pop	r28
 ba2:	08 95       	ret

00000ba4 <TWI_Master_Init>:


void TWI_Master_Init (void){
	
	//Sets the power reduction register for TWI to 0.
	PRR &= ~(1<<PRTWI);
 ba4:	e4 e6       	ldi	r30, 0x64	; 100
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	80 81       	ld	r24, Z
 baa:	8f 77       	andi	r24, 0x7F	; 127
 bac:	80 83       	st	Z, r24
	
	//Sets the prescaler to 1 by setting TWPS1 and 0 to 0
	TWSR &= ~(1<<TWPS1) & ~(1<<TWPS0); 
 bae:	e9 eb       	ldi	r30, 0xB9	; 185
 bb0:	f0 e0       	ldi	r31, 0x00	; 0
 bb2:	80 81       	ld	r24, Z
 bb4:	8c 7f       	andi	r24, 0xFC	; 252
 bb6:	80 83       	st	Z, r24
	
	//Sets the speed of TWI to 100khz
	TWBR = 0x20;
 bb8:	80 e2       	ldi	r24, 0x20	; 32
 bba:	80 93 b8 00 	sts	0x00B8, r24
		TWWC - Write Collision Flag
		TWEN - Enable Bit
		TWIE - Interrupt Enable

	************************************************************************/
	TWDR = 0xFF;
 bbe:	8f ef       	ldi	r24, 0xFF	; 255
 bc0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (0<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWWC) | (1<<TWIE) | (1<<TWEN);
 bc4:	85 e0       	ldi	r24, 0x05	; 5
 bc6:	80 93 bc 00 	sts	0x00BC, r24
 bca:	08 95       	ret

00000bcc <TWI_Busy>:

}

int TWI_Busy(void){
	//Returns 0 if the MCU is busy
	return TWCR & (1<<TWINT);
 bcc:	80 91 bc 00 	lds	r24, 0x00BC
 bd0:	80 78       	andi	r24, 0x80	; 128
}
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	08 95       	ret

00000bd6 <__divmodhi4>:
 bd6:	97 fb       	bst	r25, 7
 bd8:	07 2e       	mov	r0, r23
 bda:	16 f4       	brtc	.+4      	; 0xbe0 <__divmodhi4+0xa>
 bdc:	00 94       	com	r0
 bde:	07 d0       	rcall	.+14     	; 0xbee <__divmodhi4_neg1>
 be0:	77 fd       	sbrc	r23, 7
 be2:	09 d0       	rcall	.+18     	; 0xbf6 <__divmodhi4_neg2>
 be4:	0e 94 40 06 	call	0xc80	; 0xc80 <__udivmodhi4>
 be8:	07 fc       	sbrc	r0, 7
 bea:	05 d0       	rcall	.+10     	; 0xbf6 <__divmodhi4_neg2>
 bec:	3e f4       	brtc	.+14     	; 0xbfc <__divmodhi4_exit>

00000bee <__divmodhi4_neg1>:
 bee:	90 95       	com	r25
 bf0:	81 95       	neg	r24
 bf2:	9f 4f       	sbci	r25, 0xFF	; 255
 bf4:	08 95       	ret

00000bf6 <__divmodhi4_neg2>:
 bf6:	70 95       	com	r23
 bf8:	61 95       	neg	r22
 bfa:	7f 4f       	sbci	r23, 0xFF	; 255

00000bfc <__divmodhi4_exit>:
 bfc:	08 95       	ret

00000bfe <__udivmodsi4>:
 bfe:	a1 e2       	ldi	r26, 0x21	; 33
 c00:	1a 2e       	mov	r1, r26
 c02:	aa 1b       	sub	r26, r26
 c04:	bb 1b       	sub	r27, r27
 c06:	fd 01       	movw	r30, r26
 c08:	0d c0       	rjmp	.+26     	; 0xc24 <__udivmodsi4_ep>

00000c0a <__udivmodsi4_loop>:
 c0a:	aa 1f       	adc	r26, r26
 c0c:	bb 1f       	adc	r27, r27
 c0e:	ee 1f       	adc	r30, r30
 c10:	ff 1f       	adc	r31, r31
 c12:	a2 17       	cp	r26, r18
 c14:	b3 07       	cpc	r27, r19
 c16:	e4 07       	cpc	r30, r20
 c18:	f5 07       	cpc	r31, r21
 c1a:	20 f0       	brcs	.+8      	; 0xc24 <__udivmodsi4_ep>
 c1c:	a2 1b       	sub	r26, r18
 c1e:	b3 0b       	sbc	r27, r19
 c20:	e4 0b       	sbc	r30, r20
 c22:	f5 0b       	sbc	r31, r21

00000c24 <__udivmodsi4_ep>:
 c24:	66 1f       	adc	r22, r22
 c26:	77 1f       	adc	r23, r23
 c28:	88 1f       	adc	r24, r24
 c2a:	99 1f       	adc	r25, r25
 c2c:	1a 94       	dec	r1
 c2e:	69 f7       	brne	.-38     	; 0xc0a <__udivmodsi4_loop>
 c30:	60 95       	com	r22
 c32:	70 95       	com	r23
 c34:	80 95       	com	r24
 c36:	90 95       	com	r25
 c38:	9b 01       	movw	r18, r22
 c3a:	ac 01       	movw	r20, r24
 c3c:	bd 01       	movw	r22, r26
 c3e:	cf 01       	movw	r24, r30
 c40:	08 95       	ret

00000c42 <__divmodsi4>:
 c42:	05 2e       	mov	r0, r21
 c44:	97 fb       	bst	r25, 7
 c46:	1e f4       	brtc	.+6      	; 0xc4e <__divmodsi4+0xc>
 c48:	00 94       	com	r0
 c4a:	0e 94 38 06 	call	0xc70	; 0xc70 <__negsi2>
 c4e:	57 fd       	sbrc	r21, 7
 c50:	07 d0       	rcall	.+14     	; 0xc60 <__divmodsi4_neg2>
 c52:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__udivmodsi4>
 c56:	07 fc       	sbrc	r0, 7
 c58:	03 d0       	rcall	.+6      	; 0xc60 <__divmodsi4_neg2>
 c5a:	4e f4       	brtc	.+18     	; 0xc6e <__divmodsi4_exit>
 c5c:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__negsi2>

00000c60 <__divmodsi4_neg2>:
 c60:	50 95       	com	r21
 c62:	40 95       	com	r20
 c64:	30 95       	com	r19
 c66:	21 95       	neg	r18
 c68:	3f 4f       	sbci	r19, 0xFF	; 255
 c6a:	4f 4f       	sbci	r20, 0xFF	; 255
 c6c:	5f 4f       	sbci	r21, 0xFF	; 255

00000c6e <__divmodsi4_exit>:
 c6e:	08 95       	ret

00000c70 <__negsi2>:
 c70:	90 95       	com	r25
 c72:	80 95       	com	r24
 c74:	70 95       	com	r23
 c76:	61 95       	neg	r22
 c78:	7f 4f       	sbci	r23, 0xFF	; 255
 c7a:	8f 4f       	sbci	r24, 0xFF	; 255
 c7c:	9f 4f       	sbci	r25, 0xFF	; 255
 c7e:	08 95       	ret

00000c80 <__udivmodhi4>:
 c80:	aa 1b       	sub	r26, r26
 c82:	bb 1b       	sub	r27, r27
 c84:	51 e1       	ldi	r21, 0x11	; 17
 c86:	07 c0       	rjmp	.+14     	; 0xc96 <__udivmodhi4_ep>

00000c88 <__udivmodhi4_loop>:
 c88:	aa 1f       	adc	r26, r26
 c8a:	bb 1f       	adc	r27, r27
 c8c:	a6 17       	cp	r26, r22
 c8e:	b7 07       	cpc	r27, r23
 c90:	10 f0       	brcs	.+4      	; 0xc96 <__udivmodhi4_ep>
 c92:	a6 1b       	sub	r26, r22
 c94:	b7 0b       	sbc	r27, r23

00000c96 <__udivmodhi4_ep>:
 c96:	88 1f       	adc	r24, r24
 c98:	99 1f       	adc	r25, r25
 c9a:	5a 95       	dec	r21
 c9c:	a9 f7       	brne	.-22     	; 0xc88 <__udivmodhi4_loop>
 c9e:	80 95       	com	r24
 ca0:	90 95       	com	r25
 ca2:	bc 01       	movw	r22, r24
 ca4:	cd 01       	movw	r24, r26
 ca6:	08 95       	ret

00000ca8 <_exit>:
 ca8:	f8 94       	cli

00000caa <__stop_program>:
 caa:	ff cf       	rjmp	.-2      	; 0xcaa <__stop_program>
