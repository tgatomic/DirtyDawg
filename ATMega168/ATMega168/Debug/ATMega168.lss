
ATMega168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000a3e  00000ad2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080012e  0080012e  00000b00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000198c  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d1  00000000  00000000  000026b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008e0  00000000  00000000  00002e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  00003768  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e2  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b5c  00000000  00000000  0000407a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00004bd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__vector_14>
  3c:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b8 02 	jmp	0x570	; 0x570 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 35       	cpi	r26, 0x50	; 80
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
  9e:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <System_Init>:

uint8_t LCD_initiated = FALSE;

void System_Init(void){
	
	status = 0;
  a6:	10 92 49 01 	sts	0x0149, r1
  aa:	10 92 48 01 	sts	0x0148, r1
	
	// Enable global interrupt
	sei();
  ae:	78 94       	sei
	// Enable interrupt on PCINT20 (pin 6 on AtMega 168P)
	EICRA = (1<<ISC11);
  b0:	88 e0       	ldi	r24, 0x08	; 8
  b2:	80 93 69 00 	sts	0x0069, r24
	EIMSK = (1<<INT1);
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	8d bb       	out	0x1d, r24	; 29
	PCICR = (1<<PCIE2);
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	80 93 68 00 	sts	0x0068, r24
	PCMSK2 = (1<<PCINT20);
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	80 93 6d 00 	sts	0x006D, r24
	
	/*Setting ports - page 75*/
		
	DDRB = (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB3) | (1<<PORTB0); //PB0 is debug greenlight
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	84 b9       	out	0x04, r24	; 4
	DDRD = (1<<PORTD3) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7); //PD7 is debug yellow
  ca:	88 ee       	ldi	r24, 0xE8	; 232
  cc:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	89 e6       	ldi	r24, 0x69	; 105
  d2:	98 e1       	ldi	r25, 0x18	; 24
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <System_Init+0x2e>
  dc:	00 c0       	rjmp	.+0      	; 0xde <System_Init+0x38>
  de:	00 00       	nop
	
	//Turn on the front and backlights
	_delay_ms(8000);
	PORTB = (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB0);
  e0:	87 e0       	ldi	r24, 0x07	; 7
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	89 e6       	ldi	r24, 0x69	; 105
  e8:	98 e1       	ldi	r25, 0x18	; 24
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <System_Init+0x44>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <System_Init+0x4e>
  f4:	00 00       	nop
	_delay_ms(8000);
	PORTB = (0<<PORTB1) | (0<<PORTB2) | (0<<PORTB0);
  f6:	15 b8       	out	0x05, r1	; 5
	

	//Signs the status
	status = MCU_STARTED;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 49 01 	sts	0x0149, r25
 100:	80 93 48 01 	sts	0x0148, r24
 104:	08 95       	ret

00000106 <UART_Init>:
}

void UART_Init(unsigned int baud){
	
	//Set double speed
	UCSR0A = (1<<U2X0);
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	20 93 c0 00 	sts	0x00C0, r18
	
	//Set baudrate
	unsigned int baudrate;
	baudrate = 8000000/8/baud-1;
 10c:	9c 01       	movw	r18, r24
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	60 e4       	ldi	r22, 0x40	; 64
 114:	72 e4       	ldi	r23, 0x42	; 66
 116:	8f e0       	ldi	r24, 0x0F	; 15
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 aa 04 	call	0x954	; 0x954 <__divmodsi4>
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	31 09       	sbc	r19, r1
	//Double speed use frequency/8/baud
	
	//Set the baudrate in the registry
	UBRR0H = (unsigned char) (baudrate>>8);
 122:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) (baudrate);
 126:	20 93 c4 00 	sts	0x00C4, r18

	
	//Enables Receive and Transmit over UART
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); //RXCIE and TXCIE for interrupt based UART.
 12a:	88 e1       	ldi	r24, 0x18	; 24
 12c:	80 93 c1 00 	sts	0x00C1, r24
	
	//Sets to 1 stop bit and 8 databits
	UCSR0C = (0<<USBS0) | (3<<UCSZ00);
 130:	e2 ec       	ldi	r30, 0xC2	; 194
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	80 83       	st	Z, r24
	
	//Disables Parity
	UCSR0C |= (0<<UPM01) | (0<<UPM00);
 138:	80 81       	ld	r24, Z
 13a:	80 83       	st	Z, r24
	
	
	status |= UART_STARTED;
 13c:	80 91 48 01 	lds	r24, 0x0148
 140:	90 91 49 01 	lds	r25, 0x0149
 144:	82 60       	ori	r24, 0x02	; 2
 146:	90 93 49 01 	sts	0x0149, r25
 14a:	80 93 48 01 	sts	0x0148, r24
 14e:	08 95       	ret

00000150 <BT_Recieve>:
}

uint8_t BT_Recieve(void){
	
	//Wait for data to be received (wait for flag to be set)
	while(!(UCSR0A & (1<<RXC0)));
 150:	e0 ec       	ldi	r30, 0xC0	; 192
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	88 23       	and	r24, r24
 158:	ec f7       	brge	.-6      	; 0x154 <BT_Recieve+0x4>
	
	//Returns the data from buffer
	return UDR0;
 15a:	80 91 c6 00 	lds	r24, 0x00C6
}
 15e:	08 95       	ret

00000160 <BT_Send>:
void BT_Send(unsigned char data){
	
	//PORTB = ~(1<<PORTB1);
	//_delay_ms(1000);
	//Waits for the transmit buffer to be empty (wait for flag)
	while(!(UCSR0A & (1<<UDRE0)));
 160:	e0 ec       	ldi	r30, 0xC0	; 192
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	90 81       	ld	r25, Z
 166:	95 ff       	sbrs	r25, 5
 168:	fd cf       	rjmp	.-6      	; 0x164 <BT_Send+0x4>
	
	//Put data in buffer and sends it
	UDR0 = data;
 16a:	80 93 c6 00 	sts	0x00C6, r24
 16e:	08 95       	ret

00000170 <Uart_Flush>:
	//_delay_ms(1000);
}

void Uart_Flush(void){
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0)) dummy = UDR0;	
 170:	80 91 c0 00 	lds	r24, 0x00C0
 174:	88 23       	and	r24, r24
 176:	44 f4       	brge	.+16     	; 0x188 <Uart_Flush+0x18>
 178:	a6 ec       	ldi	r26, 0xC6	; 198
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	e0 ec       	ldi	r30, 0xC0	; 192
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	8c 91       	ld	r24, X
 182:	80 81       	ld	r24, Z
 184:	88 23       	and	r24, r24
 186:	e4 f3       	brlt	.-8      	; 0x180 <Uart_Flush+0x10>
 188:	08 95       	ret

0000018a <BT_Init>:
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	89 e6       	ldi	r24, 0x69	; 105
 18e:	98 e1       	ldi	r25, 0x18	; 24
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <BT_Init+0x6>
 198:	00 c0       	rjmp	.+0      	; 0x19a <BT_Init+0x10>
 19a:	00 00       	nop
	
	
	//Wait for 1 second to ensure the device has power
	_delay_ms(8000);

	for(int i = 0; i<3; i++) BT_Send('-');
 19c:	8d e2       	ldi	r24, 0x2D	; 45
 19e:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 1a2:	8d e2       	ldi	r24, 0x2D	; 45
 1a4:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 1a8:	8d e2       	ldi	r24, 0x2D	; 45
 1aa:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	BT_Send(0x0A); //NL
 1ae:	8a e0       	ldi	r24, 0x0A	; 10
 1b0:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	BT_Send(0x0D); //CR
 1b4:	8d e0       	ldi	r24, 0x0D	; 13
 1b6:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 1ba:	2f e3       	ldi	r18, 0x3F	; 63
 1bc:	8d e0       	ldi	r24, 0x0D	; 13
 1be:	93 e0       	ldi	r25, 0x03	; 3
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <BT_Init+0x36>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <BT_Init+0x40>
 1ca:	00 00       	nop
	_delay_ms(1000);
	LCD_Byte(LCD_CLEAR, LCD_CMD);
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
 1d4:	8b e7       	ldi	r24, 0x7B	; 123
 1d6:	92 e9       	ldi	r25, 0x92	; 146
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <BT_Init+0x4e>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <BT_Init+0x54>
 1de:	00 00       	nop
	_delay_ms(150); //5 ms delay
	Uart_Flush();
 1e0:	0e 94 b8 00 	call	0x170	; 0x170 <Uart_Flush>
	
	return 0;
}
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	08 95       	ret

000001ea <BT_Connect>:

void BT_Connect(void){
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
 1fa:	2c 97       	sbiw	r28, 0x0c	; 12
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	cd bf       	out	0x3d, r28	; 61
 206:	2f ef       	ldi	r18, 0xFF	; 255
 208:	89 e6       	ldi	r24, 0x69	; 105
 20a:	98 e1       	ldi	r25, 0x18	; 24
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <BT_Connect+0x22>
 214:	00 c0       	rjmp	.+0      	; 0x216 <BT_Connect+0x2c>
 216:	00 00       	nop

	//Wait for 1 second to ensure the device has power
	_delay_ms(8000);

	for(int i = 0; i < 3; i++) BT_Send('-');
 218:	8d e2       	ldi	r24, 0x2D	; 45
 21a:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 21e:	8d e2       	ldi	r24, 0x2D	; 45
 220:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 224:	8d e2       	ldi	r24, 0x2D	; 45
 226:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	BT_Send(LF); //Line feed
 22a:	8a e0       	ldi	r24, 0x0A	; 10
 22c:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	BT_Send(CR); //Carriage return
 230:	8d e0       	ldi	r24, 0x0D	; 13
 232:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 236:	ef e3       	ldi	r30, 0x3F	; 63
 238:	fd e0       	ldi	r31, 0x0D	; 13
 23a:	23 e0       	ldi	r18, 0x03	; 3
 23c:	e1 50       	subi	r30, 0x01	; 1
 23e:	f0 40       	sbci	r31, 0x00	; 0
 240:	20 40       	sbci	r18, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <BT_Connect+0x52>
 244:	00 c0       	rjmp	.+0      	; 0x246 <BT_Connect+0x5c>
 246:	00 00       	nop
	_delay_ms(1000);
	LCD_Byte(LCD_CLEAR, LCD_CMD);
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
 250:	8b e7       	ldi	r24, 0x7B	; 123
 252:	92 e9       	ldi	r25, 0x92	; 146
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <BT_Connect+0x6a>
 258:	00 c0       	rjmp	.+0      	; 0x25a <BT_Connect+0x70>
 25a:	00 00       	nop
	_delay_ms(150); //5 ms delay
	Uart_Flush();
 25c:	0e 94 b8 00 	call	0x170	; 0x170 <Uart_Flush>

	//Sends command to enter command mode
	for(int i = 0; i < 3; i++) BT_Send('$');
 260:	84 e2       	ldi	r24, 0x24	; 36
 262:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 266:	84 e2       	ldi	r24, 0x24	; 36
 268:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 26c:	84 e2       	ldi	r24, 0x24	; 36
 26e:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>

	//Sends response to LCD screen
	LCD_Byte(BT_Recieve(), LCD_CHR);
 272:	0e 94 a8 00 	call	0x150	; 0x150 <BT_Recieve>
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
	LCD_Byte(BT_Recieve(), LCD_CHR);
 27c:	0e 94 a8 00 	call	0x150	; 0x150 <BT_Recieve>
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
	LCD_Byte(BT_Recieve(), LCD_CHR);
 286:	0e 94 a8 00 	call	0x150	; 0x150 <BT_Recieve>
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>

	Uart_Flush();
 290:	0e 94 b8 00 	call	0x170	; 0x170 <Uart_Flush>
		
	// Adress to bluesmirf in the car
	unsigned char adress[12] = {'0','0','0','6','6','6','7','6','A','0','A','A'};
 294:	8c e0       	ldi	r24, 0x0C	; 12
 296:	e0 e0       	ldi	r30, 0x00	; 0
 298:	f1 e0       	ldi	r31, 0x01	; 1
 29a:	de 01       	movw	r26, r28
 29c:	11 96       	adiw	r26, 0x01	; 1
 29e:	01 90       	ld	r0, Z+
 2a0:	0d 92       	st	X+, r0
 2a2:	8a 95       	dec	r24
 2a4:	e1 f7       	brne	.-8      	; 0x29e <BT_Connect+0xb4>
		
	// Command to connect with bluesmirf in the car
	BT_Send('c');
 2a6:	83 e6       	ldi	r24, 0x63	; 99
 2a8:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	BT_Send(',');
 2ac:	8c e2       	ldi	r24, 0x2C	; 44
 2ae:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 2b2:	8e 01       	movw	r16, r28
 2b4:	0f 5f       	subi	r16, 0xFF	; 255
 2b6:	1f 4f       	sbci	r17, 0xFF	; 255
 2b8:	7e 01       	movw	r14, r28
 2ba:	9d e0       	ldi	r25, 0x0D	; 13
 2bc:	e9 0e       	add	r14, r25
 2be:	f1 1c       	adc	r15, r1
	for(int i = 0; i < 12;i++){
		BT_Send(adress[i]);
 2c0:	f8 01       	movw	r30, r16
 2c2:	81 91       	ld	r24, Z+
 2c4:	8f 01       	movw	r16, r30
 2c6:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	unsigned char adress[12] = {'0','0','0','6','6','6','7','6','A','0','A','A'};
		
	// Command to connect with bluesmirf in the car
	BT_Send('c');
	BT_Send(',');
	for(int i = 0; i < 12;i++){
 2ca:	0e 15       	cp	r16, r14
 2cc:	1f 05       	cpc	r17, r15
 2ce:	c1 f7       	brne	.-16     	; 0x2c0 <BT_Connect+0xd6>
		BT_Send(adress[i]);
	}
	BT_Send(LF);
 2d0:	8a e0       	ldi	r24, 0x0A	; 10
 2d2:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	BT_Send(CR);
 2d6:	8d e0       	ldi	r24, 0x0D	; 13
 2d8:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>

	while(BT_Recieve() != LF);
 2dc:	0e 94 a8 00 	call	0x150	; 0x150 <BT_Recieve>
 2e0:	8a 30       	cpi	r24, 0x0A	; 10
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <BT_Connect+0xf2>
 2e4:	ff e3       	ldi	r31, 0x3F	; 63
 2e6:	2d e0       	ldi	r18, 0x0D	; 13
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	f1 50       	subi	r31, 0x01	; 1
 2ec:	20 40       	sbci	r18, 0x00	; 0
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <BT_Connect+0x100>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <BT_Connect+0x10a>
 2f4:	00 00       	nop

	// Wait a second
	_delay_ms(1000);
	
}
 2f6:	2c 96       	adiw	r28, 0x0c	; 12
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	08 95       	ret

00000310 <Error>:
void Sense_Light(void){
	
	
}

void Error(unsigned int errorcode){
 310:	d8 2f       	mov	r29, r24
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
 312:	c1 2c       	mov	r12, r1
 314:	d1 2c       	mov	r13, r1
 316:	76 01       	movw	r14, r12
	for(;;){
		if(ticks%10000 == 0){
 318:	0f 2e       	mov	r0, r31
 31a:	f0 e1       	ldi	r31, 0x10	; 16
 31c:	8f 2e       	mov	r8, r31
 31e:	f7 e2       	ldi	r31, 0x27	; 39
 320:	9f 2e       	mov	r9, r31
 322:	a1 2c       	mov	r10, r1
 324:	b1 2c       	mov	r11, r1
 326:	f0 2d       	mov	r31, r0
			PINB = (1<<PORTB1);
 328:	c2 e0       	ldi	r28, 0x02	; 2
void Error(unsigned int errorcode){
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
	for(;;){
		if(ticks%10000 == 0){
 32a:	c7 01       	movw	r24, r14
 32c:	b6 01       	movw	r22, r12
 32e:	a5 01       	movw	r20, r10
 330:	94 01       	movw	r18, r8
 332:	0e 94 88 04 	call	0x910	; 0x910 <__udivmodsi4>
 336:	67 2b       	or	r22, r23
 338:	68 2b       	or	r22, r24
 33a:	69 2b       	or	r22, r25
 33c:	21 f4       	brne	.+8      	; 0x346 <Error+0x36>
			PINB = (1<<PORTB1);
 33e:	c3 b9       	out	0x03, r28	; 3
			BT_Send(errorcode);
 340:	8d 2f       	mov	r24, r29
 342:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
		}
		if(ticks%10000 == 50000){
			PINB = (0<<PORTB1);
		}
		ticks++;
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	c8 1a       	sub	r12, r24
 34a:	d8 0a       	sbc	r13, r24
 34c:	e8 0a       	sbc	r14, r24
 34e:	f8 0a       	sbc	r15, r24
	}
 350:	ec cf       	rjmp	.-40     	; 0x32a <Error+0x1a>

00000352 <LCD_Update>:
}

void LCD_Update(void){
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
	
	// Initiate the distance screen
	if(!LCD_initiated){
 35a:	80 91 2e 01 	lds	r24, 0x012E
 35e:	81 11       	cpse	r24, r1
 360:	0d c0       	rjmp	.+26     	; 0x37c <LCD_Update+0x2a>
		LCD_String(ROW1, ARR_SIZE(ROW1), ROW2, ARR_SIZE(ROW2));
 362:	21 e1       	ldi	r18, 0x11	; 17
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	4c e0       	ldi	r20, 0x0C	; 12
 368:	51 e0       	ldi	r21, 0x01	; 1
 36a:	61 e1       	ldi	r22, 0x11	; 17
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	8d e1       	ldi	r24, 0x1D	; 29
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 20 04 	call	0x840	; 0x840 <LCD_String>
		LCD_initiated = TRUE;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	80 93 2e 01 	sts	0x012E, r24
	}
	
	itoa(DirtyDawg.front_sensor, front, 10);
 37c:	cb e3       	ldi	r28, 0x3B	; 59
 37e:	d1 e0       	ldi	r29, 0x01	; 1
 380:	4a e0       	ldi	r20, 0x0A	; 10
 382:	50 e0       	ldi	r21, 0x00	; 0
 384:	68 e3       	ldi	r22, 0x38	; 56
 386:	71 e0       	ldi	r23, 0x01	; 1
 388:	8c 81       	ldd	r24, Y+4	; 0x04
 38a:	9d 81       	ldd	r25, Y+5	; 0x05
 38c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <itoa>
	itoa(DirtyDawg.back_sensor, back, 10);
 390:	4a e0       	ldi	r20, 0x0A	; 10
 392:	50 e0       	ldi	r21, 0x00	; 0
 394:	6f e2       	ldi	r22, 0x2F	; 47
 396:	71 e0       	ldi	r23, 0x01	; 1
 398:	8e 81       	ldd	r24, Y+6	; 0x06
 39a:	9f 81       	ldd	r25, Y+7	; 0x07
 39c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <itoa>
//	itoa(DirtyDawg.left_sensor, left, 10);
	left[0] = DirtyDawg.left_sensor / 100;
 3a0:	28 81       	ld	r18, Y
 3a2:	39 81       	ldd	r19, Y+1	; 0x01
 3a4:	c9 01       	movw	r24, r18
 3a6:	64 e6       	ldi	r22, 0x64	; 100
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 3ae:	46 2f       	mov	r20, r22
 3b0:	e5 e3       	ldi	r30, 0x35	; 53
 3b2:	f1 e0       	ldi	r31, 0x01	; 1
	left[1] = (DirtyDawg.left_sensor - (left[0] * 100 )) / 10;
 3b4:	c9 01       	movw	r24, r18
 3b6:	54 e6       	ldi	r21, 0x64	; 100
 3b8:	65 9f       	mul	r22, r21
 3ba:	80 19       	sub	r24, r0
 3bc:	91 09       	sbc	r25, r1
 3be:	11 24       	eor	r1, r1
 3c0:	6a e0       	ldi	r22, 0x0A	; 10
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 3c8:	84 e6       	ldi	r24, 0x64	; 100
 3ca:	48 9f       	mul	r20, r24
 3cc:	20 19       	sub	r18, r0
 3ce:	11 24       	eor	r1, r1
	left[2] = (DirtyDawg.left_sensor - (left[0] * 100 )) - left[1] * 10;
 3d0:	96 2f       	mov	r25, r22
 3d2:	99 0f       	add	r25, r25
 3d4:	89 2f       	mov	r24, r25
 3d6:	88 0f       	add	r24, r24
 3d8:	88 0f       	add	r24, r24
 3da:	89 0f       	add	r24, r25
 3dc:	28 1b       	sub	r18, r24

	for(int i = 0; i < 3; i++)
		left[i] += '0';
 3de:	40 5d       	subi	r20, 0xD0	; 208
 3e0:	40 83       	st	Z, r20
 3e2:	60 5d       	subi	r22, 0xD0	; 208
 3e4:	61 83       	std	Z+1, r22	; 0x01
 3e6:	20 5d       	subi	r18, 0xD0	; 208
 3e8:	22 83       	std	Z+2, r18	; 0x02
		
	itoa(DirtyDawg.right_sensor, right, 10);
 3ea:	4a e0       	ldi	r20, 0x0A	; 10
 3ec:	50 e0       	ldi	r21, 0x00	; 0
 3ee:	62 e3       	ldi	r22, 0x32	; 50
 3f0:	71 e0       	ldi	r23, 0x01	; 1
 3f2:	8a 81       	ldd	r24, Y+2	; 0x02
 3f4:	9b 81       	ldd	r25, Y+3	; 0x03
 3f6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <itoa>
	// Prints the distance to front obstacle
	LCD_Byte(LCD_LINE_1 + 3, LCD_CMD);
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	83 e8       	ldi	r24, 0x83	; 131
 3fe:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
 402:	c8 e3       	ldi	r28, 0x38	; 56
 404:	d1 e0       	ldi	r29, 0x01	; 1
 406:	0b e3       	ldi	r16, 0x3B	; 59
 408:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
	LCD_Byte(front[i], LCD_CHR);
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	89 91       	ld	r24, Y+
 40e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
		left[i] += '0';
		
	itoa(DirtyDawg.right_sensor, right, 10);
	// Prints the distance to front obstacle
	LCD_Byte(LCD_LINE_1 + 3, LCD_CMD);
	for(int i = 0; i < 3; i++)
 412:	c0 17       	cp	r28, r16
 414:	d1 07       	cpc	r29, r17
 416:	c9 f7       	brne	.-14     	; 0x40a <LCD_Update+0xb8>
	LCD_Byte(front[i], LCD_CHR);
	
	// Prints the distance to back obstacle
	LCD_Byte(LCD_LINE_1 + 11, LCD_CMD);
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	8b e8       	ldi	r24, 0x8B	; 139
 41c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
 420:	cf e2       	ldi	r28, 0x2F	; 47
 422:	d1 e0       	ldi	r29, 0x01	; 1
 424:	02 e3       	ldi	r16, 0x32	; 50
 426:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
	LCD_Byte(back[i], LCD_CHR);
 428:	61 e0       	ldi	r22, 0x01	; 1
 42a:	89 91       	ld	r24, Y+
 42c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
	for(int i = 0; i < 3; i++)
	LCD_Byte(front[i], LCD_CHR);
	
	// Prints the distance to back obstacle
	LCD_Byte(LCD_LINE_1 + 11, LCD_CMD);
	for(int i = 0; i < 3; i++)
 430:	c0 17       	cp	r28, r16
 432:	d1 07       	cpc	r29, r17
 434:	c9 f7       	brne	.-14     	; 0x428 <LCD_Update+0xd6>
	LCD_Byte(back[i], LCD_CHR);

	// Prints the distance to left obstacle
	LCD_Byte(LCD_LINE_2 + 3, LCD_CMD);
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	83 ec       	ldi	r24, 0xC3	; 195
 43a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
 43e:	c5 e3       	ldi	r28, 0x35	; 53
 440:	d1 e0       	ldi	r29, 0x01	; 1
 442:	08 e3       	ldi	r16, 0x38	; 56
 444:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
	LCD_Byte(left[i], LCD_CHR);
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	89 91       	ld	r24, Y+
 44a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
	for(int i = 0; i < 3; i++)
	LCD_Byte(back[i], LCD_CHR);

	// Prints the distance to left obstacle
	LCD_Byte(LCD_LINE_2 + 3, LCD_CMD);
	for(int i = 0; i < 3; i++)
 44e:	c0 17       	cp	r28, r16
 450:	d1 07       	cpc	r29, r17
 452:	c9 f7       	brne	.-14     	; 0x446 <LCD_Update+0xf4>
	LCD_Byte(left[i], LCD_CHR);

	// Prints the distance to right obstacle
	LCD_Byte(LCD_LINE_2 + 11, LCD_CMD);
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	8b ec       	ldi	r24, 0xCB	; 203
 458:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
 45c:	c2 e3       	ldi	r28, 0x32	; 50
 45e:	d1 e0       	ldi	r29, 0x01	; 1
 460:	05 e3       	ldi	r16, 0x35	; 53
 462:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
	LCD_Byte(right[i], LCD_CHR);
 464:	61 e0       	ldi	r22, 0x01	; 1
 466:	89 91       	ld	r24, Y+
 468:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
	for(int i = 0; i < 3; i++)
	LCD_Byte(left[i], LCD_CHR);

	// Prints the distance to right obstacle
	LCD_Byte(LCD_LINE_2 + 11, LCD_CMD);
	for(int i = 0; i < 3; i++)
 46c:	c0 17       	cp	r28, r16
 46e:	d1 07       	cpc	r29, r17
 470:	c9 f7       	brne	.-14     	; 0x464 <LCD_Update+0x112>
 472:	83 e2       	ldi	r24, 0x23	; 35
 474:	94 ef       	ldi	r25, 0xF4	; 244
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <LCD_Update+0x124>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <LCD_Update+0x12a>
 47c:	00 00       	nop
	LCD_Byte(right[i], LCD_CHR);
	_delay_ms(250);

	//Change state
	DirtyDawg.state = GET_DATA_STATE;
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	80 93 47 01 	sts	0x0147, r24
}
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	1f 91       	pop	r17
 48a:	0f 91       	pop	r16
 48c:	08 95       	ret

0000048e <BT_Send_Data>:
void BT_Send_Data(void){
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
	
	BT_Send(DirtyDawg.accelerometer);
 492:	cb e3       	ldi	r28, 0x3B	; 59
 494:	d1 e0       	ldi	r29, 0x01	; 1
 496:	88 85       	ldd	r24, Y+8	; 0x08
 498:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	BT_Send(DirtyDawg.ECG);
 49c:	89 85       	ldd	r24, Y+9	; 0x09
 49e:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	
	//Change state
}
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <BT_Recieve_Data>:

void BT_Recieve_Data(void){
	// Get IR sensor data from the car
	BT_Send('X');
 4a8:	88 e5       	ldi	r24, 0x58	; 88
 4aa:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	BT_Send('J');
 4ae:	8a e4       	ldi	r24, 0x4A	; 74
 4b0:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
		DirtyDawg.back_sensor = BT_Recieve();
		DirtyDawg.left_sensor = BT_Recieve();
		DirtyDawg.right_sensor = BT_Recieve();
	}*/
//	Yellow_LED_Off();
	BT_Send('O');
 4b4:	8f e4       	ldi	r24, 0x4F	; 79
 4b6:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	BT_Send('B');
 4ba:	82 e4       	ldi	r24, 0x42	; 66
 4bc:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	BT_Send('E');
 4c0:	85 e4       	ldi	r24, 0x45	; 69
 4c2:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	BT_Send('Y');
 4c6:	89 e5       	ldi	r24, 0x59	; 89
 4c8:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	// Change state 
	DirtyDawg.state = LCD_STATE;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	80 93 47 01 	sts	0x0147, r24
 4d2:	08 95       	ret

000004d4 <Yellow_LED_On>:
}

// Lights for debugging reason
void Yellow_LED_On(void){
	PORTD |= (1<<PORTD7);
 4d4:	5f 9a       	sbi	0x0b, 7	; 11
 4d6:	08 95       	ret

000004d8 <main>:
#define ARR_SIZE(x)  (sizeof(x) / sizeof(x[0]))

int main(void){

	// Sets the starting state
	DirtyDawg.state = LCD_STATE;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	80 93 47 01 	sts	0x0147, r24

	// Initiate the hardware
	System_Init();
 4de:	0e 94 53 00 	call	0xa6	; 0xa6 <System_Init>
	
	// Initiate the TWI bus as a master
	TWI_Master_Init();
 4e2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <TWI_Master_Init>

	// Initiate the LCD Screen
	LCD_Init();
 4e6:	0e 94 01 04 	call	0x802	; 0x802 <LCD_Init>
	
	// Initiate the hardware defined UART
	UART_Init(19200);
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	9b e4       	ldi	r25, 0x4B	; 75
 4ee:	0e 94 83 00 	call	0x106	; 0x106 <UART_Init>
	
	// Initiate the software define UART
	suart_init();
 4f2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <suart_init>
	
	// Initiate/Clear the BlueSmirf from previous commands
	BT_Init();
 4f6:	0e 94 c5 00 	call	0x18a	; 0x18a <BT_Init>
	
	// Connect the Bluesmirf to the car
	BT_Connect();
 4fa:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BT_Connect>
 4fe:	e8 e3       	ldi	r30, 0x38	; 56
 500:	f1 e0       	ldi	r31, 0x01	; 1
 502:	2f e2       	ldi	r18, 0x2F	; 47
 504:	31 e0       	ldi	r19, 0x01	; 1
 506:	c5 e3       	ldi	r28, 0x35	; 53
 508:	d1 e0       	ldi	r29, 0x01	; 1
 50a:	62 e3       	ldi	r22, 0x32	; 50
 50c:	71 e0       	ldi	r23, 0x01	; 1
 50e:	4b e3       	ldi	r20, 0x3B	; 59
 510:	51 e0       	ldi	r21, 0x01	; 1
		}
	}
*/

	for(int i = 0; i < 3; i++){
		front[i] = '0';
 512:	80 e3       	ldi	r24, 0x30	; 48
 514:	81 93       	st	Z+, r24
		back[i] = '0';
 516:	d9 01       	movw	r26, r18
 518:	8d 93       	st	X+, r24
 51a:	9d 01       	movw	r18, r26
		left[i] = '0';
 51c:	89 93       	st	Y+, r24
		right[i] = '0';
 51e:	db 01       	movw	r26, r22
 520:	8d 93       	st	X+, r24
 522:	bd 01       	movw	r22, r26
			count = 0;
		}
	}
*/

	for(int i = 0; i < 3; i++){
 524:	e4 17       	cp	r30, r20
 526:	f5 07       	cpc	r31, r21
 528:	a9 f7       	brne	.-22     	; 0x514 <__stack+0x15>
		right[i] = '0';

	}
	while(TRUE){

		switch(DirtyDawg.state){
 52a:	cb e3       	ldi	r28, 0x3B	; 59
 52c:	d1 e0       	ldi	r29, 0x01	; 1
 52e:	8c 85       	ldd	r24, Y+12	; 0x0c
 530:	82 30       	cpi	r24, 0x02	; 2
 532:	39 f0       	breq	.+14     	; 0x542 <__stack+0x43>
 534:	83 30       	cpi	r24, 0x03	; 3
 536:	41 f0       	breq	.+16     	; 0x548 <__stack+0x49>
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	49 f4       	brne	.+18     	; 0x54e <__stack+0x4f>
			
			case LCD_STATE:
				LCD_Update();
 53c:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_Update>
				break;
 540:	f6 cf       	rjmp	.-20     	; 0x52e <__stack+0x2f>
			
			case SEND_DATA_STATE:
				BT_Send_Data();
 542:	0e 94 47 02 	call	0x48e	; 0x48e <BT_Send_Data>
				break;
 546:	f3 cf       	rjmp	.-26     	; 0x52e <__stack+0x2f>

			case GET_DATA_STATE:
				BT_Recieve_Data();
 548:	0e 94 54 02 	call	0x4a8	; 0x4a8 <BT_Recieve_Data>
				break;
 54c:	f0 cf       	rjmp	.-32     	; 0x52e <__stack+0x2f>
				
			default:
				Yellow_LED_On();
 54e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <Yellow_LED_On>
				Error(0x53);
 552:	83 e5       	ldi	r24, 0x53	; 83
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 88 01 	call	0x310	; 0x310 <Error>
 55a:	e9 cf       	rjmp	.-46     	; 0x52e <__stack+0x2f>

0000055c <__vector_5>:
			
		}
	}	
}

ISR(PCINT2_vect){
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	11 24       	eor	r1, r1

}
 566:	0f 90       	pop	r0
 568:	0f be       	out	0x3f, r0	; 63
 56a:	0f 90       	pop	r0
 56c:	1f 90       	pop	r1
 56e:	18 95       	reti

00000570 <__vector_18>:
	BT_Connect();
}

*/

ISR(USART_RX_vect){
 570:	1f 92       	push	r1
 572:	0f 92       	push	r0
 574:	0f b6       	in	r0, 0x3f	; 63
 576:	0f 92       	push	r0
 578:	11 24       	eor	r1, r1
 57a:	2f 93       	push	r18
 57c:	3f 93       	push	r19
 57e:	4f 93       	push	r20
 580:	5f 93       	push	r21
 582:	6f 93       	push	r22
 584:	7f 93       	push	r23
 586:	8f 93       	push	r24
 588:	9f 93       	push	r25
 58a:	af 93       	push	r26
 58c:	bf 93       	push	r27
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	ef 93       	push	r30
 594:	ff 93       	push	r31
	uint8_t data;
	data = BT_Recieve();
 596:	0e 94 a8 00 	call	0x150	; 0x150 <BT_Recieve>
	
	// Ignore command response
	if(data == '%')
 59a:	85 32       	cpi	r24, 0x25	; 37
 59c:	29 f4       	brne	.+10     	; 0x5a8 <__vector_18+0x38>
		while(BT_Recieve() != LF);
 59e:	0e 94 a8 00 	call	0x150	; 0x150 <BT_Recieve>
 5a2:	8a 30       	cpi	r24, 0x0A	; 10
 5a4:	e1 f7       	brne	.-8      	; 0x59e <__vector_18+0x2e>
 5a6:	18 c0       	rjmp	.+48     	; 0x5d8 <__vector_18+0x68>
	
	// Get sensor data
	if(data == 'S'){
 5a8:	83 35       	cpi	r24, 0x53	; 83
 5aa:	b1 f4       	brne	.+44     	; 0x5d8 <__vector_18+0x68>
		DirtyDawg.front_sensor = BT_Recieve();
 5ac:	0e 94 a8 00 	call	0x150	; 0x150 <BT_Recieve>
 5b0:	cb e3       	ldi	r28, 0x3B	; 59
 5b2:	d1 e0       	ldi	r29, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	9d 83       	std	Y+5, r25	; 0x05
 5b8:	8c 83       	std	Y+4, r24	; 0x04
		DirtyDawg.back_sensor = BT_Recieve();
 5ba:	0e 94 a8 00 	call	0x150	; 0x150 <BT_Recieve>
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	9f 83       	std	Y+7, r25	; 0x07
 5c2:	8e 83       	std	Y+6, r24	; 0x06
		DirtyDawg.left_sensor = BT_Recieve();
 5c4:	0e 94 a8 00 	call	0x150	; 0x150 <BT_Recieve>
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	99 83       	std	Y+1, r25	; 0x01
 5cc:	88 83       	st	Y, r24
		DirtyDawg.right_sensor = BT_Recieve();
 5ce:	0e 94 a8 00 	call	0x150	; 0x150 <BT_Recieve>
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	9b 83       	std	Y+3, r25	; 0x03
 5d6:	8a 83       	std	Y+2, r24	; 0x02
	}
 5d8:	ff 91       	pop	r31
 5da:	ef 91       	pop	r30
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	bf 91       	pop	r27
 5e2:	af 91       	pop	r26
 5e4:	9f 91       	pop	r25
 5e6:	8f 91       	pop	r24
 5e8:	7f 91       	pop	r23
 5ea:	6f 91       	pop	r22
 5ec:	5f 91       	pop	r21
 5ee:	4f 91       	pop	r20
 5f0:	3f 91       	pop	r19
 5f2:	2f 91       	pop	r18
 5f4:	0f 90       	pop	r0
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <suart_init>:


void suart_init( void )
{
	// Enable interrupt
	sei();
 5fe:	78 94       	sei
	
	// Set the port HIGH
	SBIT(PORTD,STX) = 1;
 600:	5b 9a       	sbi	0x0b, 3	; 11

	// Set the prescaler to 1
	TCCR0B = (1 << CS00);	
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	85 bd       	out	0x25, r24	; 37
	
	// Enable output compare interrupt
	TIMSK0 = (1 << OCIE0A);		
 606:	92 e0       	ldi	r25, 0x02	; 2
 608:	90 93 6e 00 	sts	0x006E, r25

	// Falling edge
	EICRA = (1 << ISC01);
 60c:	90 93 69 00 	sts	0x0069, r25
	
	// Enable edge interrupt			
	EIMSK = (1 << INT0);			
 610:	8d bb       	out	0x1d, r24	; 29

	// Nothing to send
	stx_count = 0;	
 612:	10 92 4d 01 	sts	0x014D, r1
	
	// Nothing to receive			
	srx_done = 0;	
 616:	10 92 4e 01 	sts	0x014E, r1
	
	// Sets the output	        
	STXDDR |= 1 << STX;			
 61a:	53 9a       	sbi	0x0a, 3	; 10
 61c:	08 95       	ret

0000061e <__vector_1>:
	return srx_data;
}


ISR (INT0_vect)    // RX start
{
 61e:	1f 92       	push	r1
 620:	0f 92       	push	r0
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	0f 92       	push	r0
 626:	11 24       	eor	r1, r1
 628:	8f 93       	push	r24
	// scan 1.5 bits after start (to set timing right)
	OCR0B = TCNT0 + (u8)((BIT_TIME * 3) / 2);
 62a:	86 b5       	in	r24, 0x26	; 38
 62c:	80 53       	subi	r24, 0x30	; 48
 62e:	88 bd       	out	0x28, r24	; 40

	// Clear bit storage
	srx_tmp = 0;  
 630:	10 92 4f 01 	sts	0x014F, r1
	
	// Set bit-mask      
	srx_mask = 1;        
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	80 93 4b 01 	sts	0x014B, r24
	if( !(SRXPIN & 1<<SRX))  {  // still low
 63a:	4a 99       	sbic	0x09, 2	; 9
 63c:	04 c0       	rjmp	.+8      	; 0x646 <__vector_1+0x28>
		EIMSK &= ~(1 << INT0);			// disable edge interrupt
 63e:	e8 98       	cbi	0x1d, 0	; 29
		TIMSK0 = 1<<OCIE0A^1<<OCIE0B;  // wait for first bit
 640:	86 e0       	ldi	r24, 0x06	; 6
 642:	80 93 6e 00 	sts	0x006E, r24
	}
	TIFR0 = (1<<OCF0B);      // clear pending interrupt ? why does that output compare int occur?
 646:	84 e0       	ldi	r24, 0x04	; 4
 648:	85 bb       	out	0x15, r24	; 21
	EIFR |= (1 << INTF0);		// clear any pending edge interrupt
 64a:	e0 9a       	sbi	0x1c, 0	; 28
}
 64c:	8f 91       	pop	r24
 64e:	0f 90       	pop	r0
 650:	0f be       	out	0x3f, r0	; 63
 652:	0f 90       	pop	r0
 654:	1f 90       	pop	r1
 656:	18 95       	reti

00000658 <__vector_15>:


ISR (TIMER0_COMPB_vect)
{
 658:	1f 92       	push	r1
 65a:	0f 92       	push	r0
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	0f 92       	push	r0
 660:	11 24       	eor	r1, r1
 662:	8f 93       	push	r24
 664:	9f 93       	push	r25
	u8 in = SRXPIN;      // scan RX line
 666:	99 b1       	in	r25, 0x09	; 9

	if (srx_mask) {
 668:	80 91 4b 01 	lds	r24, 0x014B
 66c:	88 23       	and	r24, r24
 66e:	71 f0       	breq	.+28     	; 0x68c <__vector_15+0x34>
		if (in & 1 << SRX)
 670:	92 ff       	sbrs	r25, 2
 672:	05 c0       	rjmp	.+10     	; 0x67e <__vector_15+0x26>
			srx_tmp |= srx_mask;
 674:	90 91 4f 01 	lds	r25, 0x014F
 678:	98 2b       	or	r25, r24
 67a:	90 93 4f 01 	sts	0x014F, r25
		srx_mask <<= 1; 
 67e:	88 0f       	add	r24, r24
 680:	80 93 4b 01 	sts	0x014B, r24
		OCR0B += BIT_TIME;      // next bit slice
 684:	88 b5       	in	r24, 0x28	; 40
 686:	85 57       	subi	r24, 0x75	; 117
 688:	88 bd       	out	0x28, r24	; 40
 68a:	0c c0       	rjmp	.+24     	; 0x6a4 <__vector_15+0x4c>
		} else {
		srx_done = 1;      // mark RX data valid
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	80 93 4e 01 	sts	0x014E, r24
		srx_data = srx_tmp;      // store RX data
 692:	90 91 4f 01 	lds	r25, 0x014F
 696:	90 93 4c 01 	sts	0x014C, r25

		TIMSK0 = 1<<OCIE0A;        // enable TX and wait for start
 69a:	92 e0       	ldi	r25, 0x02	; 2
 69c:	90 93 6e 00 	sts	0x006E, r25
		EIFR |= (1 << INTF0);		// clear any pending edge interrupt: This hinders the in0-vect from beeing triggerd again just now which may occur by falling edges in the serial data bits
 6a0:	e0 9a       	sbi	0x1c, 0	; 28
		EIMSK = 1 << INT0;	// Re-enable edge interrupt
 6a2:	8d bb       	out	0x1d, r24	; 29
	}

}
 6a4:	9f 91       	pop	r25
 6a6:	8f 91       	pop	r24
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <__vector_14>:
	sputchar (*txt++);
}


ISR (TIMER0_COMPA_vect)    // TX bit
{
 6b2:	1f 92       	push	r1
 6b4:	0f 92       	push	r0
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	0f 92       	push	r0
 6ba:	11 24       	eor	r1, r1
 6bc:	8f 93       	push	r24
 6be:	9f 93       	push	r25
	u8 dout;
	u8 count;

	OCR0A += BIT_TIME;      // Next bit slice
 6c0:	87 b5       	in	r24, 0x27	; 39
 6c2:	85 57       	subi	r24, 0x75	; 117
 6c4:	87 bd       	out	0x27, r24	; 39
	count = stx_count;
 6c6:	80 91 4d 01 	lds	r24, 0x014D

	if (count) {
 6ca:	88 23       	and	r24, r24
 6cc:	99 f0       	breq	.+38     	; 0x6f4 <__vector_14+0x42>
		stx_count = --count;    // Count down
 6ce:	81 50       	subi	r24, 0x01	; 1
 6d0:	80 93 4d 01 	sts	0x014D, r24

		dout = 0;
		if (count != 9) {      // No start bit
 6d4:	89 30       	cpi	r24, 0x09	; 9
 6d6:	49 f0       	breq	.+18     	; 0x6ea <__vector_14+0x38>
			if (!(stx_data & 1))    // Test inverted data
 6d8:	80 91 4a 01 	lds	r24, 0x014A
 6dc:	98 2f       	mov	r25, r24
 6de:	90 95       	com	r25
 6e0:	91 70       	andi	r25, 0x01	; 1

			dout = 1;
			stx_data >>= 1;      // Shift zero in from left
 6e2:	86 95       	lsr	r24
 6e4:	80 93 4a 01 	sts	0x014A, r24
 6e8:	01 c0       	rjmp	.+2      	; 0x6ec <__vector_14+0x3a>
	count = stx_count;

	if (count) {
		stx_count = --count;    // Count down

		dout = 0;
 6ea:	90 e0       	ldi	r25, 0x00	; 0

			dout = 1;
			stx_data >>= 1;      // Shift zero in from left
		}

		SBIT(PORTD,STX) = dout;
 6ec:	90 fd       	sbrc	r25, 0
 6ee:	5b 9a       	sbi	0x0b, 3	; 11
 6f0:	90 ff       	sbrs	r25, 0
 6f2:	5b 98       	cbi	0x0b, 3	; 11
	}
}
 6f4:	9f 91       	pop	r25
 6f6:	8f 91       	pop	r24
 6f8:	0f 90       	pop	r0
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	0f 90       	pop	r0
 6fe:	1f 90       	pop	r1
 700:	18 95       	reti

00000702 <Write_Byte>:
		LCD_Byte(row2[i], LCD_CHR);
	}

}

void Write_Byte(uint8_t addr, uint8_t bits){
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	c8 2f       	mov	r28, r24
 708:	d6 2f       	mov	r29, r22
	
		
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 70a:	84 ea       	ldi	r24, 0xA4	; 164
 70c:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 710:	0e 94 6f 04 	call	0x8de	; 0x8de <TWI_Busy>
 714:	89 2b       	or	r24, r25
 716:	e1 f3       	breq	.-8      	; 0x710 <Write_Byte+0xe>
	if((TWSR & MASK) != START)Error(START);
 718:	80 91 b9 00 	lds	r24, 0x00B9
 71c:	88 7f       	andi	r24, 0xF8	; 248
 71e:	88 30       	cpi	r24, 0x08	; 8
 720:	21 f0       	breq	.+8      	; 0x72a <Write_Byte+0x28>
 722:	88 e0       	ldi	r24, 0x08	; 8
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 88 01 	call	0x310	; 0x310 <Error>
		
	//Loads the slave address and set the R/W bit to 0
	TWDR = (addr<<1) | LCD_WRITE;
 72a:	cc 0f       	add	r28, r28
 72c:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN); 
 730:	84 e8       	ldi	r24, 0x84	; 132
 732:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 736:	0e 94 6f 04 	call	0x8de	; 0x8de <TWI_Busy>
 73a:	89 2b       	or	r24, r25
 73c:	e1 f3       	breq	.-8      	; 0x736 <Write_Byte+0x34>
	if((TWSR & MASK) !=  MT_ADDRESS_ACK)Error((TWSR & MASK));
 73e:	80 91 b9 00 	lds	r24, 0x00B9
 742:	88 7f       	andi	r24, 0xF8	; 248
 744:	88 31       	cpi	r24, 0x18	; 24
 746:	31 f0       	breq	.+12     	; 0x754 <Write_Byte+0x52>
 748:	80 91 b9 00 	lds	r24, 0x00B9
 74c:	88 7f       	andi	r24, 0xF8	; 248
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 88 01 	call	0x310	; 0x310 <Error>
		
	//Sends the data to the slave
	TWDR = bits; //4bits
 754:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
 758:	84 e8       	ldi	r24, 0x84	; 132
 75a:	80 93 bc 00 	sts	0x00BC, r24
	
	while(!TWI_Busy());
 75e:	0e 94 6f 04 	call	0x8de	; 0x8de <TWI_Busy>
 762:	89 2b       	or	r24, r25
 764:	e1 f3       	breq	.-8      	; 0x75e <Write_Byte+0x5c>
	if((TWSR & MASK) !=  MT_BYTE_ACK)Error((TWSR & MASK));
 766:	80 91 b9 00 	lds	r24, 0x00B9
 76a:	88 7f       	andi	r24, 0xF8	; 248
 76c:	88 32       	cpi	r24, 0x28	; 40
 76e:	31 f0       	breq	.+12     	; 0x77c <Write_Byte+0x7a>
 770:	80 91 b9 00 	lds	r24, 0x00B9
 774:	88 7f       	andi	r24, 0xF8	; 248
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 88 01 	call	0x310	; 0x310 <Error>
		
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 77c:	84 e9       	ldi	r24, 0x94	; 148
 77e:	80 93 bc 00 	sts	0x00BC, r24
	
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	08 95       	ret

00000788 <LCD_Toggle_enable>:
	Write_Byte(LCD_ADDR, bits_low);
	LCD_Toggle_enable(bits_low);
	
}

void LCD_Toggle_enable(uint8_t bits){
 788:	cf 93       	push	r28
 78a:	c8 2f       	mov	r28, r24
 78c:	81 ee       	ldi	r24, 0xE1	; 225
 78e:	94 e0       	ldi	r25, 0x04	; 4
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	f1 f7       	brne	.-4      	; 0x790 <LCD_Toggle_enable+0x8>
 794:	00 c0       	rjmp	.+0      	; 0x796 <LCD_Toggle_enable+0xe>
 796:	00 00       	nop
	
	// Toggles the enable pin on the display to activate the code
//	_delay_ms(DELAY_MS*5);
	_delay_ms(5);
	Write_Byte(LCD_ADDR, (bits | ENABLE));
 798:	6c 2f       	mov	r22, r28
 79a:	64 60       	ori	r22, 0x04	; 4
 79c:	87 e2       	ldi	r24, 0x27	; 39
 79e:	0e 94 81 03 	call	0x702	; 0x702 <Write_Byte>
 7a2:	81 ee       	ldi	r24, 0xE1	; 225
 7a4:	94 e0       	ldi	r25, 0x04	; 4
 7a6:	01 97       	sbiw	r24, 0x01	; 1
 7a8:	f1 f7       	brne	.-4      	; 0x7a6 <LCD_Toggle_enable+0x1e>
 7aa:	00 c0       	rjmp	.+0      	; 0x7ac <LCD_Toggle_enable+0x24>
 7ac:	00 00       	nop
	_delay_ms(5);
	Write_Byte(LCD_ADDR, (bits & ~ENABLE));
 7ae:	6c 2f       	mov	r22, r28
 7b0:	6b 7f       	andi	r22, 0xFB	; 251
 7b2:	87 e2       	ldi	r24, 0x27	; 39
 7b4:	0e 94 81 03 	call	0x702	; 0x702 <Write_Byte>
 7b8:	81 ee       	ldi	r24, 0xE1	; 225
 7ba:	94 e0       	ldi	r25, 0x04	; 4
 7bc:	01 97       	sbiw	r24, 0x01	; 1
 7be:	f1 f7       	brne	.-4      	; 0x7bc <LCD_Toggle_enable+0x34>
 7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <LCD_Toggle_enable+0x3a>
 7c2:	00 00       	nop
	_delay_ms(5);
		
}
 7c4:	cf 91       	pop	r28
 7c6:	08 95       	ret

000007c8 <LCD_Byte>:
	LCD_Byte(0x01, LCD_CMD); 
	_delay_ms(DELAY_MS*5); //5 ms delay
	
}

void LCD_Byte(uint8_t bits, uint8_t mode){
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	c6 2f       	mov	r28, r22
 7ce:	c8 60       	ori	r28, 0x08	; 8
	
	uint8_t bits_high, bits_low;
	
	//Divides the data in two 4 bit values
	bits_high = mode | (bits & 0xF0) | LCD_BACKLIGHT;
 7d0:	d8 2f       	mov	r29, r24
 7d2:	d0 7f       	andi	r29, 0xF0	; 240
 7d4:	dc 2b       	or	r29, r28
	bits_low = mode | ((bits<<4) & 0xF0) | LCD_BACKLIGHT;
 7d6:	90 e1       	ldi	r25, 0x10	; 16
 7d8:	89 9f       	mul	r24, r25
 7da:	90 01       	movw	r18, r0
 7dc:	11 24       	eor	r1, r1
 7de:	c2 2b       	or	r28, r18
	
	// Send the high bits
	Write_Byte(LCD_ADDR, bits_high);
 7e0:	6d 2f       	mov	r22, r29
 7e2:	87 e2       	ldi	r24, 0x27	; 39
 7e4:	0e 94 81 03 	call	0x702	; 0x702 <Write_Byte>
	LCD_Toggle_enable(bits_high);
 7e8:	8d 2f       	mov	r24, r29
 7ea:	0e 94 c4 03 	call	0x788	; 0x788 <LCD_Toggle_enable>
	
	// Send the low bits
	Write_Byte(LCD_ADDR, bits_low);
 7ee:	6c 2f       	mov	r22, r28
 7f0:	87 e2       	ldi	r24, 0x27	; 39
 7f2:	0e 94 81 03 	call	0x702	; 0x702 <Write_Byte>
	LCD_Toggle_enable(bits_low);
 7f6:	8c 2f       	mov	r24, r28
 7f8:	0e 94 c4 03 	call	0x788	; 0x788 <LCD_Toggle_enable>
	
}
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	08 95       	ret

00000802 <LCD_Init>:


void LCD_Init(void){
	
	// Basic initialization
	LCD_Byte(0x33, LCD_CMD); 
 802:	60 e0       	ldi	r22, 0x00	; 0
 804:	83 e3       	ldi	r24, 0x33	; 51
 806:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
	LCD_Byte(0x32, LCD_CMD);
 80a:	60 e0       	ldi	r22, 0x00	; 0
 80c:	82 e3       	ldi	r24, 0x32	; 50
 80e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
	 
	// Entry mode, move cursor left to right 
	LCD_Byte(0x06, LCD_CMD); 
 812:	60 e0       	ldi	r22, 0x00	; 0
 814:	86 e0       	ldi	r24, 0x06	; 6
 816:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
	
	// Display on, Cursor off, Blink off
	LCD_Byte(0x0C, LCD_CMD); 
 81a:	60 e0       	ldi	r22, 0x00	; 0
 81c:	8c e0       	ldi	r24, 0x0C	; 12
 81e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
	
	// Set to 4-bit ooperation, 2 lines and 5x7 dots
	LCD_Byte(0x28, LCD_CMD); 
 822:	60 e0       	ldi	r22, 0x00	; 0
 824:	88 e2       	ldi	r24, 0x28	; 40
 826:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
	
	// Clears display and DDRAM
	LCD_Byte(0x01, LCD_CMD); 
 82a:	60 e0       	ldi	r22, 0x00	; 0
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
 832:	8f e0       	ldi	r24, 0x0F	; 15
 834:	97 e2       	ldi	r25, 0x27	; 39
 836:	01 97       	sbiw	r24, 0x01	; 1
 838:	f1 f7       	brne	.-4      	; 0x836 <LCD_Init+0x34>
 83a:	00 c0       	rjmp	.+0      	; 0x83c <LCD_Init+0x3a>
 83c:	00 00       	nop
 83e:	08 95       	ret

00000840 <LCD_String>:
	Write_Byte(LCD_ADDR, (bits & ~ENABLE));
	_delay_ms(5);
		
}

void LCD_String(uint8_t row1[],int row1_elems, uint8_t row2[], int row2_elems){
 840:	af 92       	push	r10
 842:	bf 92       	push	r11
 844:	cf 92       	push	r12
 846:	df 92       	push	r13
 848:	ef 92       	push	r14
 84a:	ff 92       	push	r15
 84c:	0f 93       	push	r16
 84e:	1f 93       	push	r17
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
 854:	5c 01       	movw	r10, r24
 856:	7b 01       	movw	r14, r22
 858:	6a 01       	movw	r12, r20
 85a:	89 01       	movw	r16, r18
	
	// Command to print on first line
	LCD_Byte(LCD_LINE_1, LCD_CMD);
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	80 e8       	ldi	r24, 0x80	; 128
 860:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
	
	// Prints the characters on that line
	for(int i = 0; i < row1_elems ;i++){
 864:	1e 14       	cp	r1, r14
 866:	1f 04       	cpc	r1, r15
 868:	54 f4       	brge	.+20     	; 0x87e <LCD_String+0x3e>
 86a:	e5 01       	movw	r28, r10
 86c:	ea 0c       	add	r14, r10
 86e:	fb 1c       	adc	r15, r11
		LCD_Byte(row1[i], LCD_CHR);
 870:	61 e0       	ldi	r22, 0x01	; 1
 872:	89 91       	ld	r24, Y+
 874:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
	
	// Command to print on first line
	LCD_Byte(LCD_LINE_1, LCD_CMD);
	
	// Prints the characters on that line
	for(int i = 0; i < row1_elems ;i++){
 878:	ce 15       	cp	r28, r14
 87a:	df 05       	cpc	r29, r15
 87c:	c9 f7       	brne	.-14     	; 0x870 <LCD_String+0x30>
		LCD_Byte(row1[i], LCD_CHR);
	}
	
	// Command to print on second line
	LCD_Byte(LCD_LINE_2, LCD_CMD);
 87e:	60 e0       	ldi	r22, 0x00	; 0
 880:	80 ec       	ldi	r24, 0xC0	; 192
 882:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
	
	// Prints the characters on that line
	for(int i = 0; i < row2_elems ;i++){
 886:	10 16       	cp	r1, r16
 888:	11 06       	cpc	r1, r17
 88a:	54 f4       	brge	.+20     	; 0x8a0 <LCD_String+0x60>
 88c:	e6 01       	movw	r28, r12
 88e:	0c 0d       	add	r16, r12
 890:	1d 1d       	adc	r17, r13
		LCD_Byte(row2[i], LCD_CHR);
 892:	61 e0       	ldi	r22, 0x01	; 1
 894:	89 91       	ld	r24, Y+
 896:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_Byte>
	
	// Command to print on second line
	LCD_Byte(LCD_LINE_2, LCD_CMD);
	
	// Prints the characters on that line
	for(int i = 0; i < row2_elems ;i++){
 89a:	c0 17       	cp	r28, r16
 89c:	d1 07       	cpc	r29, r17
 89e:	c9 f7       	brne	.-14     	; 0x892 <LCD_String+0x52>
		LCD_Byte(row2[i], LCD_CHR);
	}

}
 8a0:	df 91       	pop	r29
 8a2:	cf 91       	pop	r28
 8a4:	1f 91       	pop	r17
 8a6:	0f 91       	pop	r16
 8a8:	ff 90       	pop	r15
 8aa:	ef 90       	pop	r14
 8ac:	df 90       	pop	r13
 8ae:	cf 90       	pop	r12
 8b0:	bf 90       	pop	r11
 8b2:	af 90       	pop	r10
 8b4:	08 95       	ret

000008b6 <TWI_Master_Init>:


void TWI_Master_Init (void){
	
	//Sets the power reduction register for TWI to 0.
	PRR &= ~(1<<PRTWI);
 8b6:	e4 e6       	ldi	r30, 0x64	; 100
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z
 8bc:	8f 77       	andi	r24, 0x7F	; 127
 8be:	80 83       	st	Z, r24
	
	//Sets the prescaler to 1 by setting TWPS1 and 0 to 0
	TWSR &= ~(1<<TWPS1) & ~(1<<TWPS0); 
 8c0:	e9 eb       	ldi	r30, 0xB9	; 185
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	80 81       	ld	r24, Z
 8c6:	8c 7f       	andi	r24, 0xFC	; 252
 8c8:	80 83       	st	Z, r24
	
	//Sets the speed of TWI to 100khz
	TWBR = 0x20;
 8ca:	80 e2       	ldi	r24, 0x20	; 32
 8cc:	80 93 b8 00 	sts	0x00B8, r24
		TWWC - Write Collision Flag
		TWEN - Enable Bit
		TWIE - Interrupt Enable

	************************************************************************/
	TWDR = 0xFF;
 8d0:	8f ef       	ldi	r24, 0xFF	; 255
 8d2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (0<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWWC) | (1<<TWIE) | (1<<TWEN);
 8d6:	85 e0       	ldi	r24, 0x05	; 5
 8d8:	80 93 bc 00 	sts	0x00BC, r24
 8dc:	08 95       	ret

000008de <TWI_Busy>:

}

int TWI_Busy(void){
	//Returns 0 if the MCU is busy
	return TWCR & (1<<TWINT);
 8de:	80 91 bc 00 	lds	r24, 0x00BC
 8e2:	80 78       	andi	r24, 0x80	; 128
}
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	08 95       	ret

000008e8 <__divmodhi4>:
 8e8:	97 fb       	bst	r25, 7
 8ea:	07 2e       	mov	r0, r23
 8ec:	16 f4       	brtc	.+4      	; 0x8f2 <__divmodhi4+0xa>
 8ee:	00 94       	com	r0
 8f0:	07 d0       	rcall	.+14     	; 0x900 <__divmodhi4_neg1>
 8f2:	77 fd       	sbrc	r23, 7
 8f4:	09 d0       	rcall	.+18     	; 0x908 <__divmodhi4_neg2>
 8f6:	0e 94 c9 04 	call	0x992	; 0x992 <__udivmodhi4>
 8fa:	07 fc       	sbrc	r0, 7
 8fc:	05 d0       	rcall	.+10     	; 0x908 <__divmodhi4_neg2>
 8fe:	3e f4       	brtc	.+14     	; 0x90e <__divmodhi4_exit>

00000900 <__divmodhi4_neg1>:
 900:	90 95       	com	r25
 902:	81 95       	neg	r24
 904:	9f 4f       	sbci	r25, 0xFF	; 255
 906:	08 95       	ret

00000908 <__divmodhi4_neg2>:
 908:	70 95       	com	r23
 90a:	61 95       	neg	r22
 90c:	7f 4f       	sbci	r23, 0xFF	; 255

0000090e <__divmodhi4_exit>:
 90e:	08 95       	ret

00000910 <__udivmodsi4>:
 910:	a1 e2       	ldi	r26, 0x21	; 33
 912:	1a 2e       	mov	r1, r26
 914:	aa 1b       	sub	r26, r26
 916:	bb 1b       	sub	r27, r27
 918:	fd 01       	movw	r30, r26
 91a:	0d c0       	rjmp	.+26     	; 0x936 <__udivmodsi4_ep>

0000091c <__udivmodsi4_loop>:
 91c:	aa 1f       	adc	r26, r26
 91e:	bb 1f       	adc	r27, r27
 920:	ee 1f       	adc	r30, r30
 922:	ff 1f       	adc	r31, r31
 924:	a2 17       	cp	r26, r18
 926:	b3 07       	cpc	r27, r19
 928:	e4 07       	cpc	r30, r20
 92a:	f5 07       	cpc	r31, r21
 92c:	20 f0       	brcs	.+8      	; 0x936 <__udivmodsi4_ep>
 92e:	a2 1b       	sub	r26, r18
 930:	b3 0b       	sbc	r27, r19
 932:	e4 0b       	sbc	r30, r20
 934:	f5 0b       	sbc	r31, r21

00000936 <__udivmodsi4_ep>:
 936:	66 1f       	adc	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	88 1f       	adc	r24, r24
 93c:	99 1f       	adc	r25, r25
 93e:	1a 94       	dec	r1
 940:	69 f7       	brne	.-38     	; 0x91c <__udivmodsi4_loop>
 942:	60 95       	com	r22
 944:	70 95       	com	r23
 946:	80 95       	com	r24
 948:	90 95       	com	r25
 94a:	9b 01       	movw	r18, r22
 94c:	ac 01       	movw	r20, r24
 94e:	bd 01       	movw	r22, r26
 950:	cf 01       	movw	r24, r30
 952:	08 95       	ret

00000954 <__divmodsi4>:
 954:	05 2e       	mov	r0, r21
 956:	97 fb       	bst	r25, 7
 958:	1e f4       	brtc	.+6      	; 0x960 <__divmodsi4+0xc>
 95a:	00 94       	com	r0
 95c:	0e 94 c1 04 	call	0x982	; 0x982 <__negsi2>
 960:	57 fd       	sbrc	r21, 7
 962:	07 d0       	rcall	.+14     	; 0x972 <__divmodsi4_neg2>
 964:	0e 94 88 04 	call	0x910	; 0x910 <__udivmodsi4>
 968:	07 fc       	sbrc	r0, 7
 96a:	03 d0       	rcall	.+6      	; 0x972 <__divmodsi4_neg2>
 96c:	4e f4       	brtc	.+18     	; 0x980 <__divmodsi4_exit>
 96e:	0c 94 c1 04 	jmp	0x982	; 0x982 <__negsi2>

00000972 <__divmodsi4_neg2>:
 972:	50 95       	com	r21
 974:	40 95       	com	r20
 976:	30 95       	com	r19
 978:	21 95       	neg	r18
 97a:	3f 4f       	sbci	r19, 0xFF	; 255
 97c:	4f 4f       	sbci	r20, 0xFF	; 255
 97e:	5f 4f       	sbci	r21, 0xFF	; 255

00000980 <__divmodsi4_exit>:
 980:	08 95       	ret

00000982 <__negsi2>:
 982:	90 95       	com	r25
 984:	80 95       	com	r24
 986:	70 95       	com	r23
 988:	61 95       	neg	r22
 98a:	7f 4f       	sbci	r23, 0xFF	; 255
 98c:	8f 4f       	sbci	r24, 0xFF	; 255
 98e:	9f 4f       	sbci	r25, 0xFF	; 255
 990:	08 95       	ret

00000992 <__udivmodhi4>:
 992:	aa 1b       	sub	r26, r26
 994:	bb 1b       	sub	r27, r27
 996:	51 e1       	ldi	r21, 0x11	; 17
 998:	07 c0       	rjmp	.+14     	; 0x9a8 <__udivmodhi4_ep>

0000099a <__udivmodhi4_loop>:
 99a:	aa 1f       	adc	r26, r26
 99c:	bb 1f       	adc	r27, r27
 99e:	a6 17       	cp	r26, r22
 9a0:	b7 07       	cpc	r27, r23
 9a2:	10 f0       	brcs	.+4      	; 0x9a8 <__udivmodhi4_ep>
 9a4:	a6 1b       	sub	r26, r22
 9a6:	b7 0b       	sbc	r27, r23

000009a8 <__udivmodhi4_ep>:
 9a8:	88 1f       	adc	r24, r24
 9aa:	99 1f       	adc	r25, r25
 9ac:	5a 95       	dec	r21
 9ae:	a9 f7       	brne	.-22     	; 0x99a <__udivmodhi4_loop>
 9b0:	80 95       	com	r24
 9b2:	90 95       	com	r25
 9b4:	bc 01       	movw	r22, r24
 9b6:	cd 01       	movw	r24, r26
 9b8:	08 95       	ret

000009ba <itoa>:
 9ba:	45 32       	cpi	r20, 0x25	; 37
 9bc:	51 05       	cpc	r21, r1
 9be:	20 f4       	brcc	.+8      	; 0x9c8 <itoa+0xe>
 9c0:	42 30       	cpi	r20, 0x02	; 2
 9c2:	10 f0       	brcs	.+4      	; 0x9c8 <itoa+0xe>
 9c4:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__itoa_ncheck>
 9c8:	fb 01       	movw	r30, r22
 9ca:	10 82       	st	Z, r1
 9cc:	cb 01       	movw	r24, r22
 9ce:	08 95       	ret

000009d0 <__itoa_ncheck>:
 9d0:	bb 27       	eor	r27, r27
 9d2:	4a 30       	cpi	r20, 0x0A	; 10
 9d4:	31 f4       	brne	.+12     	; 0x9e2 <__itoa_ncheck+0x12>
 9d6:	99 23       	and	r25, r25
 9d8:	22 f4       	brpl	.+8      	; 0x9e2 <__itoa_ncheck+0x12>
 9da:	bd e2       	ldi	r27, 0x2D	; 45
 9dc:	90 95       	com	r25
 9de:	81 95       	neg	r24
 9e0:	9f 4f       	sbci	r25, 0xFF	; 255
 9e2:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__utoa_common>

000009e6 <__utoa_ncheck>:
 9e6:	bb 27       	eor	r27, r27

000009e8 <__utoa_common>:
 9e8:	fb 01       	movw	r30, r22
 9ea:	55 27       	eor	r21, r21
 9ec:	aa 27       	eor	r26, r26
 9ee:	88 0f       	add	r24, r24
 9f0:	99 1f       	adc	r25, r25
 9f2:	aa 1f       	adc	r26, r26
 9f4:	a4 17       	cp	r26, r20
 9f6:	10 f0       	brcs	.+4      	; 0x9fc <__utoa_common+0x14>
 9f8:	a4 1b       	sub	r26, r20
 9fa:	83 95       	inc	r24
 9fc:	50 51       	subi	r21, 0x10	; 16
 9fe:	b9 f7       	brne	.-18     	; 0x9ee <__utoa_common+0x6>
 a00:	a0 5d       	subi	r26, 0xD0	; 208
 a02:	aa 33       	cpi	r26, 0x3A	; 58
 a04:	08 f0       	brcs	.+2      	; 0xa08 <__utoa_common+0x20>
 a06:	a9 5d       	subi	r26, 0xD9	; 217
 a08:	a1 93       	st	Z+, r26
 a0a:	00 97       	sbiw	r24, 0x00	; 0
 a0c:	79 f7       	brne	.-34     	; 0x9ec <__utoa_common+0x4>
 a0e:	b1 11       	cpse	r27, r1
 a10:	b1 93       	st	Z+, r27
 a12:	11 92       	st	Z+, r1
 a14:	cb 01       	movw	r24, r22
 a16:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <strrev>

00000a1a <strrev>:
 a1a:	dc 01       	movw	r26, r24
 a1c:	fc 01       	movw	r30, r24
 a1e:	67 2f       	mov	r22, r23
 a20:	71 91       	ld	r23, Z+
 a22:	77 23       	and	r23, r23
 a24:	e1 f7       	brne	.-8      	; 0xa1e <strrev+0x4>
 a26:	32 97       	sbiw	r30, 0x02	; 2
 a28:	04 c0       	rjmp	.+8      	; 0xa32 <strrev+0x18>
 a2a:	7c 91       	ld	r23, X
 a2c:	6d 93       	st	X+, r22
 a2e:	70 83       	st	Z, r23
 a30:	62 91       	ld	r22, -Z
 a32:	ae 17       	cp	r26, r30
 a34:	bf 07       	cpc	r27, r31
 a36:	c8 f3       	brcs	.-14     	; 0xa2a <strrev+0x10>
 a38:	08 95       	ret

00000a3a <_exit>:
 a3a:	f8 94       	cli

00000a3c <__stop_program>:
 a3c:	ff cf       	rjmp	.-2      	; 0xa3c <__stop_program>
