
ATMega168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000004f2  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080010a  0080010a  00000590  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f01  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000057b  00000000  00000000  00001639  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000066f  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00002224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c1  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a9  00000000  00000000  000028a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00002f4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  9e:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <System_Init>:
	BT_Send('c');
	BT_Send(',');
	for(int i = 0; i < 12;i++){
		BT_Send(adress[i]);
	}
	BT_Send(0x0A); //NL
  a6:	10 92 0b 01 	sts	0x010B, r1
	BT_Send(0x0D); //CR
  aa:	10 92 0a 01 	sts	0x010A, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	78 94       	sei
  b0:	8c e0       	ldi	r24, 0x0C	; 12
  b2:	80 93 69 00 	sts	0x0069, r24
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	8d bb       	out	0x1d, r24	; 29
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	80 93 68 00 	sts	0x0068, r24
	//Wait two seconds
	//_delay_ms(8000);
	_delay_ms(8000);
	
	for(int i = 0; i<6;i++){
		BT_Recieve();
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	80 93 6d 00 	sts	0x006D, r24
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	84 b9       	out	0x04, r24	; 4
  ca:	88 ee       	ldi	r24, 0xE8	; 232
  cc:	8a b9       	out	0x0a, r24	; 10
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	89 e6       	ldi	r24, 0x69	; 105
  d2:	98 e1       	ldi	r25, 0x18	; 24
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
	}
	
	
	if(BT_Recieve() == '%'){
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <System_Init+0x2e>
  dc:	00 c0       	rjmp	.+0      	; 0xde <System_Init+0x38>
  de:	00 00       	nop
		PORTB = (1<<PORTB1);
  e0:	87 e0       	ldi	r24, 0x07	; 7
  e2:	85 b9       	out	0x05, r24	; 5
		Uart_Flush();
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	89 e6       	ldi	r24, 0x69	; 105
		return 1;
  e8:	98 e1       	ldi	r25, 0x18	; 24
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
		}
		else if(BT_Recieve()=='E'){
			Error('E');
		}*/
	}
	return 0;
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <System_Init+0x44>
}
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <System_Init+0x4e>
  f4:	00 00       	nop
  f6:	15 b8       	out	0x05, r1	; 5
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 0b 01 	sts	0x010B, r25
 100:	80 93 0a 01 	sts	0x010A, r24
 104:	08 95       	ret

00000106 <UART_Init>:
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	20 93 c0 00 	sts	0x00C0, r18
	//Set double speed
	UCSR0A = (1<<U2X0);
	
	//Set baudrate
	unsigned int baudrate;
	baudrate = 8000000/8/baud-1;
 10c:	9c 01       	movw	r18, r24
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	60 e4       	ldi	r22, 0x40	; 64
 114:	72 e4       	ldi	r23, 0x42	; 66
 116:	8f e0       	ldi	r24, 0x0F	; 15
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__divmodsi4>
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	31 09       	sbc	r19, r1
	//Double speed use frequency/8/baud
	
	//Set the baudrate in the registry
	UBRR0H = (unsigned char) (baudrate>>8);
 122:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) (baudrate);
 126:	20 93 c4 00 	sts	0x00C4, r18

	
	//Enables Receive and Transmit over UART
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); //RXCIE and TXCIE for interrupt based UART.
 12a:	88 e1       	ldi	r24, 0x18	; 24
 12c:	80 93 c1 00 	sts	0x00C1, r24
	
	//Sets to 1 stop bit and 8 databits
	UCSR0C = (0<<USBS0) | (3<<UCSZ00);
 130:	e2 ec       	ldi	r30, 0xC2	; 194
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	80 83       	st	Z, r24
	
	//Disables Parity
	UCSR0C |= (0<<UPM01) | (0<<UPM00);
 138:	80 81       	ld	r24, Z
 13a:	80 83       	st	Z, r24
	
	
	status |= UART_STARTED;
 13c:	80 91 0a 01 	lds	r24, 0x010A
 140:	90 91 0b 01 	lds	r25, 0x010B
 144:	82 60       	ori	r24, 0x02	; 2
 146:	90 93 0b 01 	sts	0x010B, r25
 14a:	80 93 0a 01 	sts	0x010A, r24
 14e:	08 95       	ret

00000150 <BT_Send>:
void BT_Send(unsigned char data){
	
	//PORTB = ~(1<<PORTB1);
	//_delay_ms(1000);
	//Waits for the transmit buffer to be empty (wait for flag)
	while(!(UCSR0A & (1<<UDRE0)));
 150:	e0 ec       	ldi	r30, 0xC0	; 192
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	90 81       	ld	r25, Z
 156:	95 ff       	sbrs	r25, 5
 158:	fd cf       	rjmp	.-6      	; 0x154 <BT_Send+0x4>
	
	//Put data in buffer and sends it
	UDR0 = data;
 15a:	80 93 c6 00 	sts	0x00C6, r24
 15e:	08 95       	ret

00000160 <Error>:
void Sense_Light(void){
	
	
}

void Error(unsigned int errorcode){
 160:	d8 2f       	mov	r29, r24
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
 162:	c1 2c       	mov	r12, r1
 164:	d1 2c       	mov	r13, r1
 166:	76 01       	movw	r14, r12
	for(;;){
		if(ticks%10000 == 0){
 168:	0f 2e       	mov	r0, r31
 16a:	f0 e1       	ldi	r31, 0x10	; 16
 16c:	8f 2e       	mov	r8, r31
 16e:	f7 e2       	ldi	r31, 0x27	; 39
 170:	9f 2e       	mov	r9, r31
 172:	a1 2c       	mov	r10, r1
 174:	b1 2c       	mov	r11, r1
 176:	f0 2d       	mov	r31, r0
			PINB = (1<<BRAKELIGHT);
 178:	c2 e0       	ldi	r28, 0x02	; 2
void Error(unsigned int errorcode){
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
	for(;;){
		if(ticks%10000 == 0){
 17a:	c7 01       	movw	r24, r14
 17c:	b6 01       	movw	r22, r12
 17e:	a5 01       	movw	r20, r10
 180:	94 01       	movw	r18, r8
 182:	0e 94 36 02 	call	0x46c	; 0x46c <__udivmodsi4>
 186:	67 2b       	or	r22, r23
 188:	68 2b       	or	r22, r24
 18a:	69 2b       	or	r22, r25
 18c:	21 f4       	brne	.+8      	; 0x196 <Error+0x36>
			PINB = (1<<BRAKELIGHT);
 18e:	c3 b9       	out	0x03, r28	; 3
			BT_Send(errorcode);
 190:	8d 2f       	mov	r24, r29
 192:	0e 94 a8 00 	call	0x150	; 0x150 <BT_Send>
		}
		if(ticks%10000 == 50000){
			PINB = (0<<BRAKELIGHT);
		}
		ticks++;
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	c8 1a       	sub	r12, r24
 19a:	d8 0a       	sbc	r13, r24
 19c:	e8 0a       	sbc	r14, r24
 19e:	f8 0a       	sbc	r15, r24
	}
 1a0:	ec cf       	rjmp	.-40     	; 0x17a <Error+0x1a>

000001a2 <Y_LED_On>:
}


void Y_LED_On(void){
	PORTD |= (1<<PORTD7);
 1a2:	5f 9a       	sbi	0x0b, 7	; 11
 1a4:	08 95       	ret

000001a6 <Y_LED_Off>:
}
void Y_LED_Off(void){
	PORTD &= (0<<PORTD7);
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	1b b8       	out	0x0b, r1	; 11
 1aa:	08 95       	ret

000001ac <main>:


//Name of the main struct with all the data in for the different sensors and values
DATA DirtyDawg;

int main(void){
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	2a 97       	sbiw	r28, 0x0a	; 10
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61

	DirtyDawg.state = 0;
 1c0:	10 92 18 01 	sts	0x0118, r1
	System_Init(); //Checked - OK!
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <System_Init>
	//Baud rate max is 19200 (double speed enabled)

	UART_Init(19200); //Checked - OK!
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	9b e4       	ldi	r25, 0x4B	; 75
 1cc:	0e 94 83 00 	call	0x106	; 0x106 <UART_Init>

	//Connects to BT device
	//while(BT_Init()==0);
	
	TWI_Master_Init();
 1d0:	0e 94 1d 02 	call	0x43a	; 0x43a <TWI_Master_Init>

	LCD_Init();
 1d4:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Init>
	uint8_t array1[] = {'H','E','L','L','O'};
 1d8:	85 e0       	ldi	r24, 0x05	; 5
 1da:	e0 e0       	ldi	r30, 0x00	; 0
 1dc:	f1 e0       	ldi	r31, 0x01	; 1
 1de:	de 01       	movw	r26, r28
 1e0:	11 96       	adiw	r26, 0x01	; 1
 1e2:	01 90       	ld	r0, Z+
 1e4:	0d 92       	st	X+, r0
 1e6:	8a 95       	dec	r24
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x36>
	uint8_t array2[] = {'W','O','R','L','D'};
 1ea:	85 e0       	ldi	r24, 0x05	; 5
 1ec:	e5 e0       	ldi	r30, 0x05	; 5
 1ee:	f1 e0       	ldi	r31, 0x01	; 1
 1f0:	de 01       	movw	r26, r28
 1f2:	16 96       	adiw	r26, 0x06	; 6
 1f4:	01 90       	ld	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	8a 95       	dec	r24
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0x48>
	LCD_String(array1, ARR_SIZE(array1),array2, ARR_SIZE(array2));
 1fc:	25 e0       	ldi	r18, 0x05	; 5
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	ae 01       	movw	r20, r28
 202:	4a 5f       	subi	r20, 0xFA	; 250
 204:	5f 4f       	sbci	r21, 0xFF	; 255
 206:	65 e0       	ldi	r22, 0x05	; 5
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	ce 01       	movw	r24, r28
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_String>
	
	Y_LED_Off();
 212:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Y_LED_Off>
	while(TRUE){
		if(DirtyDawg.state == FALSE)
 216:	0c e0       	ldi	r16, 0x0C	; 12
 218:	11 e0       	ldi	r17, 0x01	; 1
 21a:	f8 01       	movw	r30, r16
 21c:	84 85       	ldd	r24, Z+12	; 0x0c
 21e:	81 11       	cpse	r24, r1
 220:	03 c0       	rjmp	.+6      	; 0x228 <main+0x7c>
			Y_LED_Off();
 222:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Y_LED_Off>
 226:	f9 cf       	rjmp	.-14     	; 0x21a <main+0x6e>
		else
			Y_LED_On();
 228:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Y_LED_On>
 22c:	f6 cf       	rjmp	.-20     	; 0x21a <main+0x6e>

0000022e <__vector_5>:
	}
		
}

ISR(PCINT2_vect){
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	8f 93       	push	r24
	if(DirtyDawg.state == FALSE)
 23a:	80 91 18 01 	lds	r24, 0x0118
 23e:	81 11       	cpse	r24, r1
 240:	04 c0       	rjmp	.+8      	; 0x24a <__vector_5+0x1c>
		DirtyDawg.state = TRUE;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 18 01 	sts	0x0118, r24
 248:	02 c0       	rjmp	.+4      	; 0x24e <__vector_5+0x20>
	else
		DirtyDawg.state = FALSE;
 24a:	10 92 18 01 	sts	0x0118, r1
}
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__vector_2>:

ISR(INT1_vect){
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	8f 93       	push	r24
	if(DirtyDawg.state == FALSE)
 266:	80 91 18 01 	lds	r24, 0x0118
 26a:	81 11       	cpse	r24, r1
 26c:	04 c0       	rjmp	.+8      	; 0x276 <__vector_2+0x1c>
	DirtyDawg.state = TRUE;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 18 01 	sts	0x0118, r24
 274:	02 c0       	rjmp	.+4      	; 0x27a <__vector_2+0x20>
	else
	DirtyDawg.state = FALSE;
 276:	10 92 18 01 	sts	0x0118, r1
}
 27a:	8f 91       	pop	r24
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <Write_Byte>:
		LCD_Byte(row2[i], LCD_CHR);
	}

}

void Write_Byte(uint8_t addr, uint8_t bits){
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	c8 2f       	mov	r28, r24
 28c:	d6 2f       	mov	r29, r22
	
		
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 28e:	84 ea       	ldi	r24, 0xA4	; 164
 290:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 294:	0e 94 31 02 	call	0x462	; 0x462 <TWI_Busy>
 298:	89 2b       	or	r24, r25
 29a:	e1 f3       	breq	.-8      	; 0x294 <Write_Byte+0xe>
	if((TWSR & MASK) != START)Error(START);
 29c:	80 91 b9 00 	lds	r24, 0x00B9
 2a0:	88 7f       	andi	r24, 0xF8	; 248
 2a2:	88 30       	cpi	r24, 0x08	; 8
 2a4:	21 f0       	breq	.+8      	; 0x2ae <Write_Byte+0x28>
 2a6:	88 e0       	ldi	r24, 0x08	; 8
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 b0 00 	call	0x160	; 0x160 <Error>
		
	//Loads the slave address and set the R/W bit to 0
	TWDR = (addr<<1) | LCD_WRITE;
 2ae:	cc 0f       	add	r28, r28
 2b0:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN); 
 2b4:	84 e8       	ldi	r24, 0x84	; 132
 2b6:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 2ba:	0e 94 31 02 	call	0x462	; 0x462 <TWI_Busy>
 2be:	89 2b       	or	r24, r25
 2c0:	e1 f3       	breq	.-8      	; 0x2ba <Write_Byte+0x34>
	if((TWSR & MASK) !=  MT_ADDRESS_ACK)Error((TWSR & MASK));
 2c2:	80 91 b9 00 	lds	r24, 0x00B9
 2c6:	88 7f       	andi	r24, 0xF8	; 248
 2c8:	88 31       	cpi	r24, 0x18	; 24
 2ca:	31 f0       	breq	.+12     	; 0x2d8 <Write_Byte+0x52>
 2cc:	80 91 b9 00 	lds	r24, 0x00B9
 2d0:	88 7f       	andi	r24, 0xF8	; 248
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 b0 00 	call	0x160	; 0x160 <Error>
		
	//Sends the data to the slave
	TWDR = bits; //4bits
 2d8:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
 2dc:	84 e8       	ldi	r24, 0x84	; 132
 2de:	80 93 bc 00 	sts	0x00BC, r24
	
	while(!TWI_Busy());
 2e2:	0e 94 31 02 	call	0x462	; 0x462 <TWI_Busy>
 2e6:	89 2b       	or	r24, r25
 2e8:	e1 f3       	breq	.-8      	; 0x2e2 <Write_Byte+0x5c>
	if((TWSR & MASK) !=  MT_BYTE_ACK)Error((TWSR & MASK));
 2ea:	80 91 b9 00 	lds	r24, 0x00B9
 2ee:	88 7f       	andi	r24, 0xF8	; 248
 2f0:	88 32       	cpi	r24, 0x28	; 40
 2f2:	31 f0       	breq	.+12     	; 0x300 <Write_Byte+0x7a>
 2f4:	80 91 b9 00 	lds	r24, 0x00B9
 2f8:	88 7f       	andi	r24, 0xF8	; 248
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 b0 00 	call	0x160	; 0x160 <Error>
		
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 300:	84 e9       	ldi	r24, 0x94	; 148
 302:	80 93 bc 00 	sts	0x00BC, r24
	
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <LCD_Toggle_enable>:
	Write_Byte(LCD_ADDR, bits_low);
	LCD_Toggle_enable(bits_low);
	
}

void LCD_Toggle_enable(uint8_t bits){
 30c:	cf 93       	push	r28
 30e:	c8 2f       	mov	r28, r24
 310:	8f e0       	ldi	r24, 0x0F	; 15
 312:	97 e2       	ldi	r25, 0x27	; 39
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <LCD_Toggle_enable+0x8>
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD_Toggle_enable+0xe>
 31a:	00 00       	nop
	
	// Toggles the enable pin on the display to activate the code
	_delay_ms(DELAY_MS*5);
	Write_Byte(LCD_ADDR, (bits | ENABLE));
 31c:	6c 2f       	mov	r22, r28
 31e:	64 60       	ori	r22, 0x04	; 4
 320:	87 e2       	ldi	r24, 0x27	; 39
 322:	0e 94 43 01 	call	0x286	; 0x286 <Write_Byte>
 326:	8f e0       	ldi	r24, 0x0F	; 15
 328:	97 e2       	ldi	r25, 0x27	; 39
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_Toggle_enable+0x1e>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_Toggle_enable+0x24>
 330:	00 00       	nop
	_delay_ms(DELAY_MS*5);
	Write_Byte(LCD_ADDR, (bits & ~ENABLE));
 332:	6c 2f       	mov	r22, r28
 334:	6b 7f       	andi	r22, 0xFB	; 251
 336:	87 e2       	ldi	r24, 0x27	; 39
 338:	0e 94 43 01 	call	0x286	; 0x286 <Write_Byte>
 33c:	8f e0       	ldi	r24, 0x0F	; 15
 33e:	97 e2       	ldi	r25, 0x27	; 39
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <LCD_Toggle_enable+0x34>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_Toggle_enable+0x3a>
 346:	00 00       	nop
	_delay_ms(DELAY_MS*5);
		
}
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <LCD_Byte>:
	LCD_Byte(0x01, LCD_CMD); 
	_delay_ms(DELAY_MS*5); //5 ms delay
	
}

void LCD_Byte(uint8_t bits, uint8_t mode){
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	c6 2f       	mov	r28, r22
 352:	c8 60       	ori	r28, 0x08	; 8
	
	uint8_t bits_high, bits_low;
	
	//Divides the data in two 4 bit values
	bits_high = mode | (bits & 0xF0) | LCD_BACKLIGHT;
 354:	d8 2f       	mov	r29, r24
 356:	d0 7f       	andi	r29, 0xF0	; 240
 358:	dc 2b       	or	r29, r28
	bits_low = mode | ((bits<<4) & 0xF0) | LCD_BACKLIGHT;
 35a:	90 e1       	ldi	r25, 0x10	; 16
 35c:	89 9f       	mul	r24, r25
 35e:	90 01       	movw	r18, r0
 360:	11 24       	eor	r1, r1
 362:	c2 2b       	or	r28, r18
	
	// Send the high bits
	Write_Byte(LCD_ADDR, bits_high);
 364:	6d 2f       	mov	r22, r29
 366:	87 e2       	ldi	r24, 0x27	; 39
 368:	0e 94 43 01 	call	0x286	; 0x286 <Write_Byte>
	LCD_Toggle_enable(bits_high);
 36c:	8d 2f       	mov	r24, r29
 36e:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_Toggle_enable>
	
	// Send the low bits
	Write_Byte(LCD_ADDR, bits_low);
 372:	6c 2f       	mov	r22, r28
 374:	87 e2       	ldi	r24, 0x27	; 39
 376:	0e 94 43 01 	call	0x286	; 0x286 <Write_Byte>
	LCD_Toggle_enable(bits_low);
 37a:	8c 2f       	mov	r24, r28
 37c:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_Toggle_enable>
	
}
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <LCD_Init>:


void LCD_Init(void){
	
	// Basic initialization
	LCD_Byte(0x33, LCD_CMD); 
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	83 e3       	ldi	r24, 0x33	; 51
 38a:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_Byte>
	LCD_Byte(0x32, LCD_CMD);
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	82 e3       	ldi	r24, 0x32	; 50
 392:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_Byte>
	 
	// Entry mode, move cursor left to right 
	LCD_Byte(0x06, LCD_CMD); 
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	86 e0       	ldi	r24, 0x06	; 6
 39a:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_Byte>
	
	// Display on, Cursor off, Blink off
	LCD_Byte(0x0C, LCD_CMD); 
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	8c e0       	ldi	r24, 0x0C	; 12
 3a2:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_Byte>
	
	// Set to 4-bit ooperation, 2 lines and 5x7 dots
	LCD_Byte(0x28, LCD_CMD); 
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	88 e2       	ldi	r24, 0x28	; 40
 3aa:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_Byte>
	
	// Clears display and DDRAM
	LCD_Byte(0x01, LCD_CMD); 
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_Byte>
 3b6:	8f e0       	ldi	r24, 0x0F	; 15
 3b8:	97 e2       	ldi	r25, 0x27	; 39
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_Init+0x34>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCD_Init+0x3a>
 3c0:	00 00       	nop
 3c2:	08 95       	ret

000003c4 <LCD_String>:
	Write_Byte(LCD_ADDR, (bits & ~ENABLE));
	_delay_ms(DELAY_MS*5);
		
}

void LCD_String(uint8_t row1[],int row1_elems, uint8_t row2[], int row2_elems){
 3c4:	af 92       	push	r10
 3c6:	bf 92       	push	r11
 3c8:	cf 92       	push	r12
 3ca:	df 92       	push	r13
 3cc:	ef 92       	push	r14
 3ce:	ff 92       	push	r15
 3d0:	0f 93       	push	r16
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	5c 01       	movw	r10, r24
 3da:	7b 01       	movw	r14, r22
 3dc:	6a 01       	movw	r12, r20
 3de:	89 01       	movw	r16, r18
	
	// Command to print on first line
	LCD_Byte(LCD_LINE_1, LCD_CMD);
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	80 e8       	ldi	r24, 0x80	; 128
 3e4:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_Byte>
	
	// Prints the characters on that line
	for(int i = 0; i < row1_elems ;i++){
 3e8:	1e 14       	cp	r1, r14
 3ea:	1f 04       	cpc	r1, r15
 3ec:	54 f4       	brge	.+20     	; 0x402 <LCD_String+0x3e>
 3ee:	e5 01       	movw	r28, r10
 3f0:	ea 0c       	add	r14, r10
 3f2:	fb 1c       	adc	r15, r11
		LCD_Byte(row1[i], LCD_CHR);
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	89 91       	ld	r24, Y+
 3f8:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_Byte>
	
	// Command to print on first line
	LCD_Byte(LCD_LINE_1, LCD_CMD);
	
	// Prints the characters on that line
	for(int i = 0; i < row1_elems ;i++){
 3fc:	ce 15       	cp	r28, r14
 3fe:	df 05       	cpc	r29, r15
 400:	c9 f7       	brne	.-14     	; 0x3f4 <LCD_String+0x30>
		LCD_Byte(row1[i], LCD_CHR);
	}
	
	// Command to print on second line
	LCD_Byte(LCD_LINE_2, LCD_CMD);
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	80 ec       	ldi	r24, 0xC0	; 192
 406:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_Byte>
	
	// Prints the characters on that line
	for(int i = 0; i < row2_elems ;i++){
 40a:	10 16       	cp	r1, r16
 40c:	11 06       	cpc	r1, r17
 40e:	54 f4       	brge	.+20     	; 0x424 <LCD_String+0x60>
 410:	e6 01       	movw	r28, r12
 412:	0c 0d       	add	r16, r12
 414:	1d 1d       	adc	r17, r13
		LCD_Byte(row2[i], LCD_CHR);
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	89 91       	ld	r24, Y+
 41a:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_Byte>
	
	// Command to print on second line
	LCD_Byte(LCD_LINE_2, LCD_CMD);
	
	// Prints the characters on that line
	for(int i = 0; i < row2_elems ;i++){
 41e:	c0 17       	cp	r28, r16
 420:	d1 07       	cpc	r29, r17
 422:	c9 f7       	brne	.-14     	; 0x416 <LCD_String+0x52>
		LCD_Byte(row2[i], LCD_CHR);
	}

}
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	ff 90       	pop	r15
 42e:	ef 90       	pop	r14
 430:	df 90       	pop	r13
 432:	cf 90       	pop	r12
 434:	bf 90       	pop	r11
 436:	af 90       	pop	r10
 438:	08 95       	ret

0000043a <TWI_Master_Init>:


void TWI_Master_Init (void){
	
	//Sets the power reduction register for TWI to 0.
	PRR &= ~(1<<PRTWI);
 43a:	e4 e6       	ldi	r30, 0x64	; 100
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	8f 77       	andi	r24, 0x7F	; 127
 442:	80 83       	st	Z, r24
	
	//Sets the prescaler to 1 by setting TWPS1 and 0 to 0
	TWSR &= ~(1<<TWPS1) & ~(1<<TWPS0); 
 444:	e9 eb       	ldi	r30, 0xB9	; 185
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	8c 7f       	andi	r24, 0xFC	; 252
 44c:	80 83       	st	Z, r24
	
	//Sets the speed of TWI to 100khz
	TWBR = 0x20;
 44e:	80 e2       	ldi	r24, 0x20	; 32
 450:	80 93 b8 00 	sts	0x00B8, r24
		TWWC - Write Collision Flag
		TWEN - Enable Bit
		TWIE - Interrupt Enable

	************************************************************************/
	TWDR = 0xFF;
 454:	8f ef       	ldi	r24, 0xFF	; 255
 456:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (0<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWWC) | (1<<TWIE) | (1<<TWEN);
 45a:	85 e0       	ldi	r24, 0x05	; 5
 45c:	80 93 bc 00 	sts	0x00BC, r24
 460:	08 95       	ret

00000462 <TWI_Busy>:

}

int TWI_Busy(void){
	//Returns 0 if the MCU is busy
	return TWCR & (1<<TWINT);
 462:	80 91 bc 00 	lds	r24, 0x00BC
 466:	80 78       	andi	r24, 0x80	; 128
}
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	08 95       	ret

0000046c <__udivmodsi4>:
 46c:	a1 e2       	ldi	r26, 0x21	; 33
 46e:	1a 2e       	mov	r1, r26
 470:	aa 1b       	sub	r26, r26
 472:	bb 1b       	sub	r27, r27
 474:	fd 01       	movw	r30, r26
 476:	0d c0       	rjmp	.+26     	; 0x492 <__udivmodsi4_ep>

00000478 <__udivmodsi4_loop>:
 478:	aa 1f       	adc	r26, r26
 47a:	bb 1f       	adc	r27, r27
 47c:	ee 1f       	adc	r30, r30
 47e:	ff 1f       	adc	r31, r31
 480:	a2 17       	cp	r26, r18
 482:	b3 07       	cpc	r27, r19
 484:	e4 07       	cpc	r30, r20
 486:	f5 07       	cpc	r31, r21
 488:	20 f0       	brcs	.+8      	; 0x492 <__udivmodsi4_ep>
 48a:	a2 1b       	sub	r26, r18
 48c:	b3 0b       	sbc	r27, r19
 48e:	e4 0b       	sbc	r30, r20
 490:	f5 0b       	sbc	r31, r21

00000492 <__udivmodsi4_ep>:
 492:	66 1f       	adc	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	88 1f       	adc	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	1a 94       	dec	r1
 49c:	69 f7       	brne	.-38     	; 0x478 <__udivmodsi4_loop>
 49e:	60 95       	com	r22
 4a0:	70 95       	com	r23
 4a2:	80 95       	com	r24
 4a4:	90 95       	com	r25
 4a6:	9b 01       	movw	r18, r22
 4a8:	ac 01       	movw	r20, r24
 4aa:	bd 01       	movw	r22, r26
 4ac:	cf 01       	movw	r24, r30
 4ae:	08 95       	ret

000004b0 <__divmodsi4>:
 4b0:	05 2e       	mov	r0, r21
 4b2:	97 fb       	bst	r25, 7
 4b4:	1e f4       	brtc	.+6      	; 0x4bc <__divmodsi4+0xc>
 4b6:	00 94       	com	r0
 4b8:	0e 94 6f 02 	call	0x4de	; 0x4de <__negsi2>
 4bc:	57 fd       	sbrc	r21, 7
 4be:	07 d0       	rcall	.+14     	; 0x4ce <__divmodsi4_neg2>
 4c0:	0e 94 36 02 	call	0x46c	; 0x46c <__udivmodsi4>
 4c4:	07 fc       	sbrc	r0, 7
 4c6:	03 d0       	rcall	.+6      	; 0x4ce <__divmodsi4_neg2>
 4c8:	4e f4       	brtc	.+18     	; 0x4dc <__divmodsi4_exit>
 4ca:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__negsi2>

000004ce <__divmodsi4_neg2>:
 4ce:	50 95       	com	r21
 4d0:	40 95       	com	r20
 4d2:	30 95       	com	r19
 4d4:	21 95       	neg	r18
 4d6:	3f 4f       	sbci	r19, 0xFF	; 255
 4d8:	4f 4f       	sbci	r20, 0xFF	; 255
 4da:	5f 4f       	sbci	r21, 0xFF	; 255

000004dc <__divmodsi4_exit>:
 4dc:	08 95       	ret

000004de <__negsi2>:
 4de:	90 95       	com	r25
 4e0:	80 95       	com	r24
 4e2:	70 95       	com	r23
 4e4:	61 95       	neg	r22
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ea:	9f 4f       	sbci	r25, 0xFF	; 255
 4ec:	08 95       	ret

000004ee <_exit>:
 4ee:	f8 94       	cli

000004f0 <__stop_program>:
 4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <__stop_program>
