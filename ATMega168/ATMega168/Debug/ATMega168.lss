
ATMega168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00000a44  00000ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080015e  0080015e  00000b36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001831  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000767  00000000  00000000  00002571  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000885  00000000  00000000  00002cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003bc  00000000  00000000  00003560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000487  00000000  00000000  0000391c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000095f  00000000  00000000  00003da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00004702  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__vector_14>
  3c:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 35       	cpi	r26, 0x5E	; 94
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e5       	ldi	r26, 0x5E	; 94
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 37       	cpi	r26, 0x79	; 121
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <main>
  9e:	0c 94 20 05 	jmp	0xa40	; 0xa40 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <System_Init>:
#include "SWUART.H"


void System_Init(void){
	
	DirtyDawg.status = 0;
  a6:	ea e6       	ldi	r30, 0x6A	; 106
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	17 82       	std	Z+7, r1	; 0x07
	
	// Enable global interrupt
	sei();
  ac:	78 94       	sei
	// Enable interrupt on PCINT20 (pin 6 on AtMega 168P)
	EICRA = (1<<ISC11);
  ae:	88 e0       	ldi	r24, 0x08	; 8
  b0:	80 93 69 00 	sts	0x0069, r24
	EIMSK = (1<<INT1);
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	8d bb       	out	0x1d, r24	; 29
	PCICR = (1<<PCIE2);
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	80 93 68 00 	sts	0x0068, r24
	PCMSK2 = (1<<PCINT20);
  be:	80 e1       	ldi	r24, 0x10	; 16
  c0:	80 93 6d 00 	sts	0x006D, r24
	
	/*Setting ports - page 75*/
		
	DDRB = (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB3) | (1<<PORTB0); //PB0 is debug greenlight
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	84 b9       	out	0x04, r24	; 4
	DDRD = (1<<PORTD3) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7); //PD7 is debug yellow
  c8:	88 ee       	ldi	r24, 0xE8	; 232
  ca:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	89 e6       	ldi	r24, 0x69	; 105
  d0:	98 e1       	ldi	r25, 0x18	; 24
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <System_Init+0x2c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <System_Init+0x36>
  dc:	00 00       	nop
	
	//Turn on the front and backlights
	_delay_ms(8000);
	PORTB = (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB0);
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	89 e6       	ldi	r24, 0x69	; 105
  e6:	98 e1       	ldi	r25, 0x18	; 24
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <System_Init+0x42>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <System_Init+0x4c>
  f2:	00 00       	nop
	_delay_ms(8000);
	PORTB = (0<<PORTB1) | (0<<PORTB2) | (0<<PORTB0);
  f4:	15 b8       	out	0x05, r1	; 5
	

	//Signs the status
	DirtyDawg.status = MCU_STARTED;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	87 83       	std	Z+7, r24	; 0x07
  fa:	08 95       	ret

000000fc <UART_Init>:
}

void UART_Init(unsigned int baud){
	
	//Set double speed
	UCSR0A = (1<<U2X0);
  fc:	22 e0       	ldi	r18, 0x02	; 2
  fe:	20 93 c0 00 	sts	0x00C0, r18
	
	//Set baudrate
	unsigned int baudrate;
	baudrate = 8000000/8/baud-1;
 102:	9c 01       	movw	r18, r24
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	60 e4       	ldi	r22, 0x40	; 64
 10a:	72 e4       	ldi	r23, 0x42	; 66
 10c:	8f e0       	ldi	r24, 0x0F	; 15
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 ed 04 	call	0x9da	; 0x9da <__divmodsi4>
 114:	21 50       	subi	r18, 0x01	; 1
 116:	31 09       	sbc	r19, r1
	//Double speed use frequency/8/baud
	
	//Set the baudrate in the registry
	UBRR0H = (unsigned char) (baudrate>>8);
 118:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) (baudrate);
 11c:	20 93 c4 00 	sts	0x00C4, r18

	
	//Enables Receive and Transmit over UART
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); //RXCIE and TXCIE for interrupt based UART.
 120:	88 e1       	ldi	r24, 0x18	; 24
 122:	80 93 c1 00 	sts	0x00C1, r24
	
	//Sets to 1 stop bit and 8 databits
	UCSR0C = (0<<USBS0) | (3<<UCSZ00);
 126:	e2 ec       	ldi	r30, 0xC2	; 194
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	86 e0       	ldi	r24, 0x06	; 6
 12c:	80 83       	st	Z, r24
	
	//Disables Parity
	UCSR0C |= (0<<UPM01) | (0<<UPM00);
 12e:	80 81       	ld	r24, Z
 130:	80 83       	st	Z, r24
	
	
	DirtyDawg.status |= UART_STARTED;
 132:	ea e6       	ldi	r30, 0x6A	; 106
 134:	f1 e0       	ldi	r31, 0x01	; 1
 136:	87 81       	ldd	r24, Z+7	; 0x07
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	87 83       	std	Z+7, r24	; 0x07
 13c:	08 95       	ret

0000013e <LCD_Update>:
}

void LCD_Update(void){
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
	
	// Prints the distance to front obstacle
	LCD_Byte(LCD_LINE_1, LCD_CMD);
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	LCD_String("F: ");
 14e:	8c e0       	ldi	r24, 0x0C	; 12
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_String>
 156:	c7 e6       	ldi	r28, 0x67	; 103
 158:	d1 e0       	ldi	r29, 0x01	; 1
 15a:	0a e6       	ldi	r16, 0x6A	; 106
 15c:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
		LCD_Byte(front[i], LCD_CHR);
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	89 91       	ld	r24, Y+
 162:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
void LCD_Update(void){
	
	// Prints the distance to front obstacle
	LCD_Byte(LCD_LINE_1, LCD_CMD);
	LCD_String("F: ");
	for(int i = 0; i < 3; i++)
 166:	c0 17       	cp	r28, r16
 168:	d1 07       	cpc	r29, r17
 16a:	c9 f7       	brne	.-14     	; 0x15e <LCD_Update+0x20>
		LCD_Byte(front[i], LCD_CHR);
	
	// Prints the distance to back obstacle
	LCD_String("  B: ");
 16c:	80 e1       	ldi	r24, 0x10	; 16
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_String>
 174:	ce e5       	ldi	r28, 0x5E	; 94
 176:	d1 e0       	ldi	r29, 0x01	; 1
 178:	01 e6       	ldi	r16, 0x61	; 97
 17a:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
		LCD_Byte(back[i], LCD_CHR);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	89 91       	ld	r24, Y+
 180:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	for(int i = 0; i < 3; i++)
		LCD_Byte(front[i], LCD_CHR);
	
	// Prints the distance to back obstacle
	LCD_String("  B: ");
	for(int i = 0; i < 3; i++)
 184:	c0 17       	cp	r28, r16
 186:	d1 07       	cpc	r29, r17
 188:	c9 f7       	brne	.-14     	; 0x17c <LCD_Update+0x3e>
		LCD_Byte(back[i], LCD_CHR);

	// Prints the distance to left obstacle
	LCD_Byte(LCD_LINE_2, LCD_CMD);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	80 ec       	ldi	r24, 0xC0	; 192
 18e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	LCD_String("L: ");
 192:	86 e1       	ldi	r24, 0x16	; 22
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_String>
 19a:	c4 e6       	ldi	r28, 0x64	; 100
 19c:	d1 e0       	ldi	r29, 0x01	; 1
 19e:	07 e6       	ldi	r16, 0x67	; 103
 1a0:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
		LCD_Byte(left[i], LCD_CHR);
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	89 91       	ld	r24, Y+
 1a6:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
		LCD_Byte(back[i], LCD_CHR);

	// Prints the distance to left obstacle
	LCD_Byte(LCD_LINE_2, LCD_CMD);
	LCD_String("L: ");
	for(int i = 0; i < 3; i++)
 1aa:	c0 17       	cp	r28, r16
 1ac:	d1 07       	cpc	r29, r17
 1ae:	c9 f7       	brne	.-14     	; 0x1a2 <LCD_Update+0x64>
		LCD_Byte(left[i], LCD_CHR);

	// Prints the distance to right obstacle
	LCD_String("  R: ");
 1b0:	8a e1       	ldi	r24, 0x1A	; 26
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_String>
 1b8:	c1 e6       	ldi	r28, 0x61	; 97
 1ba:	d1 e0       	ldi	r29, 0x01	; 1
 1bc:	04 e6       	ldi	r16, 0x64	; 100
 1be:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
		LCD_Byte(right[i], LCD_CHR);
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	89 91       	ld	r24, Y+
 1c4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	for(int i = 0; i < 3; i++)
		LCD_Byte(left[i], LCD_CHR);

	// Prints the distance to right obstacle
	LCD_String("  R: ");
	for(int i = 0; i < 3; i++)
 1c8:	c0 17       	cp	r28, r16
 1ca:	d1 07       	cpc	r29, r17
 1cc:	c9 f7       	brne	.-14     	; 0x1c0 <LCD_Update+0x82>
		LCD_Byte(right[i], LCD_CHR);

	//Change state
	DirtyDawg.state = SEND_DATA_STATE;
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	80 93 72 01 	sts	0x0172, r24
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <Uart_Flush>:

void Uart_Flush(void){
	uint8_t dummy;
	while (UCSR0A & (1<<RXC0)) 
 1de:	80 91 c0 00 	lds	r24, 0x00C0
 1e2:	88 23       	and	r24, r24
 1e4:	44 f4       	brge	.+16     	; 0x1f6 <Uart_Flush+0x18>
		dummy = UDR0;	
 1e6:	a6 ec       	ldi	r26, 0xC6	; 198
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
	DirtyDawg.state = SEND_DATA_STATE;
}

void Uart_Flush(void){
	uint8_t dummy;
	while (UCSR0A & (1<<RXC0)) 
 1ea:	e0 ec       	ldi	r30, 0xC0	; 192
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
		dummy = UDR0;	
 1ee:	8c 91       	ld	r24, X
	DirtyDawg.state = SEND_DATA_STATE;
}

void Uart_Flush(void){
	uint8_t dummy;
	while (UCSR0A & (1<<RXC0)) 
 1f0:	80 81       	ld	r24, Z
 1f2:	88 23       	and	r24, r24
 1f4:	e4 f3       	brlt	.-8      	; 0x1ee <Uart_Flush+0x10>
 1f6:	08 95       	ret

000001f8 <BT_Recieve>:
}

uint8_t BT_Recieve(void){
	
	//Wait for data to be received (wait for flag to be set)
	while(!(UCSR0A & (1<<RXC0)));
 1f8:	e0 ec       	ldi	r30, 0xC0	; 192
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	88 23       	and	r24, r24
 200:	ec f7       	brge	.-6      	; 0x1fc <BT_Recieve+0x4>
	
	//Returns the data from buffer
	return UDR0;
 202:	80 91 c6 00 	lds	r24, 0x00C6
}
 206:	08 95       	ret

00000208 <BT_Send>:
void BT_Send(uint8_t data){
	
	//PORTB = ~(1<<PORTB1);
	//_delay_ms(1000);
	//Waits for the transmit buffer to be empty (wait for flag)
	while(!(UCSR0A & (1<<UDRE0)));
 208:	e0 ec       	ldi	r30, 0xC0	; 192
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	90 81       	ld	r25, Z
 20e:	95 ff       	sbrs	r25, 5
 210:	fd cf       	rjmp	.-6      	; 0x20c <BT_Send+0x4>
	
	//Put data in buffer and sends it
	UDR0 = data;
 212:	80 93 c6 00 	sts	0x00C6, r24
 216:	08 95       	ret

00000218 <BT_Init>:
 218:	2f e3       	ldi	r18, 0x3F	; 63
 21a:	8d e0       	ldi	r24, 0x0D	; 13
 21c:	93 e0       	ldi	r25, 0x03	; 3
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <BT_Init+0x6>
 226:	00 c0       	rjmp	.+0      	; 0x228 <BT_Init+0x10>
 228:	00 00       	nop
int BT_Init(void){
	
	//Wait for 1 second to ensure the device has power
	_delay_ms(1000);

	for(int i = 0; i<3; i++) BT_Send('-');
 22a:	8d e2       	ldi	r24, 0x2D	; 45
 22c:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
 230:	8d e2       	ldi	r24, 0x2D	; 45
 232:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
 236:	8d e2       	ldi	r24, 0x2D	; 45
 238:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
	BT_Send(0x0A); //NL
 23c:	8a e0       	ldi	r24, 0x0A	; 10
 23e:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
	BT_Send(0x0D); //CR
 242:	8d e0       	ldi	r24, 0x0D	; 13
 244:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
 248:	2f e3       	ldi	r18, 0x3F	; 63
 24a:	8d e0       	ldi	r24, 0x0D	; 13
 24c:	93 e0       	ldi	r25, 0x03	; 3
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <BT_Init+0x36>
 256:	00 c0       	rjmp	.+0      	; 0x258 <BT_Init+0x40>
 258:	00 00       	nop
	_delay_ms(1000);
	LCD_Byte(LCD_CLEAR, LCD_CMD);
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
 262:	8b e7       	ldi	r24, 0x7B	; 123
 264:	92 e9       	ldi	r25, 0x92	; 146
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <BT_Init+0x4e>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <BT_Init+0x54>
 26c:	00 00       	nop
	_delay_ms(150); //5 ms delay
	Uart_Flush();
 26e:	0e 94 ef 00 	call	0x1de	; 0x1de <Uart_Flush>
	
	return 0;
}
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	08 95       	ret

00000278 <BT_Connect>:

void BT_Connect(void){
 278:	ef 92       	push	r14
 27a:	ff 92       	push	r15
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	2c 97       	sbiw	r28, 0x0c	; 12
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61
 294:	2f e3       	ldi	r18, 0x3F	; 63
 296:	8d e0       	ldi	r24, 0x0D	; 13
 298:	93 e0       	ldi	r25, 0x03	; 3
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <BT_Connect+0x22>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <BT_Connect+0x2c>
 2a4:	00 00       	nop

	//Wait for 1 second to ensure the device has power
	_delay_ms(1000);

	for(int i = 0; i < 3; i++) BT_Send('-');
 2a6:	8d e2       	ldi	r24, 0x2D	; 45
 2a8:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
 2ac:	8d e2       	ldi	r24, 0x2D	; 45
 2ae:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
 2b2:	8d e2       	ldi	r24, 0x2D	; 45
 2b4:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>

	BT_Send(LF); //Line feed
 2b8:	8a e0       	ldi	r24, 0x0A	; 10
 2ba:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
	BT_Send(CR); //Carriage return
 2be:	8d e0       	ldi	r24, 0x0D	; 13
 2c0:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
 2c4:	ef e3       	ldi	r30, 0x3F	; 63
 2c6:	fd e0       	ldi	r31, 0x0D	; 13
 2c8:	23 e0       	ldi	r18, 0x03	; 3
 2ca:	e1 50       	subi	r30, 0x01	; 1
 2cc:	f0 40       	sbci	r31, 0x00	; 0
 2ce:	20 40       	sbci	r18, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <BT_Connect+0x52>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <BT_Connect+0x5c>
 2d4:	00 00       	nop
	_delay_ms(1000);
	LCD_Byte(LCD_LINE_2 + 1, LCD_CMD);
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	81 ec       	ldi	r24, 0xC1	; 193
 2da:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	LCD_Byte('*', LCD_CHR);
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	8a e2       	ldi	r24, 0x2A	; 42
 2e2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	LCD_Byte(LCD_LINE_2 + 14, LCD_CMD);
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	8e ec       	ldi	r24, 0xCE	; 206
 2ea:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	LCD_Byte('*', LCD_CHR);
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	8a e2       	ldi	r24, 0x2A	; 42
 2f2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
//	_delay_ms(150); //5 ms delay
	Uart_Flush();
 2f6:	0e 94 ef 00 	call	0x1de	; 0x1de <Uart_Flush>

	//Sends command to enter command mode
	for(int i = 0; i < 3; i++) BT_Send('$');
 2fa:	84 e2       	ldi	r24, 0x24	; 36
 2fc:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
 300:	84 e2       	ldi	r24, 0x24	; 36
 302:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
 306:	84 e2       	ldi	r24, 0x24	; 36
 308:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>

	//Sends response to LCD screen
	while(BT_Recieve() != LF);
 30c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <BT_Recieve>
 310:	8a 30       	cpi	r24, 0x0A	; 10
 312:	e1 f7       	brne	.-8      	; 0x30c <BT_Connect+0x94>

	Uart_Flush();
 314:	0e 94 ef 00 	call	0x1de	; 0x1de <Uart_Flush>
		
	// Address to BlueSmirf in the car
	uint8_t adress[12] = {'0','0','0','6','6','6','7','6','A','0','A','A'};
 318:	8c e0       	ldi	r24, 0x0C	; 12
 31a:	e0 e0       	ldi	r30, 0x00	; 0
 31c:	f1 e0       	ldi	r31, 0x01	; 1
 31e:	de 01       	movw	r26, r28
 320:	11 96       	adiw	r26, 0x01	; 1
 322:	01 90       	ld	r0, Z+
 324:	0d 92       	st	X+, r0
 326:	8a 95       	dec	r24
 328:	e1 f7       	brne	.-8      	; 0x322 <BT_Connect+0xaa>
		
	// Command to connect with BlueSmirf in the car
	BT_Send('c');
 32a:	83 e6       	ldi	r24, 0x63	; 99
 32c:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
	BT_Send(',');
 330:	8c e2       	ldi	r24, 0x2C	; 44
 332:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
 336:	8e 01       	movw	r16, r28
 338:	0f 5f       	subi	r16, 0xFF	; 255
 33a:	1f 4f       	sbci	r17, 0xFF	; 255
 33c:	7e 01       	movw	r14, r28
 33e:	8d e0       	ldi	r24, 0x0D	; 13
 340:	e8 0e       	add	r14, r24
 342:	f1 1c       	adc	r15, r1
	for(int i = 0; i < 12;i++){
		BT_Send(adress[i]);
 344:	f8 01       	movw	r30, r16
 346:	81 91       	ld	r24, Z+
 348:	8f 01       	movw	r16, r30
 34a:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
	uint8_t adress[12] = {'0','0','0','6','6','6','7','6','A','0','A','A'};
		
	// Command to connect with BlueSmirf in the car
	BT_Send('c');
	BT_Send(',');
	for(int i = 0; i < 12;i++){
 34e:	0e 15       	cp	r16, r14
 350:	1f 05       	cpc	r17, r15
 352:	c1 f7       	brne	.-16     	; 0x344 <BT_Connect+0xcc>
		BT_Send(adress[i]);
	}
	BT_Send(LF);
 354:	8a e0       	ldi	r24, 0x0A	; 10
 356:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
	BT_Send(CR);
 35a:	8d e0       	ldi	r24, 0x0D	; 13
 35c:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>

	// Ignore the message from BlueSmirf "TRYING"
	while(BT_Recieve() != LF);
 360:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <BT_Recieve>
 364:	8a 30       	cpi	r24, 0x0A	; 10
 366:	e1 f7       	brne	.-8      	; 0x360 <BT_Connect+0xe8>

	// If a good connection, set status
	if(BT_Recieve() == '%')
 368:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <BT_Recieve>
 36c:	85 32       	cpi	r24, 0x25	; 37
 36e:	29 f4       	brne	.+10     	; 0x37a <BT_Connect+0x102>
		DirtyDawg.status |= BT_CONNECTED;
 370:	ea e6       	ldi	r30, 0x6A	; 106
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	87 81       	ldd	r24, Z+7	; 0x07
 376:	88 60       	ori	r24, 0x08	; 8
 378:	87 83       	std	Z+7, r24	; 0x07

	// Ignore the message from BlueSmirf "CONNECTING"
	while(BT_Recieve() != LF);
 37a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <BT_Recieve>
 37e:	8a 30       	cpi	r24, 0x0A	; 10
 380:	e1 f7       	brne	.-8      	; 0x37a <BT_Connect+0x102>

	LCD_Byte(LCD_LINE_2 + 1, LCD_CMD);
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	81 ec       	ldi	r24, 0xC1	; 193
 386:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	LCD_Byte(' ', LCD_CHR);
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	80 e2       	ldi	r24, 0x20	; 32
 38e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	LCD_Byte(LCD_LINE_2 + 14, LCD_CMD);
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	8e ec       	ldi	r24, 0xCE	; 206
 396:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	LCD_Byte(' ', LCD_CHR);
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	80 e2       	ldi	r24, 0x20	; 32
 39e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	
}
 3a2:	2c 96       	adiw	r28, 0x0c	; 12
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	f8 94       	cli
 3a8:	de bf       	out	0x3e, r29	; 62
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	cd bf       	out	0x3d, r28	; 61
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	ff 90       	pop	r15
 3b8:	ef 90       	pop	r14
 3ba:	08 95       	ret

000003bc <BT_Send_Data>:
		ticks++;
	}
}


void BT_Send_Data(void){
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29

//	sputchar( '-' );
//	while( !kbhit() );			// wait until byte received
//	DirtyDawg.accelerometer = sgetchar();
	DirtyDawg.ECG = 100;
 3c0:	ea e6       	ldi	r30, 0x6A	; 106
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	84 e6       	ldi	r24, 0x64	; 100
 3c6:	85 83       	std	Z+5, r24	; 0x05
	
	if(DirtyDawg.accelerometer == 'S')
 3c8:	84 81       	ldd	r24, Z+4	; 0x04
 3ca:	83 35       	cpi	r24, 0x53	; 83
 3cc:	19 f4       	brne	.+6      	; 0x3d4 <BT_Send_Data+0x18>
		DirtyDawg.command |= TURN_LEFT;
 3ce:	86 81       	ldd	r24, Z+6	; 0x06
 3d0:	88 60       	ori	r24, 0x08	; 8
 3d2:	86 83       	std	Z+6, r24	; 0x06
		
	BT_Send(DirtyDawg.command);
 3d4:	ca e6       	ldi	r28, 0x6A	; 106
 3d6:	d1 e0       	ldi	r29, 0x01	; 1
 3d8:	8e 81       	ldd	r24, Y+6	; 0x06
 3da:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
	BT_Send(DirtyDawg.ECG);
 3de:	8d 81       	ldd	r24, Y+5	; 0x05
 3e0:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>
	
	// Clear flags
	// DirtyDawg.command = 0;
	
	//Change state
	DirtyDawg.state = GET_DATA_STATE;
 3e4:	83 e0       	ldi	r24, 0x03	; 3
 3e6:	88 87       	std	Y+8, r24	; 0x08
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <BT_Recieve_Data>:

void BT_Recieve_Data(void){
 3ee:	ef 92       	push	r14
 3f0:	ff 92       	push	r15
 3f2:	0f 93       	push	r16
 3f4:	1f 93       	push	r17
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29

	// Wait for start command
	while(BT_Recieve() != 'S');
 3fa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <BT_Recieve>
 3fe:	83 35       	cpi	r24, 0x53	; 83
 400:	e1 f7       	brne	.-8      	; 0x3fa <BT_Recieve_Data+0xc>

	// Get IR sensor data from the car
	DirtyDawg.front_sensor = BT_Recieve();
 402:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <BT_Recieve>
 406:	ca e6       	ldi	r28, 0x6A	; 106
 408:	d1 e0       	ldi	r29, 0x01	; 1
 40a:	8a 83       	std	Y+2, r24	; 0x02
	DirtyDawg.back_sensor = BT_Recieve();
 40c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <BT_Recieve>
 410:	8b 83       	std	Y+3, r24	; 0x03
	DirtyDawg.left_sensor = BT_Recieve();
 412:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <BT_Recieve>
 416:	88 83       	st	Y, r24
	DirtyDawg.right_sensor = BT_Recieve();
 418:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <BT_Recieve>
 41c:	38 2f       	mov	r19, r24
 41e:	89 83       	std	Y+1, r24	; 0x01

	// Convert sensor value to ASCII
	front[0] = DirtyDawg.front_sensor / 100;
 420:	ea 81       	ldd	r30, Y+2	; 0x02
 422:	29 e2       	ldi	r18, 0x29	; 41
 424:	e2 9f       	mul	r30, r18
 426:	f1 2d       	mov	r31, r1
 428:	11 24       	eor	r1, r1
 42a:	f2 95       	swap	r31
 42c:	ff 70       	andi	r31, 0x0F	; 15
 42e:	0f 2e       	mov	r0, r31
 430:	f7 e6       	ldi	r31, 0x67	; 103
 432:	ef 2e       	mov	r14, r31
 434:	f1 e0       	ldi	r31, 0x01	; 1
 436:	ff 2e       	mov	r15, r31
 438:	f0 2d       	mov	r31, r0
 43a:	d7 01       	movw	r26, r14
 43c:	fc 93       	st	X, r31
	front[1] = (DirtyDawg.front_sensor - (front[0] * 100 )) / 10;
 43e:	4c e9       	ldi	r20, 0x9C	; 156
 440:	5f 2f       	mov	r21, r31
 442:	45 03       	mulsu	r20, r21
 444:	c0 01       	movw	r24, r0
 446:	11 24       	eor	r1, r1
 448:	8e 0f       	add	r24, r30
 44a:	91 1d       	adc	r25, r1
 44c:	0a e0       	ldi	r16, 0x0A	; 10
 44e:	10 e0       	ldi	r17, 0x00	; 0
 450:	b8 01       	movw	r22, r16
 452:	0e 94 b7 04 	call	0x96e	; 0x96e <__divmodhi4>
 456:	d7 01       	movw	r26, r14
 458:	11 96       	adiw	r26, 0x01	; 1
 45a:	6c 93       	st	X, r22
 45c:	11 97       	sbiw	r26, 0x01	; 1
 45e:	f4 9f       	mul	r31, r20
 460:	e0 0d       	add	r30, r0
 462:	11 24       	eor	r1, r1
	front[2] = (DirtyDawg.front_sensor - (front[0] * 100 )) - front[1] * 10;
 464:	66 0f       	add	r22, r22
 466:	86 2f       	mov	r24, r22
 468:	88 0f       	add	r24, r24
 46a:	88 0f       	add	r24, r24
 46c:	68 0f       	add	r22, r24
 46e:	e6 1b       	sub	r30, r22
 470:	12 96       	adiw	r26, 0x02	; 2
 472:	ec 93       	st	X, r30

	back[0] = DirtyDawg.back_sensor / 100;
 474:	eb 81       	ldd	r30, Y+3	; 0x03
 476:	e2 9f       	mul	r30, r18
 478:	f1 2d       	mov	r31, r1
 47a:	11 24       	eor	r1, r1
 47c:	f2 95       	swap	r31
 47e:	ff 70       	andi	r31, 0x0F	; 15
 480:	0f 2e       	mov	r0, r31
 482:	fe e5       	ldi	r31, 0x5E	; 94
 484:	ef 2e       	mov	r14, r31
 486:	f1 e0       	ldi	r31, 0x01	; 1
 488:	ff 2e       	mov	r15, r31
 48a:	f0 2d       	mov	r31, r0
 48c:	d7 01       	movw	r26, r14
 48e:	fc 93       	st	X, r31
	back[1] = (DirtyDawg.back_sensor - (back[0] * 100 )) / 10;
 490:	5f 2f       	mov	r21, r31
 492:	45 03       	mulsu	r20, r21
 494:	c0 01       	movw	r24, r0
 496:	11 24       	eor	r1, r1
 498:	8e 0f       	add	r24, r30
 49a:	91 1d       	adc	r25, r1
 49c:	b8 01       	movw	r22, r16
 49e:	0e 94 b7 04 	call	0x96e	; 0x96e <__divmodhi4>
 4a2:	d7 01       	movw	r26, r14
 4a4:	11 96       	adiw	r26, 0x01	; 1
 4a6:	6c 93       	st	X, r22
 4a8:	11 97       	sbiw	r26, 0x01	; 1
 4aa:	f4 9f       	mul	r31, r20
 4ac:	e0 0d       	add	r30, r0
 4ae:	11 24       	eor	r1, r1
	back[2] = (DirtyDawg.back_sensor - (back[0] * 100 )) - back[1] * 10;
 4b0:	66 0f       	add	r22, r22
 4b2:	86 2f       	mov	r24, r22
 4b4:	88 0f       	add	r24, r24
 4b6:	88 0f       	add	r24, r24
 4b8:	68 0f       	add	r22, r24
 4ba:	e6 1b       	sub	r30, r22
 4bc:	12 96       	adiw	r26, 0x02	; 2
 4be:	ec 93       	st	X, r30

	left[0] = DirtyDawg.left_sensor / 100;
 4c0:	e8 81       	ld	r30, Y
 4c2:	e2 9f       	mul	r30, r18
 4c4:	f1 2d       	mov	r31, r1
 4c6:	11 24       	eor	r1, r1
 4c8:	f2 95       	swap	r31
 4ca:	ff 70       	andi	r31, 0x0F	; 15
 4cc:	c4 e6       	ldi	r28, 0x64	; 100
 4ce:	d1 e0       	ldi	r29, 0x01	; 1
 4d0:	f8 83       	st	Y, r31
	left[1] = (DirtyDawg.left_sensor - (left[0] * 100 )) / 10;
 4d2:	5f 2f       	mov	r21, r31
 4d4:	45 03       	mulsu	r20, r21
 4d6:	c0 01       	movw	r24, r0
 4d8:	11 24       	eor	r1, r1
 4da:	8e 0f       	add	r24, r30
 4dc:	91 1d       	adc	r25, r1
 4de:	b8 01       	movw	r22, r16
 4e0:	0e 94 b7 04 	call	0x96e	; 0x96e <__divmodhi4>
 4e4:	69 83       	std	Y+1, r22	; 0x01
 4e6:	f4 9f       	mul	r31, r20
 4e8:	e0 0d       	add	r30, r0
 4ea:	11 24       	eor	r1, r1
	left[2] = (DirtyDawg.left_sensor - (left[0] * 100 )) - left[1] * 10;
 4ec:	66 0f       	add	r22, r22
 4ee:	86 2f       	mov	r24, r22
 4f0:	88 0f       	add	r24, r24
 4f2:	88 0f       	add	r24, r24
 4f4:	68 0f       	add	r22, r24
 4f6:	e6 1b       	sub	r30, r22
 4f8:	ea 83       	std	Y+2, r30	; 0x02

	right[0] = DirtyDawg.right_sensor / 100;
 4fa:	32 9f       	mul	r19, r18
 4fc:	21 2d       	mov	r18, r1
 4fe:	11 24       	eor	r1, r1
 500:	22 95       	swap	r18
 502:	2f 70       	andi	r18, 0x0F	; 15
 504:	e1 e6       	ldi	r30, 0x61	; 97
 506:	f1 e0       	ldi	r31, 0x01	; 1
 508:	20 83       	st	Z, r18
	right[1] = (DirtyDawg.right_sensor - (right[0] * 100 )) / 10;
 50a:	42 03       	mulsu	r20, r18
 50c:	c0 01       	movw	r24, r0
 50e:	11 24       	eor	r1, r1
 510:	83 0f       	add	r24, r19
 512:	91 1d       	adc	r25, r1
 514:	b8 01       	movw	r22, r16
 516:	0e 94 b7 04 	call	0x96e	; 0x96e <__divmodhi4>
 51a:	61 83       	std	Z+1, r22	; 0x01
 51c:	24 9f       	mul	r18, r20
 51e:	30 0d       	add	r19, r0
 520:	11 24       	eor	r1, r1
	right[2] = (DirtyDawg.right_sensor - (right[0] * 100 )) - right[1] * 10;
 522:	66 0f       	add	r22, r22
 524:	86 2f       	mov	r24, r22
 526:	88 0f       	add	r24, r24
 528:	88 0f       	add	r24, r24
 52a:	68 0f       	add	r22, r24
 52c:	36 1b       	sub	r19, r22
 52e:	32 83       	std	Z+2, r19	; 0x02
 530:	e7 e6       	ldi	r30, 0x67	; 103
 532:	f1 e0       	ldi	r31, 0x01	; 1
 534:	97 01       	movw	r18, r14
 536:	61 e6       	ldi	r22, 0x61	; 97
 538:	71 e0       	ldi	r23, 0x01	; 1
 53a:	4a e6       	ldi	r20, 0x6A	; 106
 53c:	51 e0       	ldi	r21, 0x01	; 1

	for(int i = 0; i < 3; i++){
		front[i] += '0';
 53e:	80 81       	ld	r24, Z
 540:	80 5d       	subi	r24, 0xD0	; 208
 542:	81 93       	st	Z+, r24
		back[i] += '0';
 544:	d9 01       	movw	r26, r18
 546:	8c 91       	ld	r24, X
 548:	80 5d       	subi	r24, 0xD0	; 208
 54a:	8d 93       	st	X+, r24
 54c:	9d 01       	movw	r18, r26
		left[i] += '0';
 54e:	88 81       	ld	r24, Y
 550:	80 5d       	subi	r24, 0xD0	; 208
 552:	89 93       	st	Y+, r24
		right[i] += '0';
 554:	db 01       	movw	r26, r22
 556:	8c 91       	ld	r24, X
 558:	80 5d       	subi	r24, 0xD0	; 208
 55a:	8d 93       	st	X+, r24
 55c:	bd 01       	movw	r22, r26

	right[0] = DirtyDawg.right_sensor / 100;
	right[1] = (DirtyDawg.right_sensor - (right[0] * 100 )) / 10;
	right[2] = (DirtyDawg.right_sensor - (right[0] * 100 )) - right[1] * 10;

	for(int i = 0; i < 3; i++){
 55e:	e4 17       	cp	r30, r20
 560:	f5 07       	cpc	r31, r21
 562:	69 f7       	brne	.-38     	; 0x53e <__stack+0x3f>
		left[i] += '0';
		right[i] += '0';
	}

	// Change state 
	DirtyDawg.state = LCD_STATE;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	80 93 72 01 	sts	0x0172, r24
}
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	1f 91       	pop	r17
 570:	0f 91       	pop	r16
 572:	ff 90       	pop	r15
 574:	ef 90       	pop	r14
 576:	08 95       	ret

00000578 <Yellow_LED_On>:

// Lights for debugging reason
void Yellow_LED_On(void){
	PORTD |= (1<<PORTD7);
 578:	5f 9a       	sbi	0x0b, 7	; 11
 57a:	08 95       	ret

0000057c <Red_LED_On>:
void Yellow_LED_Off(void){
	PORTD &= (0<<PORTD7);
}

void Red_LED_On(void){
	PORTB |= (1<<PORTB1);
 57c:	29 9a       	sbi	0x05, 1	; 5
 57e:	08 95       	ret

00000580 <Error>:

void Error(unsigned int errorcode){
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
	LCD_Byte(LCD_CLEAR, LCD_CMD);
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	LCD_Byte(LCD_LINE_1 + 5, LCD_CMD);
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	85 e8       	ldi	r24, 0x85	; 133
 58c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	LCD_String("Error");
 590:	80 e2       	ldi	r24, 0x20	; 32
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_String>
}

void Error(unsigned int errorcode){
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
 598:	c1 2c       	mov	r12, r1
 59a:	d1 2c       	mov	r13, r1
 59c:	76 01       	movw	r14, r12
	LCD_Byte(LCD_CLEAR, LCD_CMD);
	LCD_Byte(LCD_LINE_1 + 5, LCD_CMD);
	LCD_String("Error");
	for(;;){
		if(ticks%10000 == 0){
 59e:	0f 2e       	mov	r0, r31
 5a0:	f0 e1       	ldi	r31, 0x10	; 16
 5a2:	8f 2e       	mov	r8, r31
 5a4:	f7 e2       	ldi	r31, 0x27	; 39
 5a6:	9f 2e       	mov	r9, r31
 5a8:	a1 2c       	mov	r10, r1
 5aa:	b1 2c       	mov	r11, r1
 5ac:	f0 2d       	mov	r31, r0
 5ae:	c7 01       	movw	r24, r14
 5b0:	b6 01       	movw	r22, r12
 5b2:	a5 01       	movw	r20, r10
 5b4:	94 01       	movw	r18, r8
 5b6:	0e 94 cb 04 	call	0x996	; 0x996 <__udivmodsi4>
 5ba:	67 2b       	or	r22, r23
 5bc:	68 2b       	or	r22, r24
 5be:	69 2b       	or	r22, r25
 5c0:	11 f4       	brne	.+4      	; 0x5c6 <Error+0x46>
			Red_LED_On();
 5c2:	0e 94 be 02 	call	0x57c	; 0x57c <Red_LED_On>
		}
		if(ticks%10000 == 50000){
			Red_LED_Off();
		}
		ticks++;
 5c6:	8f ef       	ldi	r24, 0xFF	; 255
 5c8:	c8 1a       	sub	r12, r24
 5ca:	d8 0a       	sbc	r13, r24
 5cc:	e8 0a       	sbc	r14, r24
 5ce:	f8 0a       	sbc	r15, r24
	}
 5d0:	ee cf       	rjmp	.-36     	; 0x5ae <Error+0x2e>

000005d2 <main>:
#define ARR_SIZE(x)  (sizeof(x) / sizeof(x[0]))

int main(void){

	// Sets the starting state
	DirtyDawg.state = LCD_STATE;
 5d2:	ca e6       	ldi	r28, 0x6A	; 106
 5d4:	d1 e0       	ldi	r29, 0x01	; 1
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	88 87       	std	Y+8, r24	; 0x08

	// Initiate the hardware
	System_Init();
 5da:	0e 94 53 00 	call	0xa6	; 0xa6 <System_Init>
	
	// Initiate the TWI bus as a master
	TWI_Master_Init();
 5de:	0e 94 9e 04 	call	0x93c	; 0x93c <TWI_Master_Init>

	// Initiate the LCD Screen
	LCD_Init();
 5e2:	0e 94 6f 04 	call	0x8de	; 0x8de <LCD_Init>
	
	// Initiate the hardware defined UART
	UART_Init(19200);
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	9b e4       	ldi	r25, 0x4B	; 75
 5ea:	0e 94 7e 00 	call	0xfc	; 0xfc <UART_Init>
	
	// Initiate the software define UART
	suart_init();
 5ee:	0e 94 6d 03 	call	0x6da	; 0x6da <suart_init>
	
	// Initiate/Clear the BlueSmirf from previous commands
	BT_Init();
 5f2:	0e 94 0c 01 	call	0x218	; 0x218 <BT_Init>
	
	// Connect the BlueSmirf to the car
	LCD_Byte(LCD_LINE_1 + 3, LCD_CMD);
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	83 e8       	ldi	r24, 0x83	; 131
 5fa:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	LCD_String("DirtyDawg!");
 5fe:	86 e2       	ldi	r24, 0x26	; 38
 600:	91 e0       	ldi	r25, 0x01	; 1
 602:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_String>
	LCD_Byte(LCD_LINE_2 + 3, LCD_CMD);
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	83 ec       	ldi	r24, 0xC3	; 195
 60a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	LCD_String("Connecting");
 60e:	81 e3       	ldi	r24, 0x31	; 49
 610:	91 e0       	ldi	r25, 0x01	; 1
 612:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_String>
	while(!(DirtyDawg.status & BT_CONNECTED))
 616:	8f 81       	ldd	r24, Y+7	; 0x07
 618:	83 fd       	sbrc	r24, 3
 61a:	05 c0       	rjmp	.+10     	; 0x626 <main+0x54>
		BT_Connect();
 61c:	0e 94 3c 01 	call	0x278	; 0x278 <BT_Connect>
	// Connect the BlueSmirf to the car
	LCD_Byte(LCD_LINE_1 + 3, LCD_CMD);
	LCD_String("DirtyDawg!");
	LCD_Byte(LCD_LINE_2 + 3, LCD_CMD);
	LCD_String("Connecting");
	while(!(DirtyDawg.status & BT_CONNECTED))
 620:	8f 81       	ldd	r24, Y+7	; 0x07
 622:	83 ff       	sbrs	r24, 3
 624:	fb cf       	rjmp	.-10     	; 0x61c <main+0x4a>
			count = 0;
		}
	}
*/
	// When active connection send '=' to car 
	BT_Send('=');
 626:	8d e3       	ldi	r24, 0x3D	; 61
 628:	0e 94 04 01 	call	0x208	; 0x208 <BT_Send>

	// Prepare the LCD for distance data
	LCD_Byte(LCD_LINE_1, LCD_CMD);
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	80 e8       	ldi	r24, 0x80	; 128
 630:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	LCD_String(ROW1);
 634:	8c e3       	ldi	r24, 0x3C	; 60
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_String>
	LCD_Byte(LCD_LINE_2, LCD_CMD);
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	80 ec       	ldi	r24, 0xC0	; 192
 640:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	LCD_String(ROW2);
 644:	8d e4       	ldi	r24, 0x4D	; 77
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_String>

	// Main loop
	while(TRUE){
		
		switch(DirtyDawg.state){
 64c:	ca e6       	ldi	r28, 0x6A	; 106
 64e:	d1 e0       	ldi	r29, 0x01	; 1
 650:	88 85       	ldd	r24, Y+8	; 0x08
 652:	82 30       	cpi	r24, 0x02	; 2
 654:	39 f0       	breq	.+14     	; 0x664 <main+0x92>
 656:	83 30       	cpi	r24, 0x03	; 3
 658:	41 f0       	breq	.+16     	; 0x66a <main+0x98>
 65a:	81 30       	cpi	r24, 0x01	; 1
 65c:	49 f4       	brne	.+18     	; 0x670 <main+0x9e>
			
			case LCD_STATE:
				LCD_Update();
 65e:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Update>
				break;
 662:	f6 cf       	rjmp	.-20     	; 0x650 <main+0x7e>
			
			case SEND_DATA_STATE:
				BT_Send_Data();
 664:	0e 94 de 01 	call	0x3bc	; 0x3bc <BT_Send_Data>
				break;
 668:	f3 cf       	rjmp	.-26     	; 0x650 <main+0x7e>

			case GET_DATA_STATE:
				BT_Recieve_Data();
 66a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <BT_Recieve_Data>
				break;
 66e:	f0 cf       	rjmp	.-32     	; 0x650 <main+0x7e>
				
			default:
				Yellow_LED_On();
 670:	0e 94 bc 02 	call	0x578	; 0x578 <Yellow_LED_On>
				Error(0x53);
 674:	83 e5       	ldi	r24, 0x53	; 83
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 c0 02 	call	0x580	; 0x580 <Error>
 67c:	e9 cf       	rjmp	.-46     	; 0x650 <main+0x7e>

0000067e <__vector_5>:
			
		}
	}	
}

ISR(PCINT2_vect){
 67e:	1f 92       	push	r1
 680:	0f 92       	push	r0
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	0f 92       	push	r0
 686:	11 24       	eor	r1, r1
 688:	2f 93       	push	r18
 68a:	8f 93       	push	r24
 68c:	9f 93       	push	r25
 68e:	ef 93       	push	r30
 690:	ff 93       	push	r31
	if(DirtyDawg.status & LIGHT_BUTTON){
 692:	80 91 71 01 	lds	r24, 0x0171
 696:	84 ff       	sbrs	r24, 4
 698:	09 c0       	rjmp	.+18     	; 0x6ac <__vector_5+0x2e>
		DirtyDawg.command ^= LIGHT;
 69a:	ea e6       	ldi	r30, 0x6A	; 106
 69c:	f1 e0       	ldi	r31, 0x01	; 1
 69e:	26 81       	ldd	r18, Z+6	; 0x06
 6a0:	91 e0       	ldi	r25, 0x01	; 1
 6a2:	92 27       	eor	r25, r18
 6a4:	96 83       	std	Z+6, r25	; 0x06
		DirtyDawg.status &= ~LIGHT_BUTTON;
 6a6:	80 7e       	andi	r24, 0xE0	; 224
 6a8:	87 83       	std	Z+7, r24	; 0x07
 6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <__vector_5+0x34>
	}
	else
		DirtyDawg.status |= LIGHT_BUTTON;
 6ac:	80 61       	ori	r24, 0x10	; 16
 6ae:	80 93 71 01 	sts	0x0171, r24
}
 6b2:	ff 91       	pop	r31
 6b4:	ef 91       	pop	r30
 6b6:	9f 91       	pop	r25
 6b8:	8f 91       	pop	r24
 6ba:	2f 91       	pop	r18
 6bc:	0f 90       	pop	r0
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	0f 90       	pop	r0
 6c2:	1f 90       	pop	r1
 6c4:	18 95       	reti

000006c6 <__vector_18>:
	BT_Connect();
}

*/

ISR(USART_RX_vect){
 6c6:	1f 92       	push	r1
 6c8:	0f 92       	push	r0
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	0f 92       	push	r0
 6ce:	11 24       	eor	r1, r1
		DirtyDawg.front_sensor = BT_Recieve();
		DirtyDawg.back_sensor = BT_Recieve();
		DirtyDawg.left_sensor = BT_Recieve();
		DirtyDawg.right_sensor = BT_Recieve();
	} */
}
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	0f 90       	pop	r0
 6d6:	1f 90       	pop	r1
 6d8:	18 95       	reti

000006da <suart_init>:


void suart_init( void )
{
	// Enable interrupt
	sei();
 6da:	78 94       	sei
	
	// Set the port HIGH
	SBIT(PORTD,STX) = 1;
 6dc:	5b 9a       	sbi	0x0b, 3	; 11

	// Set the prescaler to 1
	TCCR0B = (1 << CS00);	
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	85 bd       	out	0x25, r24	; 37
	
	// Enable output compare interrupt
	TIMSK0 = (1 << OCIE0A);		
 6e2:	92 e0       	ldi	r25, 0x02	; 2
 6e4:	90 93 6e 00 	sts	0x006E, r25

	// Falling edge
	EICRA = (1 << ISC01);
 6e8:	90 93 69 00 	sts	0x0069, r25
	
	// Enable edge interrupt			
	EIMSK = (1 << INT0);			
 6ec:	8d bb       	out	0x1d, r24	; 29

	// Nothing to send
	stx_count = 0;	
 6ee:	10 92 76 01 	sts	0x0176, r1
	
	// Nothing to receive			
	srx_done = 0;	
 6f2:	10 92 77 01 	sts	0x0177, r1
	
	// Sets the output	        
	STXDDR |= 1 << STX;			
 6f6:	53 9a       	sbi	0x0a, 3	; 10
 6f8:	08 95       	ret

000006fa <__vector_1>:
	return srx_data;
}


ISR (INT0_vect)    // RX start
{
 6fa:	1f 92       	push	r1
 6fc:	0f 92       	push	r0
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	0f 92       	push	r0
 702:	11 24       	eor	r1, r1
 704:	8f 93       	push	r24
	// scan 1.5 bits after start (to set timing right)
	OCR0B = TCNT0 + (u8)((BIT_TIME * 3) / 2);
 706:	86 b5       	in	r24, 0x26	; 38
 708:	80 53       	subi	r24, 0x30	; 48
 70a:	88 bd       	out	0x28, r24	; 40

	// Clear bit storage
	srx_tmp = 0;  
 70c:	10 92 78 01 	sts	0x0178, r1
	
	// Set bit-mask      
	srx_mask = 1;        
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	80 93 74 01 	sts	0x0174, r24
	if( !(SRXPIN & 1<<SRX))  {  // still low
 716:	4a 99       	sbic	0x09, 2	; 9
 718:	04 c0       	rjmp	.+8      	; 0x722 <__vector_1+0x28>
		EIMSK &= ~(1 << INT0);			// disable edge interrupt
 71a:	e8 98       	cbi	0x1d, 0	; 29
		TIMSK0 = 1<<OCIE0A^1<<OCIE0B;  // wait for first bit
 71c:	86 e0       	ldi	r24, 0x06	; 6
 71e:	80 93 6e 00 	sts	0x006E, r24
	}
	TIFR0 = (1<<OCF0B);      // clear pending interrupt ? why does that output compare int occur?
 722:	84 e0       	ldi	r24, 0x04	; 4
 724:	85 bb       	out	0x15, r24	; 21
	EIFR |= (1 << INTF0);		// clear any pending edge interrupt
 726:	e0 9a       	sbi	0x1c, 0	; 28
}
 728:	8f 91       	pop	r24
 72a:	0f 90       	pop	r0
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	0f 90       	pop	r0
 730:	1f 90       	pop	r1
 732:	18 95       	reti

00000734 <__vector_15>:


ISR (TIMER0_COMPB_vect)
{
 734:	1f 92       	push	r1
 736:	0f 92       	push	r0
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	0f 92       	push	r0
 73c:	11 24       	eor	r1, r1
 73e:	8f 93       	push	r24
 740:	9f 93       	push	r25
	u8 in = SRXPIN;      // scan RX line
 742:	99 b1       	in	r25, 0x09	; 9

	if (srx_mask) {
 744:	80 91 74 01 	lds	r24, 0x0174
 748:	88 23       	and	r24, r24
 74a:	71 f0       	breq	.+28     	; 0x768 <__vector_15+0x34>
		if (in & 1 << SRX)
 74c:	92 ff       	sbrs	r25, 2
 74e:	05 c0       	rjmp	.+10     	; 0x75a <__vector_15+0x26>
			srx_tmp |= srx_mask;
 750:	90 91 78 01 	lds	r25, 0x0178
 754:	98 2b       	or	r25, r24
 756:	90 93 78 01 	sts	0x0178, r25
		srx_mask <<= 1; 
 75a:	88 0f       	add	r24, r24
 75c:	80 93 74 01 	sts	0x0174, r24
		OCR0B += BIT_TIME;      // next bit slice
 760:	88 b5       	in	r24, 0x28	; 40
 762:	85 57       	subi	r24, 0x75	; 117
 764:	88 bd       	out	0x28, r24	; 40
 766:	0c c0       	rjmp	.+24     	; 0x780 <__vector_15+0x4c>
		} else {
		srx_done = 1;      // mark RX data valid
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	80 93 77 01 	sts	0x0177, r24
		srx_data = srx_tmp;      // store RX data
 76e:	90 91 78 01 	lds	r25, 0x0178
 772:	90 93 75 01 	sts	0x0175, r25

		TIMSK0 = 1<<OCIE0A;        // enable TX and wait for start
 776:	92 e0       	ldi	r25, 0x02	; 2
 778:	90 93 6e 00 	sts	0x006E, r25
		EIFR |= (1 << INTF0);		// clear any pending edge interrupt: This hinders the in0-vect from beeing triggerd again just now which may occur by falling edges in the serial data bits
 77c:	e0 9a       	sbi	0x1c, 0	; 28
		EIMSK = 1 << INT0;	// Re-enable edge interrupt
 77e:	8d bb       	out	0x1d, r24	; 29
	}

}
 780:	9f 91       	pop	r25
 782:	8f 91       	pop	r24
 784:	0f 90       	pop	r0
 786:	0f be       	out	0x3f, r0	; 63
 788:	0f 90       	pop	r0
 78a:	1f 90       	pop	r1
 78c:	18 95       	reti

0000078e <__vector_14>:
	sputchar (*txt++);
}


ISR (TIMER0_COMPA_vect)    // TX bit
{
 78e:	1f 92       	push	r1
 790:	0f 92       	push	r0
 792:	0f b6       	in	r0, 0x3f	; 63
 794:	0f 92       	push	r0
 796:	11 24       	eor	r1, r1
 798:	8f 93       	push	r24
 79a:	9f 93       	push	r25
	u8 dout;
	u8 count;

	OCR0A += BIT_TIME;      // Next bit slice
 79c:	87 b5       	in	r24, 0x27	; 39
 79e:	85 57       	subi	r24, 0x75	; 117
 7a0:	87 bd       	out	0x27, r24	; 39
	count = stx_count;
 7a2:	80 91 76 01 	lds	r24, 0x0176

	if (count) {
 7a6:	88 23       	and	r24, r24
 7a8:	99 f0       	breq	.+38     	; 0x7d0 <__vector_14+0x42>
		stx_count = --count;    // Count down
 7aa:	81 50       	subi	r24, 0x01	; 1
 7ac:	80 93 76 01 	sts	0x0176, r24

		dout = 0;
		if (count != 9) {      // No start bit
 7b0:	89 30       	cpi	r24, 0x09	; 9
 7b2:	49 f0       	breq	.+18     	; 0x7c6 <__vector_14+0x38>
			if (!(stx_data & 1))    // Test inverted data
 7b4:	80 91 73 01 	lds	r24, 0x0173
 7b8:	98 2f       	mov	r25, r24
 7ba:	90 95       	com	r25
 7bc:	91 70       	andi	r25, 0x01	; 1

			dout = 1;
			stx_data >>= 1;      // Shift zero in from left
 7be:	86 95       	lsr	r24
 7c0:	80 93 73 01 	sts	0x0173, r24
 7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <__vector_14+0x3a>
	count = stx_count;

	if (count) {
		stx_count = --count;    // Count down

		dout = 0;
 7c6:	90 e0       	ldi	r25, 0x00	; 0

			dout = 1;
			stx_data >>= 1;      // Shift zero in from left
		}

		SBIT(PORTD,STX) = dout;
 7c8:	90 fd       	sbrc	r25, 0
 7ca:	5b 9a       	sbi	0x0b, 3	; 11
 7cc:	90 ff       	sbrs	r25, 0
 7ce:	5b 98       	cbi	0x0b, 3	; 11
	}
}
 7d0:	9f 91       	pop	r25
 7d2:	8f 91       	pop	r24
 7d4:	0f 90       	pop	r0
 7d6:	0f be       	out	0x3f, r0	; 63
 7d8:	0f 90       	pop	r0
 7da:	1f 90       	pop	r1
 7dc:	18 95       	reti

000007de <Write_Byte>:
	Write_Byte(LCD_ADDR, (bits & ~ENABLE));
	_delay_ms(5);
		
}

void Write_Byte(uint8_t addr, uint8_t bits){
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
 7e2:	c8 2f       	mov	r28, r24
 7e4:	d6 2f       	mov	r29, r22
			
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 7e6:	84 ea       	ldi	r24, 0xA4	; 164
 7e8:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 7ec:	0e 94 b2 04 	call	0x964	; 0x964 <TWI_Busy>
 7f0:	89 2b       	or	r24, r25
 7f2:	e1 f3       	breq	.-8      	; 0x7ec <Write_Byte+0xe>
	if((TWSR & MASK) != START)Error(START);
 7f4:	80 91 b9 00 	lds	r24, 0x00B9
 7f8:	88 7f       	andi	r24, 0xF8	; 248
 7fa:	88 30       	cpi	r24, 0x08	; 8
 7fc:	21 f0       	breq	.+8      	; 0x806 <Write_Byte+0x28>
 7fe:	88 e0       	ldi	r24, 0x08	; 8
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	0e 94 c0 02 	call	0x580	; 0x580 <Error>
		
	//Loads the slave address and set the R/W bit to 0
	TWDR = (addr<<1) | LCD_WRITE;
 806:	cc 0f       	add	r28, r28
 808:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN); 
 80c:	84 e8       	ldi	r24, 0x84	; 132
 80e:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 812:	0e 94 b2 04 	call	0x964	; 0x964 <TWI_Busy>
 816:	89 2b       	or	r24, r25
 818:	e1 f3       	breq	.-8      	; 0x812 <Write_Byte+0x34>
	if((TWSR & MASK) !=  MT_ADDRESS_ACK)Error((TWSR & MASK));
 81a:	80 91 b9 00 	lds	r24, 0x00B9
 81e:	88 7f       	andi	r24, 0xF8	; 248
 820:	88 31       	cpi	r24, 0x18	; 24
 822:	31 f0       	breq	.+12     	; 0x830 <Write_Byte+0x52>
 824:	80 91 b9 00 	lds	r24, 0x00B9
 828:	88 7f       	andi	r24, 0xF8	; 248
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 c0 02 	call	0x580	; 0x580 <Error>
		
	//Sends the data to the slave
	TWDR = bits; //4bits
 830:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
 834:	84 e8       	ldi	r24, 0x84	; 132
 836:	80 93 bc 00 	sts	0x00BC, r24
	
	while(!TWI_Busy());
 83a:	0e 94 b2 04 	call	0x964	; 0x964 <TWI_Busy>
 83e:	89 2b       	or	r24, r25
 840:	e1 f3       	breq	.-8      	; 0x83a <Write_Byte+0x5c>
	if((TWSR & MASK) !=  MT_BYTE_ACK)Error((TWSR & MASK));
 842:	80 91 b9 00 	lds	r24, 0x00B9
 846:	88 7f       	andi	r24, 0xF8	; 248
 848:	88 32       	cpi	r24, 0x28	; 40
 84a:	31 f0       	breq	.+12     	; 0x858 <Write_Byte+0x7a>
 84c:	80 91 b9 00 	lds	r24, 0x00B9
 850:	88 7f       	andi	r24, 0xF8	; 248
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	0e 94 c0 02 	call	0x580	; 0x580 <Error>
		
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 858:	84 e9       	ldi	r24, 0x94	; 148
 85a:	80 93 bc 00 	sts	0x00BC, r24
	
}
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	08 95       	ret

00000864 <LCD_Toggle_enable>:
	Write_Byte(LCD_ADDR, bits_low);
	LCD_Toggle_enable(bits_low);
	
}

void LCD_Toggle_enable(uint8_t bits){
 864:	cf 93       	push	r28
 866:	c8 2f       	mov	r28, r24
 868:	81 ee       	ldi	r24, 0xE1	; 225
 86a:	94 e0       	ldi	r25, 0x04	; 4
 86c:	01 97       	sbiw	r24, 0x01	; 1
 86e:	f1 f7       	brne	.-4      	; 0x86c <LCD_Toggle_enable+0x8>
 870:	00 c0       	rjmp	.+0      	; 0x872 <LCD_Toggle_enable+0xe>
 872:	00 00       	nop
	
	// Toggles the enable pin on the display to activate the code
//	_delay_ms(DELAY_MS*5);
	_delay_ms(5);
	Write_Byte(LCD_ADDR, (bits | ENABLE));
 874:	6c 2f       	mov	r22, r28
 876:	64 60       	ori	r22, 0x04	; 4
 878:	87 e2       	ldi	r24, 0x27	; 39
 87a:	0e 94 ef 03 	call	0x7de	; 0x7de <Write_Byte>
 87e:	81 ee       	ldi	r24, 0xE1	; 225
 880:	94 e0       	ldi	r25, 0x04	; 4
 882:	01 97       	sbiw	r24, 0x01	; 1
 884:	f1 f7       	brne	.-4      	; 0x882 <LCD_Toggle_enable+0x1e>
 886:	00 c0       	rjmp	.+0      	; 0x888 <LCD_Toggle_enable+0x24>
 888:	00 00       	nop
	_delay_ms(5);
	Write_Byte(LCD_ADDR, (bits & ~ENABLE));
 88a:	6c 2f       	mov	r22, r28
 88c:	6b 7f       	andi	r22, 0xFB	; 251
 88e:	87 e2       	ldi	r24, 0x27	; 39
 890:	0e 94 ef 03 	call	0x7de	; 0x7de <Write_Byte>
 894:	81 ee       	ldi	r24, 0xE1	; 225
 896:	94 e0       	ldi	r25, 0x04	; 4
 898:	01 97       	sbiw	r24, 0x01	; 1
 89a:	f1 f7       	brne	.-4      	; 0x898 <LCD_Toggle_enable+0x34>
 89c:	00 c0       	rjmp	.+0      	; 0x89e <LCD_Toggle_enable+0x3a>
 89e:	00 00       	nop
	_delay_ms(5);
		
}
 8a0:	cf 91       	pop	r28
 8a2:	08 95       	ret

000008a4 <LCD_Byte>:
	LCD_Byte(0x01, LCD_CMD); 
	_delay_ms(DELAY_MS*5); //5 ms delay
	
}

void LCD_Byte(uint8_t bits, uint8_t mode){
 8a4:	cf 93       	push	r28
 8a6:	df 93       	push	r29
 8a8:	c6 2f       	mov	r28, r22
 8aa:	c8 60       	ori	r28, 0x08	; 8
	
	uint8_t bits_high, bits_low;
	
	//Divides the data in two 4 bit values
	bits_high = mode | (bits & 0xF0) | LCD_BACKLIGHT;
 8ac:	d8 2f       	mov	r29, r24
 8ae:	d0 7f       	andi	r29, 0xF0	; 240
 8b0:	dc 2b       	or	r29, r28
	bits_low = mode | ((bits<<4) & 0xF0) | LCD_BACKLIGHT;
 8b2:	90 e1       	ldi	r25, 0x10	; 16
 8b4:	89 9f       	mul	r24, r25
 8b6:	90 01       	movw	r18, r0
 8b8:	11 24       	eor	r1, r1
 8ba:	c2 2b       	or	r28, r18
	
	// Send the high bits
	Write_Byte(LCD_ADDR, bits_high);
 8bc:	6d 2f       	mov	r22, r29
 8be:	87 e2       	ldi	r24, 0x27	; 39
 8c0:	0e 94 ef 03 	call	0x7de	; 0x7de <Write_Byte>
	LCD_Toggle_enable(bits_high);
 8c4:	8d 2f       	mov	r24, r29
 8c6:	0e 94 32 04 	call	0x864	; 0x864 <LCD_Toggle_enable>
	
	// Send the low bits
	Write_Byte(LCD_ADDR, bits_low);
 8ca:	6c 2f       	mov	r22, r28
 8cc:	87 e2       	ldi	r24, 0x27	; 39
 8ce:	0e 94 ef 03 	call	0x7de	; 0x7de <Write_Byte>
	LCD_Toggle_enable(bits_low);
 8d2:	8c 2f       	mov	r24, r28
 8d4:	0e 94 32 04 	call	0x864	; 0x864 <LCD_Toggle_enable>
	
}
 8d8:	df 91       	pop	r29
 8da:	cf 91       	pop	r28
 8dc:	08 95       	ret

000008de <LCD_Init>:


void LCD_Init(void){
	
	// Basic initialization
	LCD_Byte(0x33, LCD_CMD); 
 8de:	60 e0       	ldi	r22, 0x00	; 0
 8e0:	83 e3       	ldi	r24, 0x33	; 51
 8e2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	LCD_Byte(0x32, LCD_CMD);
 8e6:	60 e0       	ldi	r22, 0x00	; 0
 8e8:	82 e3       	ldi	r24, 0x32	; 50
 8ea:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	 
	// Entry mode, move cursor left to right 
	LCD_Byte(0x06, LCD_CMD); 
 8ee:	60 e0       	ldi	r22, 0x00	; 0
 8f0:	86 e0       	ldi	r24, 0x06	; 6
 8f2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	
	// Display on, Cursor off, Blink off
	LCD_Byte(0x0C, LCD_CMD); 
 8f6:	60 e0       	ldi	r22, 0x00	; 0
 8f8:	8c e0       	ldi	r24, 0x0C	; 12
 8fa:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	
	// Set to 4-bit ooperation, 2 lines and 5x7 dots
	LCD_Byte(0x28, LCD_CMD); 
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	88 e2       	ldi	r24, 0x28	; 40
 902:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	
	// Clears display and DDRAM
	LCD_Byte(0x01, LCD_CMD); 
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
 90e:	8f e0       	ldi	r24, 0x0F	; 15
 910:	97 e2       	ldi	r25, 0x27	; 39
 912:	01 97       	sbiw	r24, 0x01	; 1
 914:	f1 f7       	brne	.-4      	; 0x912 <LCD_Init+0x34>
 916:	00 c0       	rjmp	.+0      	; 0x918 <LCD_Init+0x3a>
 918:	00 00       	nop
 91a:	08 95       	ret

0000091c <LCD_String>:
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
	
}

void LCD_String(uint8_t *text){
 91c:	cf 93       	push	r28
 91e:	df 93       	push	r29
 920:	ec 01       	movw	r28, r24
	
	while(*text){
 922:	88 81       	ld	r24, Y
 924:	88 23       	and	r24, r24
 926:	39 f0       	breq	.+14     	; 0x936 <LCD_String+0x1a>
 928:	21 96       	adiw	r28, 0x01	; 1
		LCD_Byte(*text++, LCD_CHR);
 92a:	61 e0       	ldi	r22, 0x01	; 1
 92c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_Byte>
	
}

void LCD_String(uint8_t *text){
	
	while(*text){
 930:	89 91       	ld	r24, Y+
 932:	81 11       	cpse	r24, r1
 934:	fa cf       	rjmp	.-12     	; 0x92a <LCD_String+0xe>
		LCD_Byte(*text++, LCD_CHR);
	}
}
 936:	df 91       	pop	r29
 938:	cf 91       	pop	r28
 93a:	08 95       	ret

0000093c <TWI_Master_Init>:


void TWI_Master_Init (void){
	
	//Sets the power reduction register for TWI to 0.
	PRR &= ~(1<<PRTWI);
 93c:	e4 e6       	ldi	r30, 0x64	; 100
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	8f 77       	andi	r24, 0x7F	; 127
 944:	80 83       	st	Z, r24
	
	//Sets the prescaler to 1 by setting TWPS1 and 0 to 0
	TWSR &= ~(1<<TWPS1) & ~(1<<TWPS0); 
 946:	e9 eb       	ldi	r30, 0xB9	; 185
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	8c 7f       	andi	r24, 0xFC	; 252
 94e:	80 83       	st	Z, r24
	
	//Sets the speed of TWI to 100khz
	TWBR = 0x20;
 950:	80 e2       	ldi	r24, 0x20	; 32
 952:	80 93 b8 00 	sts	0x00B8, r24
		TWWC - Write Collision Flag
		TWEN - Enable Bit
		TWIE - Interrupt Enable

	************************************************************************/
	TWDR = 0xFF;
 956:	8f ef       	ldi	r24, 0xFF	; 255
 958:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (0<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWWC) | (1<<TWIE) | (1<<TWEN);
 95c:	85 e0       	ldi	r24, 0x05	; 5
 95e:	80 93 bc 00 	sts	0x00BC, r24
 962:	08 95       	ret

00000964 <TWI_Busy>:

}

int TWI_Busy(void){
	//Returns 0 if the MCU is busy
	return TWCR & (1<<TWINT);
 964:	80 91 bc 00 	lds	r24, 0x00BC
 968:	80 78       	andi	r24, 0x80	; 128
}
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	08 95       	ret

0000096e <__divmodhi4>:
 96e:	97 fb       	bst	r25, 7
 970:	07 2e       	mov	r0, r23
 972:	16 f4       	brtc	.+4      	; 0x978 <__divmodhi4+0xa>
 974:	00 94       	com	r0
 976:	07 d0       	rcall	.+14     	; 0x986 <__divmodhi4_neg1>
 978:	77 fd       	sbrc	r23, 7
 97a:	09 d0       	rcall	.+18     	; 0x98e <__divmodhi4_neg2>
 97c:	0e 94 0c 05 	call	0xa18	; 0xa18 <__udivmodhi4>
 980:	07 fc       	sbrc	r0, 7
 982:	05 d0       	rcall	.+10     	; 0x98e <__divmodhi4_neg2>
 984:	3e f4       	brtc	.+14     	; 0x994 <__divmodhi4_exit>

00000986 <__divmodhi4_neg1>:
 986:	90 95       	com	r25
 988:	81 95       	neg	r24
 98a:	9f 4f       	sbci	r25, 0xFF	; 255
 98c:	08 95       	ret

0000098e <__divmodhi4_neg2>:
 98e:	70 95       	com	r23
 990:	61 95       	neg	r22
 992:	7f 4f       	sbci	r23, 0xFF	; 255

00000994 <__divmodhi4_exit>:
 994:	08 95       	ret

00000996 <__udivmodsi4>:
 996:	a1 e2       	ldi	r26, 0x21	; 33
 998:	1a 2e       	mov	r1, r26
 99a:	aa 1b       	sub	r26, r26
 99c:	bb 1b       	sub	r27, r27
 99e:	fd 01       	movw	r30, r26
 9a0:	0d c0       	rjmp	.+26     	; 0x9bc <__udivmodsi4_ep>

000009a2 <__udivmodsi4_loop>:
 9a2:	aa 1f       	adc	r26, r26
 9a4:	bb 1f       	adc	r27, r27
 9a6:	ee 1f       	adc	r30, r30
 9a8:	ff 1f       	adc	r31, r31
 9aa:	a2 17       	cp	r26, r18
 9ac:	b3 07       	cpc	r27, r19
 9ae:	e4 07       	cpc	r30, r20
 9b0:	f5 07       	cpc	r31, r21
 9b2:	20 f0       	brcs	.+8      	; 0x9bc <__udivmodsi4_ep>
 9b4:	a2 1b       	sub	r26, r18
 9b6:	b3 0b       	sbc	r27, r19
 9b8:	e4 0b       	sbc	r30, r20
 9ba:	f5 0b       	sbc	r31, r21

000009bc <__udivmodsi4_ep>:
 9bc:	66 1f       	adc	r22, r22
 9be:	77 1f       	adc	r23, r23
 9c0:	88 1f       	adc	r24, r24
 9c2:	99 1f       	adc	r25, r25
 9c4:	1a 94       	dec	r1
 9c6:	69 f7       	brne	.-38     	; 0x9a2 <__udivmodsi4_loop>
 9c8:	60 95       	com	r22
 9ca:	70 95       	com	r23
 9cc:	80 95       	com	r24
 9ce:	90 95       	com	r25
 9d0:	9b 01       	movw	r18, r22
 9d2:	ac 01       	movw	r20, r24
 9d4:	bd 01       	movw	r22, r26
 9d6:	cf 01       	movw	r24, r30
 9d8:	08 95       	ret

000009da <__divmodsi4>:
 9da:	05 2e       	mov	r0, r21
 9dc:	97 fb       	bst	r25, 7
 9de:	1e f4       	brtc	.+6      	; 0x9e6 <__divmodsi4+0xc>
 9e0:	00 94       	com	r0
 9e2:	0e 94 04 05 	call	0xa08	; 0xa08 <__negsi2>
 9e6:	57 fd       	sbrc	r21, 7
 9e8:	07 d0       	rcall	.+14     	; 0x9f8 <__divmodsi4_neg2>
 9ea:	0e 94 cb 04 	call	0x996	; 0x996 <__udivmodsi4>
 9ee:	07 fc       	sbrc	r0, 7
 9f0:	03 d0       	rcall	.+6      	; 0x9f8 <__divmodsi4_neg2>
 9f2:	4e f4       	brtc	.+18     	; 0xa06 <__divmodsi4_exit>
 9f4:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__negsi2>

000009f8 <__divmodsi4_neg2>:
 9f8:	50 95       	com	r21
 9fa:	40 95       	com	r20
 9fc:	30 95       	com	r19
 9fe:	21 95       	neg	r18
 a00:	3f 4f       	sbci	r19, 0xFF	; 255
 a02:	4f 4f       	sbci	r20, 0xFF	; 255
 a04:	5f 4f       	sbci	r21, 0xFF	; 255

00000a06 <__divmodsi4_exit>:
 a06:	08 95       	ret

00000a08 <__negsi2>:
 a08:	90 95       	com	r25
 a0a:	80 95       	com	r24
 a0c:	70 95       	com	r23
 a0e:	61 95       	neg	r22
 a10:	7f 4f       	sbci	r23, 0xFF	; 255
 a12:	8f 4f       	sbci	r24, 0xFF	; 255
 a14:	9f 4f       	sbci	r25, 0xFF	; 255
 a16:	08 95       	ret

00000a18 <__udivmodhi4>:
 a18:	aa 1b       	sub	r26, r26
 a1a:	bb 1b       	sub	r27, r27
 a1c:	51 e1       	ldi	r21, 0x11	; 17
 a1e:	07 c0       	rjmp	.+14     	; 0xa2e <__udivmodhi4_ep>

00000a20 <__udivmodhi4_loop>:
 a20:	aa 1f       	adc	r26, r26
 a22:	bb 1f       	adc	r27, r27
 a24:	a6 17       	cp	r26, r22
 a26:	b7 07       	cpc	r27, r23
 a28:	10 f0       	brcs	.+4      	; 0xa2e <__udivmodhi4_ep>
 a2a:	a6 1b       	sub	r26, r22
 a2c:	b7 0b       	sbc	r27, r23

00000a2e <__udivmodhi4_ep>:
 a2e:	88 1f       	adc	r24, r24
 a30:	99 1f       	adc	r25, r25
 a32:	5a 95       	dec	r21
 a34:	a9 f7       	brne	.-22     	; 0xa20 <__udivmodhi4_loop>
 a36:	80 95       	com	r24
 a38:	90 95       	com	r25
 a3a:	bc 01       	movw	r22, r24
 a3c:	cd 01       	movw	r24, r26
 a3e:	08 95       	ret

00000a40 <_exit>:
 a40:	f8 94       	cli

00000a42 <__stop_program>:
 a42:	ff cf       	rjmp	.-2      	; 0xa42 <__stop_program>
