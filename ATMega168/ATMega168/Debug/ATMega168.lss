
ATMega168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000624  000006b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000624  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080010c  0080010c  000006c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000122b  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000632  00000000  00000000  00001aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000732  00000000  00000000  000020d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  0000280c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d4  00000000  00000000  00002b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f8  00000000  00000000  00002ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000035d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c0 01 	call	0x380	; 0x380 <main>
  9e:	0c 94 10 03 	jmp	0x620	; 0x620 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <System_Init>:



void System_Init(void){
	
	status = 0;
  a6:	10 92 0d 01 	sts	0x010D, r1
  aa:	10 92 0c 01 	sts	0x010C, r1
	
	// Enable global interrupt
	sei();
  ae:	78 94       	sei
	// Enable interrupt on PCINT20 (pin 6 on AtMega 168P)
	EICRA = (1<<ISC11);
  b0:	88 e0       	ldi	r24, 0x08	; 8
  b2:	80 93 69 00 	sts	0x0069, r24
	EIMSK = (1<<INT1);
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	8d bb       	out	0x1d, r24	; 29
	PCICR = (1<<PCIE2);
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	80 93 68 00 	sts	0x0068, r24
	PCMSK2 = (1<<PCINT20);
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	80 93 6d 00 	sts	0x006D, r24
	
	/*Setting ports - page 75*/
		
	DDRB = (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB3) | (1<<PORTB0); //PB0 is debug greenlight
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	84 b9       	out	0x04, r24	; 4
	DDRD = (1<<PORTD3) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7); //PD7 is debug yellow
  ca:	88 ee       	ldi	r24, 0xE8	; 232
  cc:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	89 e6       	ldi	r24, 0x69	; 105
  d2:	98 e1       	ldi	r25, 0x18	; 24
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <System_Init+0x2e>
  dc:	00 c0       	rjmp	.+0      	; 0xde <System_Init+0x38>
  de:	00 00       	nop
	
	//Turn on the front and backlights
	_delay_ms(8000);
	PORTB = (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB0);
  e0:	87 e0       	ldi	r24, 0x07	; 7
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	89 e6       	ldi	r24, 0x69	; 105
  e8:	98 e1       	ldi	r25, 0x18	; 24
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <System_Init+0x44>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <System_Init+0x4e>
  f4:	00 00       	nop
	_delay_ms(8000);
	PORTB = (0<<PORTB1) | (0<<PORTB2) | (0<<PORTB0);
  f6:	15 b8       	out	0x05, r1	; 5
	

	//Signs the status
	status = MCU_STARTED;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 0d 01 	sts	0x010D, r25
 100:	80 93 0c 01 	sts	0x010C, r24
 104:	08 95       	ret

00000106 <UART_Init>:
}

void UART_Init(unsigned int baud){
	
	//Set double speed
	UCSR0A = (1<<U2X0);
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	20 93 c0 00 	sts	0x00C0, r18
	
	//Set baudrate
	unsigned int baudrate;
	baudrate = 8000000/8/baud-1;
 10c:	9c 01       	movw	r18, r24
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	60 e4       	ldi	r22, 0x40	; 64
 114:	72 e4       	ldi	r23, 0x42	; 66
 116:	8f e0       	ldi	r24, 0x0F	; 15
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__divmodsi4>
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	31 09       	sbc	r19, r1
	//Double speed use frequency/8/baud
	
	//Set the baudrate in the registry
	UBRR0H = (unsigned char) (baudrate>>8);
 122:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) (baudrate);
 126:	20 93 c4 00 	sts	0x00C4, r18

	
	//Enables Receive and Transmit over UART
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); //RXCIE and TXCIE for interrupt based UART.
 12a:	88 e1       	ldi	r24, 0x18	; 24
 12c:	80 93 c1 00 	sts	0x00C1, r24
	
	//Sets to 1 stop bit and 8 databits
	UCSR0C = (0<<USBS0) | (3<<UCSZ00);
 130:	e2 ec       	ldi	r30, 0xC2	; 194
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	80 83       	st	Z, r24
	
	//Disables Parity
	UCSR0C |= (0<<UPM01) | (0<<UPM00);
 138:	80 81       	ld	r24, Z
 13a:	80 83       	st	Z, r24
	
	
	status |= UART_STARTED;
 13c:	80 91 0c 01 	lds	r24, 0x010C
 140:	90 91 0d 01 	lds	r25, 0x010D
 144:	82 60       	ori	r24, 0x02	; 2
 146:	90 93 0d 01 	sts	0x010D, r25
 14a:	80 93 0c 01 	sts	0x010C, r24
 14e:	08 95       	ret

00000150 <BT_Recieve>:
}

uint8_t BT_Recieve(void){
	
	//Wait for data to be received (wait for flag to be set)
	while(!(UCSR0A & (1<<RXC0)));
 150:	e0 ec       	ldi	r30, 0xC0	; 192
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	88 23       	and	r24, r24
 158:	ec f7       	brge	.-6      	; 0x154 <BT_Recieve+0x4>
	
	//Returns the data from buffer
	return UDR0;
 15a:	80 91 c6 00 	lds	r24, 0x00C6
}
 15e:	08 95       	ret

00000160 <BT_Send>:
void BT_Send(unsigned char data){
	
	//PORTB = ~(1<<PORTB1);
	//_delay_ms(1000);
	//Waits for the transmit buffer to be empty (wait for flag)
	while(!(UCSR0A & (1<<UDRE0)));
 160:	e0 ec       	ldi	r30, 0xC0	; 192
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	90 81       	ld	r25, Z
 166:	95 ff       	sbrs	r25, 5
 168:	fd cf       	rjmp	.-6      	; 0x164 <BT_Send+0x4>
	
	//Put data in buffer and sends it
	UDR0 = data;
 16a:	80 93 c6 00 	sts	0x00C6, r24
 16e:	08 95       	ret

00000170 <Uart_Flush>:
	//_delay_ms(1000);
}

void Uart_Flush(void){
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0)) dummy = UDR0;	
 170:	80 91 c0 00 	lds	r24, 0x00C0
 174:	88 23       	and	r24, r24
 176:	44 f4       	brge	.+16     	; 0x188 <Uart_Flush+0x18>
 178:	a6 ec       	ldi	r26, 0xC6	; 198
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	e0 ec       	ldi	r30, 0xC0	; 192
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	8c 91       	ld	r24, X
 182:	80 81       	ld	r24, Z
 184:	88 23       	and	r24, r24
 186:	e4 f3       	brlt	.-8      	; 0x180 <Uart_Flush+0x10>
 188:	08 95       	ret

0000018a <BT_Init>:
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	89 e6       	ldi	r24, 0x69	; 105
 18e:	98 e1       	ldi	r25, 0x18	; 24
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <BT_Init+0x6>
 198:	00 c0       	rjmp	.+0      	; 0x19a <BT_Init+0x10>
 19a:	00 00       	nop
	
	
	//Wait for 1 second to ensure the device has power
	_delay_ms(8000);

	for(int i = 0; i<3; i++) BT_Send('-');
 19c:	8d e2       	ldi	r24, 0x2D	; 45
 19e:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 1a2:	8d e2       	ldi	r24, 0x2D	; 45
 1a4:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 1a8:	8d e2       	ldi	r24, 0x2D	; 45
 1aa:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	BT_Send(0x0A); //NL
 1ae:	8a e0       	ldi	r24, 0x0A	; 10
 1b0:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
	BT_Send(0x0D); //CR
 1b4:	8d e0       	ldi	r24, 0x0D	; 13
 1b6:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 1ba:	2f e3       	ldi	r18, 0x3F	; 63
 1bc:	8d e0       	ldi	r24, 0x0D	; 13
 1be:	93 e0       	ldi	r25, 0x03	; 3
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <BT_Init+0x36>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <BT_Init+0x40>
 1ca:	00 00       	nop
	_delay_ms(1000);
	LCD_Byte(0x01, 0x00);
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_Byte>
 1d8:	8b e7       	ldi	r24, 0x7B	; 123
 1da:	92 e9       	ldi	r25, 0x92	; 146
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <BT_Init+0x52>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <BT_Init+0x58>
 1e2:	00 00       	nop
	_delay_ms(150); //5 ms delay
	Uart_Flush();
 1e4:	0e 94 b8 00 	call	0x170	; 0x170 <Uart_Flush>
		else if(BT_Recieve()=='E'){
			Error('E');
		}*/
	}
	return 0;
}
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	08 95       	ret

000001ee <BT_Connect>:
void I2C_Init(void){
	
	
}

void BT_Connect(void){
 1ee:	ef 92       	push	r14
 1f0:	ff 92       	push	r15
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	2c 97       	sbiw	r28, 0x0c	; 12
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	de bf       	out	0x3e, r29	; 62
 206:	0f be       	out	0x3f, r0	; 63
 208:	cd bf       	out	0x3d, r28	; 61
 20a:	2f ef       	ldi	r18, 0xFF	; 255
 20c:	89 e6       	ldi	r24, 0x69	; 105
 20e:	98 e1       	ldi	r25, 0x18	; 24
 210:	21 50       	subi	r18, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <BT_Connect+0x22>
 218:	00 c0       	rjmp	.+0      	; 0x21a <BT_Connect+0x2c>
 21a:	00 00       	nop

		//Wait for 1 second to ensure the device has power
		_delay_ms(8000);

		for(int i = 0; i<3; i++) BT_Send('-');
 21c:	8d e2       	ldi	r24, 0x2D	; 45
 21e:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 222:	8d e2       	ldi	r24, 0x2D	; 45
 224:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 228:	8d e2       	ldi	r24, 0x2D	; 45
 22a:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
		BT_Send(0x0A); //NL
 22e:	8a e0       	ldi	r24, 0x0A	; 10
 230:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
		BT_Send(0x0D); //CR
 234:	8d e0       	ldi	r24, 0x0D	; 13
 236:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 23a:	ef e3       	ldi	r30, 0x3F	; 63
 23c:	fd e0       	ldi	r31, 0x0D	; 13
 23e:	23 e0       	ldi	r18, 0x03	; 3
 240:	e1 50       	subi	r30, 0x01	; 1
 242:	f0 40       	sbci	r31, 0x00	; 0
 244:	20 40       	sbci	r18, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <BT_Connect+0x52>
 248:	00 c0       	rjmp	.+0      	; 0x24a <BT_Connect+0x5c>
 24a:	00 00       	nop
		_delay_ms(1000);
		LCD_Byte(0x01, 0x00);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_Byte>
 258:	8b e7       	ldi	r24, 0x7B	; 123
 25a:	92 e9       	ldi	r25, 0x92	; 146
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <BT_Connect+0x6e>
 260:	00 c0       	rjmp	.+0      	; 0x262 <BT_Connect+0x74>
 262:	00 00       	nop
		_delay_ms(150); //5 ms delay
		Uart_Flush();
 264:	0e 94 b8 00 	call	0x170	; 0x170 <Uart_Flush>

		//Sends command to enter command mode
		for(int i = 0; i<3; i++) BT_Send('$');
 268:	84 e2       	ldi	r24, 0x24	; 36
 26a:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 26e:	84 e2       	ldi	r24, 0x24	; 36
 270:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 274:	84 e2       	ldi	r24, 0x24	; 36
 276:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
		//If it fails to go into command mode
		LCD_Byte(BT_Recieve(), 0x01);
 27a:	0e 94 a8 00 	call	0x150	; 0x150 <BT_Recieve>
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_Byte>
		LCD_Byte(BT_Recieve(), 0x01);
 288:	0e 94 a8 00 	call	0x150	; 0x150 <BT_Recieve>
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_Byte>
		LCD_Byte(BT_Recieve(), 0x01);
 296:	0e 94 a8 00 	call	0x150	; 0x150 <BT_Recieve>
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_Byte>
 2a4:	9f e3       	ldi	r25, 0x3F	; 63
 2a6:	ed e0       	ldi	r30, 0x0D	; 13
 2a8:	f3 e0       	ldi	r31, 0x03	; 3
 2aa:	91 50       	subi	r25, 0x01	; 1
 2ac:	e0 40       	sbci	r30, 0x00	; 0
 2ae:	f0 40       	sbci	r31, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <BT_Connect+0xbc>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <BT_Connect+0xc6>
 2b4:	00 00       	nop

		//Wait for 1 second to ensure the device has power
		_delay_ms(1000);
		
		Uart_Flush();
 2b6:	0e 94 b8 00 	call	0x170	; 0x170 <Uart_Flush>
		
		unsigned char adress[12] = {'0','0','0','6','6','6','7','6','A','0','A','A'};
 2ba:	8c e0       	ldi	r24, 0x0C	; 12
 2bc:	e0 e0       	ldi	r30, 0x00	; 0
 2be:	f1 e0       	ldi	r31, 0x01	; 1
 2c0:	de 01       	movw	r26, r28
 2c2:	11 96       	adiw	r26, 0x01	; 1
 2c4:	01 90       	ld	r0, Z+
 2c6:	0d 92       	st	X+, r0
 2c8:	8a 95       	dec	r24
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <BT_Connect+0xd6>
		
		BT_Send('c');
 2cc:	83 e6       	ldi	r24, 0x63	; 99
 2ce:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
		BT_Send(',');
 2d2:	8c e2       	ldi	r24, 0x2C	; 44
 2d4:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 2d8:	8e 01       	movw	r16, r28
 2da:	0f 5f       	subi	r16, 0xFF	; 255
 2dc:	1f 4f       	sbci	r17, 0xFF	; 255
 2de:	7e 01       	movw	r14, r28
 2e0:	2d e0       	ldi	r18, 0x0D	; 13
 2e2:	e2 0e       	add	r14, r18
 2e4:	f1 1c       	adc	r15, r1
		for(int i = 0; i < 12;i++){
			BT_Send(adress[i]);
 2e6:	f8 01       	movw	r30, r16
 2e8:	81 91       	ld	r24, Z+
 2ea:	8f 01       	movw	r16, r30
 2ec:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
		
		unsigned char adress[12] = {'0','0','0','6','6','6','7','6','A','0','A','A'};
		
		BT_Send('c');
		BT_Send(',');
		for(int i = 0; i < 12;i++){
 2f0:	0e 15       	cp	r16, r14
 2f2:	1f 05       	cpc	r17, r15
 2f4:	c1 f7       	brne	.-16     	; 0x2e6 <BT_Connect+0xf8>
			BT_Send(adress[i]);
		}
		BT_Send(0x0A); //NL
 2f6:	8a e0       	ldi	r24, 0x0A	; 10
 2f8:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
		BT_Send(0x0D); //CR
 2fc:	8d e0       	ldi	r24, 0x0D	; 13
 2fe:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
 302:	ff e3       	ldi	r31, 0x3F	; 63
 304:	2d e0       	ldi	r18, 0x0D	; 13
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	f1 50       	subi	r31, 0x01	; 1
 30a:	20 40       	sbci	r18, 0x00	; 0
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <BT_Connect+0x11a>
 310:	00 c0       	rjmp	.+0      	; 0x312 <BT_Connect+0x124>
 312:	00 00       	nop
		//Wait two seconds
		//_delay_ms(8000);
		_delay_ms(1000);

	
}
 314:	2c 96       	adiw	r28, 0x0c	; 12
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	ff 90       	pop	r15
 32a:	ef 90       	pop	r14
 32c:	08 95       	ret

0000032e <Error>:
void Sense_Light(void){
	
	
}

void Error(unsigned int errorcode){
 32e:	d8 2f       	mov	r29, r24
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
 330:	c1 2c       	mov	r12, r1
 332:	d1 2c       	mov	r13, r1
 334:	76 01       	movw	r14, r12
	for(;;){
		if(ticks%10000 == 0){
 336:	0f 2e       	mov	r0, r31
 338:	f0 e1       	ldi	r31, 0x10	; 16
 33a:	8f 2e       	mov	r8, r31
 33c:	f7 e2       	ldi	r31, 0x27	; 39
 33e:	9f 2e       	mov	r9, r31
 340:	a1 2c       	mov	r10, r1
 342:	b1 2c       	mov	r11, r1
 344:	f0 2d       	mov	r31, r0
			PINB = (1<<PORTB1);
 346:	c2 e0       	ldi	r28, 0x02	; 2
void Error(unsigned int errorcode){
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
	for(;;){
		if(ticks%10000 == 0){
 348:	c7 01       	movw	r24, r14
 34a:	b6 01       	movw	r22, r12
 34c:	a5 01       	movw	r20, r10
 34e:	94 01       	movw	r18, r8
 350:	0e 94 cf 02 	call	0x59e	; 0x59e <__udivmodsi4>
 354:	67 2b       	or	r22, r23
 356:	68 2b       	or	r22, r24
 358:	69 2b       	or	r22, r25
 35a:	21 f4       	brne	.+8      	; 0x364 <Error+0x36>
			PINB = (1<<PORTB1);
 35c:	c3 b9       	out	0x03, r28	; 3
			BT_Send(errorcode);
 35e:	8d 2f       	mov	r24, r29
 360:	0e 94 b0 00 	call	0x160	; 0x160 <BT_Send>
		}
		if(ticks%10000 == 50000){
			PINB = (0<<PORTB1);
		}
		ticks++;
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	c8 1a       	sub	r12, r24
 368:	d8 0a       	sbc	r13, r24
 36a:	e8 0a       	sbc	r14, r24
 36c:	f8 0a       	sbc	r15, r24
	}
 36e:	ec cf       	rjmp	.-40     	; 0x348 <Error+0x1a>

00000370 <Yellow_LED_Off>:

void Yellow_LED_On(void){
	PORTD |= (1<<PORTD7);
}
void Yellow_LED_Off(void){
	PORTD &= (0<<PORTD7);
 370:	8b b1       	in	r24, 0x0b	; 11
 372:	1b b8       	out	0x0b, r1	; 11
 374:	08 95       	ret

00000376 <Red_LED_On>:
}

void Red_LED_On(void){
	PORTB |= (1<<PORTB1);
 376:	29 9a       	sbi	0x05, 1	; 5
 378:	08 95       	ret

0000037a <Red_LED_Off>:
}
void Red_LED_Off(void){
	PORTB &= (0<<PORTB1);
 37a:	85 b1       	in	r24, 0x05	; 5
 37c:	15 b8       	out	0x05, r1	; 5
 37e:	08 95       	ret

00000380 <main>:
//Name of the main struct with all the data in for the different sensors and values
DATA DirtyDawg;

int main(void){

	DirtyDawg.state = 0;
 380:	10 92 1a 01 	sts	0x011A, r1
	System_Init(); //Checked - OK!
 384:	0e 94 53 00 	call	0xa6	; 0xa6 <System_Init>
	//Baud rate max is 19200 (double speed enabled)

	UART_Init(19200); //Checked - OK!
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	9b e4       	ldi	r25, 0x4B	; 75
 38c:	0e 94 83 00 	call	0x106	; 0x106 <UART_Init>

	//Connects to BT device
	//while(BT_Init()==0);
	
	TWI_Master_Init();
 390:	0e 94 b6 02 	call	0x56c	; 0x56c <TWI_Master_Init>
	

	LCD_Init();
 394:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_Init>
	BT_Init();
 398:	0e 94 c5 00 	call	0x18a	; 0x18a <BT_Init>
/*
	uint8_t array1[] = {'H','E','L','L','O'};
	uint8_t array2[] = {'W','O','R','L','D','!'};
	LCD_String(array1, ARR_SIZE(array1),array2, ARR_SIZE(array2));
*/	
	Yellow_LED_Off();
 39c:	0e 94 b8 01 	call	0x370	; 0x370 <Yellow_LED_Off>
	Red_LED_Off();
 3a0:	0e 94 bd 01 	call	0x37a	; 0x37a <Red_LED_Off>
	while(TRUE){
		Red_LED_On();
 3a4:	0e 94 bb 01 	call	0x376	; 0x376 <Red_LED_On>
 3a8:	2f ef       	ldi	r18, 0xFF	; 255
 3aa:	89 e6       	ldi	r24, 0x69	; 105
 3ac:	98 e1       	ldi	r25, 0x18	; 24
 3ae:	21 50       	subi	r18, 0x01	; 1
 3b0:	80 40       	sbci	r24, 0x00	; 0
 3b2:	90 40       	sbci	r25, 0x00	; 0
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <main+0x2e>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <main+0x38>
 3b8:	00 00       	nop
		_delay_ms(1000);
		Red_LED_Off();
 3ba:	0e 94 bd 01 	call	0x37a	; 0x37a <Red_LED_Off>
 3be:	2f ef       	ldi	r18, 0xFF	; 255
 3c0:	89 e6       	ldi	r24, 0x69	; 105
 3c2:	98 e1       	ldi	r25, 0x18	; 24
 3c4:	21 50       	subi	r18, 0x01	; 1
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	90 40       	sbci	r25, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <main+0x44>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <main+0x4e>
 3ce:	00 00       	nop
 3d0:	e9 cf       	rjmp	.-46     	; 0x3a4 <main+0x24>

000003d2 <__vector_5>:
		_delay_ms(1000);
	}
		
}

ISR(PCINT2_vect){
 3d2:	1f 92       	push	r1
 3d4:	0f 92       	push	r0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	0f 92       	push	r0
 3da:	11 24       	eor	r1, r1

}
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <__vector_2>:

ISR(INT1_vect){
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	2f 93       	push	r18
 3f2:	3f 93       	push	r19
 3f4:	4f 93       	push	r20
 3f6:	5f 93       	push	r21
 3f8:	6f 93       	push	r22
 3fa:	7f 93       	push	r23
 3fc:	8f 93       	push	r24
 3fe:	9f 93       	push	r25
 400:	af 93       	push	r26
 402:	bf 93       	push	r27
 404:	ef 93       	push	r30
 406:	ff 93       	push	r31
	BT_Connect();
 408:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Connect>
}
 40c:	ff 91       	pop	r31
 40e:	ef 91       	pop	r30
 410:	bf 91       	pop	r27
 412:	af 91       	pop	r26
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	7f 91       	pop	r23
 41a:	6f 91       	pop	r22
 41c:	5f 91       	pop	r21
 41e:	4f 91       	pop	r20
 420:	3f 91       	pop	r19
 422:	2f 91       	pop	r18
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <Write_Byte>:
		LCD_Byte(row2[i], LCD_CHR);
	}

}

void Write_Byte(uint8_t addr, uint8_t bits){
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	c8 2f       	mov	r28, r24
 434:	d6 2f       	mov	r29, r22
	
		
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 436:	84 ea       	ldi	r24, 0xA4	; 164
 438:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 43c:	0e 94 ca 02 	call	0x594	; 0x594 <TWI_Busy>
 440:	89 2b       	or	r24, r25
 442:	e1 f3       	breq	.-8      	; 0x43c <Write_Byte+0xe>
	if((TWSR & MASK) != START)Error(START);
 444:	80 91 b9 00 	lds	r24, 0x00B9
 448:	88 7f       	andi	r24, 0xF8	; 248
 44a:	88 30       	cpi	r24, 0x08	; 8
 44c:	21 f0       	breq	.+8      	; 0x456 <Write_Byte+0x28>
 44e:	88 e0       	ldi	r24, 0x08	; 8
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 97 01 	call	0x32e	; 0x32e <Error>
		
	//Loads the slave address and set the R/W bit to 0
	TWDR = (addr<<1) | LCD_WRITE;
 456:	cc 0f       	add	r28, r28
 458:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN); 
 45c:	84 e8       	ldi	r24, 0x84	; 132
 45e:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 462:	0e 94 ca 02 	call	0x594	; 0x594 <TWI_Busy>
 466:	89 2b       	or	r24, r25
 468:	e1 f3       	breq	.-8      	; 0x462 <Write_Byte+0x34>
	if((TWSR & MASK) !=  MT_ADDRESS_ACK)Error((TWSR & MASK));
 46a:	80 91 b9 00 	lds	r24, 0x00B9
 46e:	88 7f       	andi	r24, 0xF8	; 248
 470:	88 31       	cpi	r24, 0x18	; 24
 472:	31 f0       	breq	.+12     	; 0x480 <Write_Byte+0x52>
 474:	80 91 b9 00 	lds	r24, 0x00B9
 478:	88 7f       	andi	r24, 0xF8	; 248
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 97 01 	call	0x32e	; 0x32e <Error>
		
	//Sends the data to the slave
	TWDR = bits; //4bits
 480:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
 484:	84 e8       	ldi	r24, 0x84	; 132
 486:	80 93 bc 00 	sts	0x00BC, r24
	
	while(!TWI_Busy());
 48a:	0e 94 ca 02 	call	0x594	; 0x594 <TWI_Busy>
 48e:	89 2b       	or	r24, r25
 490:	e1 f3       	breq	.-8      	; 0x48a <Write_Byte+0x5c>
	if((TWSR & MASK) !=  MT_BYTE_ACK)Error((TWSR & MASK));
 492:	80 91 b9 00 	lds	r24, 0x00B9
 496:	88 7f       	andi	r24, 0xF8	; 248
 498:	88 32       	cpi	r24, 0x28	; 40
 49a:	31 f0       	breq	.+12     	; 0x4a8 <Write_Byte+0x7a>
 49c:	80 91 b9 00 	lds	r24, 0x00B9
 4a0:	88 7f       	andi	r24, 0xF8	; 248
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 97 01 	call	0x32e	; 0x32e <Error>
		
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 4a8:	84 e9       	ldi	r24, 0x94	; 148
 4aa:	80 93 bc 00 	sts	0x00BC, r24
	
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <LCD_Toggle_enable>:
	Write_Byte(LCD_ADDR, bits_low);
	LCD_Toggle_enable(bits_low);
	
}

void LCD_Toggle_enable(uint8_t bits){
 4b4:	cf 93       	push	r28
 4b6:	c8 2f       	mov	r28, r24
 4b8:	8f e0       	ldi	r24, 0x0F	; 15
 4ba:	97 e2       	ldi	r25, 0x27	; 39
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <LCD_Toggle_enable+0x8>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <LCD_Toggle_enable+0xe>
 4c2:	00 00       	nop
	
	// Toggles the enable pin on the display to activate the code
	_delay_ms(DELAY_MS*5);
	Write_Byte(LCD_ADDR, (bits | ENABLE));
 4c4:	6c 2f       	mov	r22, r28
 4c6:	64 60       	ori	r22, 0x04	; 4
 4c8:	87 e2       	ldi	r24, 0x27	; 39
 4ca:	0e 94 17 02 	call	0x42e	; 0x42e <Write_Byte>
 4ce:	8f e0       	ldi	r24, 0x0F	; 15
 4d0:	97 e2       	ldi	r25, 0x27	; 39
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <LCD_Toggle_enable+0x1e>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <LCD_Toggle_enable+0x24>
 4d8:	00 00       	nop
	_delay_ms(DELAY_MS*5);
	Write_Byte(LCD_ADDR, (bits & ~ENABLE));
 4da:	6c 2f       	mov	r22, r28
 4dc:	6b 7f       	andi	r22, 0xFB	; 251
 4de:	87 e2       	ldi	r24, 0x27	; 39
 4e0:	0e 94 17 02 	call	0x42e	; 0x42e <Write_Byte>
 4e4:	8f e0       	ldi	r24, 0x0F	; 15
 4e6:	97 e2       	ldi	r25, 0x27	; 39
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <LCD_Toggle_enable+0x34>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <LCD_Toggle_enable+0x3a>
 4ee:	00 00       	nop
	_delay_ms(DELAY_MS*5);
		
}
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <LCD_Byte>:
	LCD_Byte(0x01, LCD_CMD); 
	_delay_ms(DELAY_MS*5); //5 ms delay
	
}

void LCD_Byte(uint8_t bits, uint8_t mode){
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	c6 2f       	mov	r28, r22
 4fa:	c8 60       	ori	r28, 0x08	; 8
	
	uint8_t bits_high, bits_low;
	
	//Divides the data in two 4 bit values
	bits_high = mode | (bits & 0xF0) | LCD_BACKLIGHT;
 4fc:	d8 2f       	mov	r29, r24
 4fe:	d0 7f       	andi	r29, 0xF0	; 240
 500:	dc 2b       	or	r29, r28
	bits_low = mode | ((bits<<4) & 0xF0) | LCD_BACKLIGHT;
 502:	90 e1       	ldi	r25, 0x10	; 16
 504:	89 9f       	mul	r24, r25
 506:	90 01       	movw	r18, r0
 508:	11 24       	eor	r1, r1
 50a:	c2 2b       	or	r28, r18
	
	// Send the high bits
	Write_Byte(LCD_ADDR, bits_high);
 50c:	6d 2f       	mov	r22, r29
 50e:	87 e2       	ldi	r24, 0x27	; 39
 510:	0e 94 17 02 	call	0x42e	; 0x42e <Write_Byte>
	LCD_Toggle_enable(bits_high);
 514:	8d 2f       	mov	r24, r29
 516:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_Toggle_enable>
	
	// Send the low bits
	Write_Byte(LCD_ADDR, bits_low);
 51a:	6c 2f       	mov	r22, r28
 51c:	87 e2       	ldi	r24, 0x27	; 39
 51e:	0e 94 17 02 	call	0x42e	; 0x42e <Write_Byte>
	LCD_Toggle_enable(bits_low);
 522:	8c 2f       	mov	r24, r28
 524:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_Toggle_enable>
	
}
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <LCD_Init>:


void LCD_Init(void){
	
	// Basic initialization
	LCD_Byte(0x33, LCD_CMD); 
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	83 e3       	ldi	r24, 0x33	; 51
 532:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_Byte>
	LCD_Byte(0x32, LCD_CMD);
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	82 e3       	ldi	r24, 0x32	; 50
 53a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_Byte>
	 
	// Entry mode, move cursor left to right 
	LCD_Byte(0x06, LCD_CMD); 
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	86 e0       	ldi	r24, 0x06	; 6
 542:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_Byte>
	
	// Display on, Cursor off, Blink off
	LCD_Byte(0x0C, LCD_CMD); 
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	8c e0       	ldi	r24, 0x0C	; 12
 54a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_Byte>
	
	// Set to 4-bit ooperation, 2 lines and 5x7 dots
	LCD_Byte(0x28, LCD_CMD); 
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	88 e2       	ldi	r24, 0x28	; 40
 552:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_Byte>
	
	// Clears display and DDRAM
	LCD_Byte(0x01, LCD_CMD); 
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_Byte>
 55e:	8f e0       	ldi	r24, 0x0F	; 15
 560:	97 e2       	ldi	r25, 0x27	; 39
 562:	01 97       	sbiw	r24, 0x01	; 1
 564:	f1 f7       	brne	.-4      	; 0x562 <LCD_Init+0x34>
 566:	00 c0       	rjmp	.+0      	; 0x568 <LCD_Init+0x3a>
 568:	00 00       	nop
 56a:	08 95       	ret

0000056c <TWI_Master_Init>:


void TWI_Master_Init (void){
	
	//Sets the power reduction register for TWI to 0.
	PRR &= ~(1<<PRTWI);
 56c:	e4 e6       	ldi	r30, 0x64	; 100
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	8f 77       	andi	r24, 0x7F	; 127
 574:	80 83       	st	Z, r24
	
	//Sets the prescaler to 1 by setting TWPS1 and 0 to 0
	TWSR &= ~(1<<TWPS1) & ~(1<<TWPS0); 
 576:	e9 eb       	ldi	r30, 0xB9	; 185
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	8c 7f       	andi	r24, 0xFC	; 252
 57e:	80 83       	st	Z, r24
	
	//Sets the speed of TWI to 100khz
	TWBR = 0x20;
 580:	80 e2       	ldi	r24, 0x20	; 32
 582:	80 93 b8 00 	sts	0x00B8, r24
		TWWC - Write Collision Flag
		TWEN - Enable Bit
		TWIE - Interrupt Enable

	************************************************************************/
	TWDR = 0xFF;
 586:	8f ef       	ldi	r24, 0xFF	; 255
 588:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (0<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWWC) | (1<<TWIE) | (1<<TWEN);
 58c:	85 e0       	ldi	r24, 0x05	; 5
 58e:	80 93 bc 00 	sts	0x00BC, r24
 592:	08 95       	ret

00000594 <TWI_Busy>:

}

int TWI_Busy(void){
	//Returns 0 if the MCU is busy
	return TWCR & (1<<TWINT);
 594:	80 91 bc 00 	lds	r24, 0x00BC
 598:	80 78       	andi	r24, 0x80	; 128
}
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	08 95       	ret

0000059e <__udivmodsi4>:
 59e:	a1 e2       	ldi	r26, 0x21	; 33
 5a0:	1a 2e       	mov	r1, r26
 5a2:	aa 1b       	sub	r26, r26
 5a4:	bb 1b       	sub	r27, r27
 5a6:	fd 01       	movw	r30, r26
 5a8:	0d c0       	rjmp	.+26     	; 0x5c4 <__udivmodsi4_ep>

000005aa <__udivmodsi4_loop>:
 5aa:	aa 1f       	adc	r26, r26
 5ac:	bb 1f       	adc	r27, r27
 5ae:	ee 1f       	adc	r30, r30
 5b0:	ff 1f       	adc	r31, r31
 5b2:	a2 17       	cp	r26, r18
 5b4:	b3 07       	cpc	r27, r19
 5b6:	e4 07       	cpc	r30, r20
 5b8:	f5 07       	cpc	r31, r21
 5ba:	20 f0       	brcs	.+8      	; 0x5c4 <__udivmodsi4_ep>
 5bc:	a2 1b       	sub	r26, r18
 5be:	b3 0b       	sbc	r27, r19
 5c0:	e4 0b       	sbc	r30, r20
 5c2:	f5 0b       	sbc	r31, r21

000005c4 <__udivmodsi4_ep>:
 5c4:	66 1f       	adc	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	88 1f       	adc	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	1a 94       	dec	r1
 5ce:	69 f7       	brne	.-38     	; 0x5aa <__udivmodsi4_loop>
 5d0:	60 95       	com	r22
 5d2:	70 95       	com	r23
 5d4:	80 95       	com	r24
 5d6:	90 95       	com	r25
 5d8:	9b 01       	movw	r18, r22
 5da:	ac 01       	movw	r20, r24
 5dc:	bd 01       	movw	r22, r26
 5de:	cf 01       	movw	r24, r30
 5e0:	08 95       	ret

000005e2 <__divmodsi4>:
 5e2:	05 2e       	mov	r0, r21
 5e4:	97 fb       	bst	r25, 7
 5e6:	1e f4       	brtc	.+6      	; 0x5ee <__divmodsi4+0xc>
 5e8:	00 94       	com	r0
 5ea:	0e 94 08 03 	call	0x610	; 0x610 <__negsi2>
 5ee:	57 fd       	sbrc	r21, 7
 5f0:	07 d0       	rcall	.+14     	; 0x600 <__divmodsi4_neg2>
 5f2:	0e 94 cf 02 	call	0x59e	; 0x59e <__udivmodsi4>
 5f6:	07 fc       	sbrc	r0, 7
 5f8:	03 d0       	rcall	.+6      	; 0x600 <__divmodsi4_neg2>
 5fa:	4e f4       	brtc	.+18     	; 0x60e <__divmodsi4_exit>
 5fc:	0c 94 08 03 	jmp	0x610	; 0x610 <__negsi2>

00000600 <__divmodsi4_neg2>:
 600:	50 95       	com	r21
 602:	40 95       	com	r20
 604:	30 95       	com	r19
 606:	21 95       	neg	r18
 608:	3f 4f       	sbci	r19, 0xFF	; 255
 60a:	4f 4f       	sbci	r20, 0xFF	; 255
 60c:	5f 4f       	sbci	r21, 0xFF	; 255

0000060e <__divmodsi4_exit>:
 60e:	08 95       	ret

00000610 <__negsi2>:
 610:	90 95       	com	r25
 612:	80 95       	com	r24
 614:	70 95       	com	r23
 616:	61 95       	neg	r22
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	8f 4f       	sbci	r24, 0xFF	; 255
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	08 95       	ret

00000620 <_exit>:
 620:	f8 94       	cli

00000622 <__stop_program>:
 622:	ff cf       	rjmp	.-2      	; 0x622 <__stop_program>
