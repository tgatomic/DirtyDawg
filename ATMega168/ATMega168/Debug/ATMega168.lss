
ATMega168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  000002fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000047f  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000026e  00000000  00000000  00000877  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024d  00000000  00000000  00000ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000288  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b1  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000013c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_10>
  2c:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//Name of the main struct with all the data in for the different sensors and values
DATA DirtyDawg;

int main(void){

	DirtyDawg.state = 0;
  a6:	10 92 0c 01 	sts	0x010C, r1
	//Baud rate max is 19200 (double speed enabled)

	//UART_Init(19200); //Checked - OK!
	
	
	  suart_init();
  aa:	0e 94 8f 00 	call	0x11e	; 0x11e <suart_init>
	  sei();
  ae:	78 94       	sei
	  //sputs("Hallo Peter !\n\r" );

	  for(;;){				// main loop
		  sputchar( '-' );
  b0:	8d e2       	ldi	r24, 0x2D	; 45
  b2:	0e 94 07 01 	call	0x20e	; 0x20e <sputchar>
		  while( !kbhit() );			// wait until byte received
  b6:	80 91 11 01 	lds	r24, 0x0111
  ba:	88 23       	and	r24, r24
  bc:	e1 f3       	breq	.-8      	; 0xb6 <main+0x10>
		  sputchar( 'S' );		// sent byte + 1
  be:	83 e5       	ldi	r24, 0x53	; 83
  c0:	0e 94 07 01 	call	0x20e	; 0x20e <sputchar>
	  }
  c4:	f5 cf       	rjmp	.-22     	; 0xb0 <main+0xa>

000000c6 <__vector_5>:
			Y_LED_On();
	}
		
}

ISR(PCINT2_vect){
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
	if(DirtyDawg.state == FALSE)
  d2:	80 91 0c 01 	lds	r24, 0x010C
  d6:	81 11       	cpse	r24, r1
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <__vector_5+0x1c>
		DirtyDawg.state = TRUE;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 0c 01 	sts	0x010C, r24
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__vector_5+0x20>
	else
		DirtyDawg.state = FALSE;
  e2:	10 92 0c 01 	sts	0x010C, r1
}
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_2>:

ISR(INT1_vect){
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
	if(DirtyDawg.state == FALSE)
  fe:	80 91 0c 01 	lds	r24, 0x010C
 102:	81 11       	cpse	r24, r1
 104:	04 c0       	rjmp	.+8      	; 0x10e <__vector_2+0x1c>
	DirtyDawg.state = TRUE;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 0c 01 	sts	0x010C, r24
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__vector_2+0x20>
	else
	DirtyDawg.state = FALSE;
 10e:	10 92 0c 01 	sts	0x010C, r1
}
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <suart_init>:
volatile u8 srx_tmp;


void suart_init( void )
{
  OCR1A = TCNT1 + 1;				// force first compare
 11e:	80 91 84 00 	lds	r24, 0x0084
 122:	90 91 85 00 	lds	r25, 0x0085
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 89 00 	sts	0x0089, r25
 12c:	80 93 88 00 	sts	0x0088, r24
  TCCR1A = (1 << COM1A1) | (1 << COM1A0);		// set OC1A high, T1 mode 0
 130:	80 ec       	ldi	r24, 0xC0	; 192
 132:	80 93 80 00 	sts	0x0080, r24
  TCCR1B = (1 << ICNC1) | (1 << CS10);		// noise canceler, 1>0 transition,
 136:	81 e8       	ldi	r24, 0x81	; 129
 138:	80 93 81 00 	sts	0x0081, r24
									// CLK/1, T1 mode 0
									
  TIFR1 = (1 << ICF1);					// clear pending interrupt
 13c:	80 e2       	ldi	r24, 0x20	; 32
 13e:	86 bb       	out	0x16, r24	; 22
  TIMSK1 = (1 << ICIE1) | ( 1<<OCIE1A) ;		// enable tx and wait for start
 140:	82 e2       	ldi	r24, 0x22	; 34
 142:	80 93 6f 00 	sts	0x006F, r24

  stx_count = 0;			// nothing to sent
 146:	10 92 10 01 	sts	0x0110, r1
  srx_done = 0;				// nothing received
 14a:	10 92 11 01 	sts	0x0111, r1
  STXDDR |= (1<<STX);			// TX output
 14e:	21 9a       	sbi	0x04, 1	; 4
 150:	08 95       	ret

00000152 <__vector_10>:
  return srx_data;
}

//TIM1_CAPT_vect	SIG_INPUT_CAPTURE1	Timer/Counter1 Capture Event
ISR( TIMER1_CAPT_vect )		// rx start
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
  OCR1B = ICR1 + (u16)(BIT_TIME * 1.5);	// scan 1.5 bits after start
 160:	80 91 86 00 	lds	r24, 0x0086
 164:	90 91 87 00 	lds	r25, 0x0087
 168:	80 53       	subi	r24, 0x30	; 48
 16a:	9f 4f       	sbci	r25, 0xFF	; 255
 16c:	90 93 8b 00 	sts	0x008B, r25
 170:	80 93 8a 00 	sts	0x008A, r24
  srx_tmp = 0;				// clear bit storage
 174:	10 92 12 01 	sts	0x0112, r1
  srx_mask = 1;				// bit mask
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 0e 01 	sts	0x010E, r24
  TIFR1 = (1 << OCF1B);			// clear pending interrupt
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	86 bb       	out	0x16, r24	; 22
  if( !(SRXPIN & (1 << SRX)))		// still low
 182:	18 99       	sbic	0x03, 0	; 3
 184:	03 c0       	rjmp	.+6      	; 0x18c <__vector_10+0x3a>
    TIMSK1 = (1 << OCIE1A) | (1 << OCIE1B);	// wait for first bit
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	80 93 6f 00 	sts	0x006F, r24
}
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_12>:

//TIM1_COMPB_vect	SIG_OUTPUT_COMPARE1B	Timer/Counter1 Compare Match B
ISR( TIMER1_COMPB_vect )
{
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
  u8 in = SRXPIN;			// scan rx line
 1ac:	93 b1       	in	r25, 0x03	; 3

  if( srx_mask ){
 1ae:	80 91 0e 01 	lds	r24, 0x010E
 1b2:	88 23       	and	r24, r24
 1b4:	b9 f0       	breq	.+46     	; 0x1e4 <__vector_12+0x4a>
    if( in & 1<<SRX )
 1b6:	90 ff       	sbrs	r25, 0
 1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <__vector_12+0x2e>
      srx_tmp |= srx_mask;
 1ba:	80 91 0e 01 	lds	r24, 0x010E
 1be:	90 91 12 01 	lds	r25, 0x0112
 1c2:	89 2b       	or	r24, r25
 1c4:	80 93 12 01 	sts	0x0112, r24
    srx_mask <<= 1;
 1c8:	80 91 0e 01 	lds	r24, 0x010E
 1cc:	88 0f       	add	r24, r24
 1ce:	80 93 0e 01 	sts	0x010E, r24
    OCR1B += BIT_TIME;			// next bit slice
 1d2:	ea e8       	ldi	r30, 0x8A	; 138
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	91 81       	ldd	r25, Z+1	; 0x01
 1da:	85 57       	subi	r24, 0x75	; 117
 1dc:	9f 4f       	sbci	r25, 0xFF	; 255
 1de:	91 83       	std	Z+1, r25	; 0x01
 1e0:	80 83       	st	Z, r24
 1e2:	0c c0       	rjmp	.+24     	; 0x1fc <__vector_12+0x62>
  }else{
    srx_done = 1;			// mark rx data valid
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	80 93 11 01 	sts	0x0111, r24
    srx_data = srx_tmp;			// store rx data
 1ea:	80 91 12 01 	lds	r24, 0x0112
 1ee:	80 93 0f 01 	sts	0x010F, r24
    TIFR1 = (1 << ICF1);			// clear pending interrupt
 1f2:	80 e2       	ldi	r24, 0x20	; 32
 1f4:	86 bb       	out	0x16, r24	; 22
    TIMSK1 = (1 << ICIE1) | (1 << OCIE1A);        // enable tx and wait for start
 1f6:	82 e2       	ldi	r24, 0x22	; 34
 1f8:	80 93 6f 00 	sts	0x006F, r24
  }
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <sputchar>:


void sputchar( u8 val )			// send byte
{
  while( stx_count );			// until last byte finished
 20e:	90 91 10 01 	lds	r25, 0x0110
 212:	91 11       	cpse	r25, r1
 214:	fc cf       	rjmp	.-8      	; 0x20e <sputchar>
  stx_data = ~val;			// invert data for Stop bit generation
 216:	80 95       	com	r24
 218:	80 93 0d 01 	sts	0x010D, r24
  stx_count = 10;			// 10 bits: Start + data + Stop
 21c:	8a e0       	ldi	r24, 0x0A	; 10
 21e:	80 93 10 01 	sts	0x0110, r24
 222:	08 95       	ret

00000224 <__vector_11>:
    sputchar( *txt++ );
}

//TIM1_COMPA_vect	SIG_OUTPUT_COMPARE1A	Timer/Counter1 Compare Match A
ISR( TIMER1_COMPA_vect )		// tx bit
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
  u8 dout;
  u8 count;

  OCR1A += BIT_TIME;			// next bit slice
 236:	e8 e8       	ldi	r30, 0x88	; 136
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	91 81       	ldd	r25, Z+1	; 0x01
 23e:	85 57       	subi	r24, 0x75	; 117
 240:	9f 4f       	sbci	r25, 0xFF	; 255
 242:	91 83       	std	Z+1, r25	; 0x01
 244:	80 83       	st	Z, r24
  count = stx_count;
 246:	80 91 10 01 	lds	r24, 0x0110

  if( count ){
 24a:	88 23       	and	r24, r24
 24c:	99 f0       	breq	.+38     	; 0x274 <__vector_11+0x50>
    stx_count = --count;		// count down
 24e:	81 50       	subi	r24, 0x01	; 1
 250:	80 93 10 01 	sts	0x0110, r24
    dout = (1 << COM1A1);			// set low on next compare
    if( count != 9 ){			// no start bit
 254:	89 30       	cpi	r24, 0x09	; 9
 256:	59 f0       	breq	.+22     	; 0x26e <__vector_11+0x4a>
      if( !(stx_data & 1) )		// test inverted data
 258:	80 91 0d 01 	lds	r24, 0x010D
 25c:	80 fd       	sbrc	r24, 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <__vector_11+0x40>
	dout = (1 << COM1A1) | (1<<COM1A0);	// set high on next compare
 260:	90 ec       	ldi	r25, 0xC0	; 192
 262:	01 c0       	rjmp	.+2      	; 0x266 <__vector_11+0x42>
  OCR1A += BIT_TIME;			// next bit slice
  count = stx_count;

  if( count ){
    stx_count = --count;		// count down
    dout = (1 << COM1A1);			// set low on next compare
 264:	90 e8       	ldi	r25, 0x80	; 128
    if( count != 9 ){			// no start bit
      if( !(stx_data & 1) )		// test inverted data
	dout = (1 << COM1A1) | (1<<COM1A0);	// set high on next compare
      stx_data >>= 1;			// shift zero in from left
 266:	86 95       	lsr	r24
 268:	80 93 0d 01 	sts	0x010D, r24
 26c:	01 c0       	rjmp	.+2      	; 0x270 <__vector_11+0x4c>
  OCR1A += BIT_TIME;			// next bit slice
  count = stx_count;

  if( count ){
    stx_count = --count;		// count down
    dout = (1 << COM1A1);			// set low on next compare
 26e:	90 e8       	ldi	r25, 0x80	; 128
    if( count != 9 ){			// no start bit
      if( !(stx_data & 1) )		// test inverted data
	dout = (1 << COM1A1) | (1<<COM1A0);	// set high on next compare
      stx_data >>= 1;			// shift zero in from left
    }
    TCCR1A = dout;
 270:	90 93 80 00 	sts	0x0080, r25
  }
}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
