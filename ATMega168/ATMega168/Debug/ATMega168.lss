
ATMega168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000732  000007c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000732  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  0080010c  0080010c  000007d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000804  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001793  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076b  00000000  00000000  0000216f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000895  00000000  00000000  000028da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  00003170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004af  00000000  00000000  00003584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b94  00000000  00000000  00003a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000045c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_14>
  3c:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 32       	cpi	r26, 0x2B	; 43
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 aa 01 	call	0x354	; 0x354 <main>
  9e:	0c 94 97 03 	jmp	0x72e	; 0x72e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <System_Init>:
	front[0] = DirtyDawg.front_sensor / 100;
	front[1] = (DirtyDawg.front_sensor - (front[0] * 100 )) / 10;
	front[2] = (DirtyDawg.front_sensor - (front[0] * 100 )) - front[1] * 10;

	back[0] = DirtyDawg.back_sensor / 100;
	back[1] = (DirtyDawg.back_sensor - (back[0] * 100 )) / 10;
  a6:	e8 e1       	ldi	r30, 0x18	; 24
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	13 86       	std	Z+11, r1	; 0x0b
  ac:	78 94       	sei
  ae:	88 e0       	ldi	r24, 0x08	; 8
  b0:	80 93 69 00 	sts	0x0069, r24
	back[2] = (DirtyDawg.back_sensor - (back[0] * 100 )) - back[1] * 10;
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	8d bb       	out	0x1d, r24	; 29
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	80 93 68 00 	sts	0x0068, r24
  be:	80 e1       	ldi	r24, 0x10	; 16
  c0:	80 93 6d 00 	sts	0x006D, r24

	left[0] = DirtyDawg.left_sensor / 100;
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	84 b9       	out	0x04, r24	; 4
  c8:	88 ee       	ldi	r24, 0xE8	; 232
  ca:	8a b9       	out	0x0a, r24	; 10
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	89 e6       	ldi	r24, 0x69	; 105
  d0:	98 e1       	ldi	r25, 0x18	; 24
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <System_Init+0x2c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <System_Init+0x36>
  dc:	00 00       	nop
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	85 b9       	out	0x05, r24	; 5
	left[1] = (DirtyDawg.left_sensor - (left[0] * 100 )) / 10;
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	89 e6       	ldi	r24, 0x69	; 105
  e6:	98 e1       	ldi	r25, 0x18	; 24
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <System_Init+0x42>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <System_Init+0x4c>
  f2:	00 00       	nop
  f4:	15 b8       	out	0x05, r1	; 5
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	83 87       	std	Z+11, r24	; 0x0b
  fa:	08 95       	ret

000000fc <UART_Init>:
  fc:	22 e0       	ldi	r18, 0x02	; 2
  fe:	20 93 c0 00 	sts	0x00C0, r18
	left[2] = (DirtyDawg.left_sensor - (left[0] * 100 )) - left[1] * 10;
 102:	9c 01       	movw	r18, r24
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	60 e4       	ldi	r22, 0x40	; 64
 10a:	72 e4       	ldi	r23, 0x42	; 66
 10c:	8f e0       	ldi	r24, 0x0F	; 15
 10e:	90 e0       	ldi	r25, 0x00	; 0

	right[0] = DirtyDawg.right_sensor / 100;
 110:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__divmodsi4>
 114:	21 50       	subi	r18, 0x01	; 1
 116:	31 09       	sbc	r19, r1
 118:	30 93 c5 00 	sts	0x00C5, r19
 11c:	20 93 c4 00 	sts	0x00C4, r18
 120:	88 e1       	ldi	r24, 0x18	; 24
 122:	80 93 c1 00 	sts	0x00C1, r24
 126:	e2 ec       	ldi	r30, 0xC2	; 194
 128:	f0 e0       	ldi	r31, 0x00	; 0
	right[1] = (DirtyDawg.right_sensor - (right[0] * 100 )) / 10;
 12a:	86 e0       	ldi	r24, 0x06	; 6
 12c:	80 83       	st	Z, r24
 12e:	80 81       	ld	r24, Z
 130:	80 83       	st	Z, r24
 132:	e8 e1       	ldi	r30, 0x18	; 24
 134:	f1 e0       	ldi	r31, 0x01	; 1
 136:	83 85       	ldd	r24, Z+11	; 0x0b
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	83 87       	std	Z+11, r24	; 0x0b
 13c:	08 95       	ret

0000013e <Uart_Flush>:
 13e:	80 91 c0 00 	lds	r24, 0x00C0
	right[2] = (DirtyDawg.right_sensor - (right[0] * 100 )) - right[1] * 10;
 142:	88 23       	and	r24, r24
 144:	44 f4       	brge	.+16     	; 0x156 <Uart_Flush+0x18>
 146:	a6 ec       	ldi	r26, 0xC6	; 198
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	e0 ec       	ldi	r30, 0xC0	; 192
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	8c 91       	ld	r24, X
 150:	80 81       	ld	r24, Z
 152:	88 23       	and	r24, r24
 154:	e4 f3       	brlt	.-8      	; 0x14e <Uart_Flush+0x10>
 156:	08 95       	ret

00000158 <BT_Recieve>:
 158:	e0 ec       	ldi	r30, 0xC0	; 192
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	88 23       	and	r24, r24
 160:	ec f7       	brge	.-6      	; 0x15c <BT_Recieve+0x4>

	for(int i = 0; i < 3; i++){
		front[i] += '0';
 162:	80 91 c6 00 	lds	r24, 0x00C6
 166:	08 95       	ret

00000168 <BT_Send>:
		back[i] += '0';
 168:	e0 ec       	ldi	r30, 0xC0	; 192
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	90 81       	ld	r25, Z
 16e:	95 ff       	sbrs	r25, 5
 170:	fd cf       	rjmp	.-6      	; 0x16c <BT_Send+0x4>
		left[i] += '0';
 172:	80 93 c6 00 	sts	0x00C6, r24
 176:	08 95       	ret

00000178 <BT_Init>:
		right[i] += '0';
 178:	2f e3       	ldi	r18, 0x3F	; 63
 17a:	8d e0       	ldi	r24, 0x0D	; 13
 17c:	93 e0       	ldi	r25, 0x03	; 3
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0

	right[0] = DirtyDawg.right_sensor / 100;
	right[1] = (DirtyDawg.right_sensor - (right[0] * 100 )) / 10;
	right[2] = (DirtyDawg.right_sensor - (right[0] * 100 )) - right[1] * 10;

	for(int i = 0; i < 3; i++){
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <BT_Init+0x6>
 186:	00 c0       	rjmp	.+0      	; 0x188 <BT_Init+0x10>
		left[i] += '0';
		right[i] += '0';
	}

	// Change state 
	DirtyDawg.state = LCD_STATE;
 188:	00 00       	nop
 18a:	8d e2       	ldi	r24, 0x2D	; 45
 18c:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
}
 190:	8d e2       	ldi	r24, 0x2D	; 45
 192:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
 196:	8d e2       	ldi	r24, 0x2D	; 45
 198:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
 19c:	8a e0       	ldi	r24, 0x0A	; 10
	
	//Wait for 1 second to ensure the device has power
	_delay_ms(1000);

	for(int i = 0; i<3; i++) BT_Send('-');
	BT_Send(0x0A); //NL
 19e:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
	BT_Send(0x0D); //CR
 1a2:	8d e0       	ldi	r24, 0x0D	; 13
 1a4:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	2f e3       	ldi	r18, 0x3F	; 63
 1aa:	8d e0       	ldi	r24, 0x0D	; 13
 1ac:	93 e0       	ldi	r25, 0x03	; 3
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <BT_Init+0x36>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <BT_Init+0x40>
 1b8:	00 00       	nop
	_delay_ms(1000);
	LCD_Byte(LCD_CLEAR, LCD_CMD);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Byte>
 1c2:	8b e7       	ldi	r24, 0x7B	; 123
 1c4:	92 e9       	ldi	r25, 0x92	; 146
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <BT_Init+0x4e>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <BT_Init+0x54>
 1cc:	00 00       	nop
	_delay_ms(150); //5 ms delay
	Uart_Flush();
 1ce:	0e 94 9f 00 	call	0x13e	; 0x13e <Uart_Flush>
	
	return 0;
}
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	08 95       	ret

000001d8 <BT_Connect>:

void BT_Connect(void){
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	2c 97       	sbiw	r28, 0x0c	; 12
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
 1f4:	2f e3       	ldi	r18, 0x3F	; 63
 1f6:	8d e0       	ldi	r24, 0x0D	; 13
 1f8:	93 e0       	ldi	r25, 0x03	; 3
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <BT_Connect+0x22>
 202:	00 c0       	rjmp	.+0      	; 0x204 <BT_Connect+0x2c>
 204:	00 00       	nop

	//Wait for 1 second to ensure the device has power
	_delay_ms(1000);

	for(int i = 0; i < 3; i++) BT_Send('-');
 206:	8d e2       	ldi	r24, 0x2D	; 45
 208:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
 20c:	8d e2       	ldi	r24, 0x2D	; 45
 20e:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
 212:	8d e2       	ldi	r24, 0x2D	; 45
 214:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
	BT_Send(LF); //Line feed
 218:	8a e0       	ldi	r24, 0x0A	; 10
 21a:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
	BT_Send(CR); //Carriage return
 21e:	8d e0       	ldi	r24, 0x0D	; 13
 220:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
 224:	ef e3       	ldi	r30, 0x3F	; 63
 226:	fd e0       	ldi	r31, 0x0D	; 13
 228:	23 e0       	ldi	r18, 0x03	; 3
 22a:	e1 50       	subi	r30, 0x01	; 1
 22c:	f0 40       	sbci	r31, 0x00	; 0
 22e:	20 40       	sbci	r18, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <BT_Connect+0x52>
 232:	00 c0       	rjmp	.+0      	; 0x234 <BT_Connect+0x5c>
 234:	00 00       	nop
	_delay_ms(1000);
	LCD_Byte(LCD_CLEAR, LCD_CMD);
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Byte>
 23e:	8b e7       	ldi	r24, 0x7B	; 123
 240:	92 e9       	ldi	r25, 0x92	; 146
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <BT_Connect+0x6a>
 246:	00 c0       	rjmp	.+0      	; 0x248 <BT_Connect+0x70>
 248:	00 00       	nop
	_delay_ms(150); //5 ms delay
	Uart_Flush();
 24a:	0e 94 9f 00 	call	0x13e	; 0x13e <Uart_Flush>

	//Sends command to enter command mode
	for(int i = 0; i < 3; i++) BT_Send('$');
 24e:	84 e2       	ldi	r24, 0x24	; 36
 250:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
 254:	84 e2       	ldi	r24, 0x24	; 36
 256:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
 25a:	84 e2       	ldi	r24, 0x24	; 36
 25c:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>

	//Sends response to LCD screen
	LCD_Byte(BT_Recieve(), LCD_CHR);
 260:	0e 94 ac 00 	call	0x158	; 0x158 <BT_Recieve>
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Byte>
	LCD_Byte(BT_Recieve(), LCD_CHR);
 26a:	0e 94 ac 00 	call	0x158	; 0x158 <BT_Recieve>
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Byte>
	LCD_Byte(BT_Recieve(), LCD_CHR);
 274:	0e 94 ac 00 	call	0x158	; 0x158 <BT_Recieve>
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Byte>

	Uart_Flush();
 27e:	0e 94 9f 00 	call	0x13e	; 0x13e <Uart_Flush>
		
	// Address to BlueSmirf in the car
	unsigned char adress[12] = {'0','0','0','6','6','6','7','6','A','0','A','A'};
 282:	8c e0       	ldi	r24, 0x0C	; 12
 284:	e0 e0       	ldi	r30, 0x00	; 0
 286:	f1 e0       	ldi	r31, 0x01	; 1
 288:	de 01       	movw	r26, r28
 28a:	11 96       	adiw	r26, 0x01	; 1
 28c:	01 90       	ld	r0, Z+
 28e:	0d 92       	st	X+, r0
 290:	8a 95       	dec	r24
 292:	e1 f7       	brne	.-8      	; 0x28c <BT_Connect+0xb4>
		
	// Command to connect with BlueSmirf in the car
	BT_Send('c');
 294:	83 e6       	ldi	r24, 0x63	; 99
 296:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
	BT_Send(',');
 29a:	8c e2       	ldi	r24, 0x2C	; 44
 29c:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
 2a0:	8e 01       	movw	r16, r28
 2a2:	0f 5f       	subi	r16, 0xFF	; 255
 2a4:	1f 4f       	sbci	r17, 0xFF	; 255
 2a6:	7e 01       	movw	r14, r28
 2a8:	9d e0       	ldi	r25, 0x0D	; 13
 2aa:	e9 0e       	add	r14, r25
 2ac:	f1 1c       	adc	r15, r1
	for(int i = 0; i < 12;i++){
		BT_Send(adress[i]);
 2ae:	f8 01       	movw	r30, r16
 2b0:	81 91       	ld	r24, Z+
 2b2:	8f 01       	movw	r16, r30
 2b4:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
	unsigned char adress[12] = {'0','0','0','6','6','6','7','6','A','0','A','A'};
		
	// Command to connect with BlueSmirf in the car
	BT_Send('c');
	BT_Send(',');
	for(int i = 0; i < 12;i++){
 2b8:	0e 15       	cp	r16, r14
 2ba:	1f 05       	cpc	r17, r15
 2bc:	c1 f7       	brne	.-16     	; 0x2ae <BT_Connect+0xd6>
		BT_Send(adress[i]);
	}
	BT_Send(LF);
 2be:	8a e0       	ldi	r24, 0x0A	; 10
 2c0:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
	BT_Send(CR);
 2c4:	8d e0       	ldi	r24, 0x0D	; 13
 2c6:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>

	// Ignore the message from BlueSmirf "TRYING"
	while(BT_Recieve() != LF);
 2ca:	0e 94 ac 00 	call	0x158	; 0x158 <BT_Recieve>
 2ce:	8a 30       	cpi	r24, 0x0A	; 10
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <BT_Connect+0xf2>

	if(BT_Recieve() == '%')
 2d2:	0e 94 ac 00 	call	0x158	; 0x158 <BT_Recieve>
 2d6:	85 32       	cpi	r24, 0x25	; 37
 2d8:	29 f4       	brne	.+10     	; 0x2e4 <BT_Connect+0x10c>
		DirtyDawg.status |= BT_CONNECTED;
 2da:	e8 e1       	ldi	r30, 0x18	; 24
 2dc:	f1 e0       	ldi	r31, 0x01	; 1
 2de:	83 85       	ldd	r24, Z+11	; 0x0b
 2e0:	88 60       	ori	r24, 0x08	; 8
 2e2:	83 87       	std	Z+11, r24	; 0x0b

	// Ignore the message from BlueSmirf "CONNECTING"
	while(BT_Recieve() != LF);
 2e4:	0e 94 ac 00 	call	0x158	; 0x158 <BT_Recieve>
 2e8:	8a 30       	cpi	r24, 0x0A	; 10
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <BT_Connect+0x10c>

	LCD_Byte('S',LCD_CHR);
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	83 e5       	ldi	r24, 0x53	; 83
 2f0:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Byte>
	
}
 2f4:	2c 96       	adiw	r28, 0x0c	; 12
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	f8 94       	cli
 2fa:	de bf       	out	0x3e, r29	; 62
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	cd bf       	out	0x3d, r28	; 61
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	08 95       	ret

0000030e <Error>:
	UDR0 = data;
	//PORTB = (1<<PORTB1);
	//_delay_ms(1000);
}

void Error(unsigned int errorcode){
 30e:	d8 2f       	mov	r29, r24
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
 310:	c1 2c       	mov	r12, r1
 312:	d1 2c       	mov	r13, r1
 314:	76 01       	movw	r14, r12
	for(;;){
		if(ticks%10000 == 0){
 316:	0f 2e       	mov	r0, r31
 318:	f0 e1       	ldi	r31, 0x10	; 16
 31a:	8f 2e       	mov	r8, r31
 31c:	f7 e2       	ldi	r31, 0x27	; 39
 31e:	9f 2e       	mov	r9, r31
 320:	a1 2c       	mov	r10, r1
 322:	b1 2c       	mov	r11, r1
 324:	f0 2d       	mov	r31, r0
			PINB = (1<<PORTB1);
 326:	c2 e0       	ldi	r28, 0x02	; 2
void Error(unsigned int errorcode){
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
	for(;;){
		if(ticks%10000 == 0){
 328:	c7 01       	movw	r24, r14
 32a:	b6 01       	movw	r22, r12
 32c:	a5 01       	movw	r20, r10
 32e:	94 01       	movw	r18, r8
 330:	0e 94 56 03 	call	0x6ac	; 0x6ac <__udivmodsi4>
 334:	67 2b       	or	r22, r23
 336:	68 2b       	or	r22, r24
 338:	69 2b       	or	r22, r25
 33a:	21 f4       	brne	.+8      	; 0x344 <Error+0x36>
			PINB = (1<<PORTB1);
 33c:	c3 b9       	out	0x03, r28	; 3
			BT_Send(errorcode);
 33e:	8d 2f       	mov	r24, r29
 340:	0e 94 b4 00 	call	0x168	; 0x168 <BT_Send>
		}
		if(ticks%10000 == 50000){
			PINB = (0<<PORTB1);
		}
		ticks++;
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	c8 1a       	sub	r12, r24
 348:	d8 0a       	sbc	r13, r24
 34a:	e8 0a       	sbc	r14, r24
 34c:	f8 0a       	sbc	r15, r24
	}
 34e:	ec cf       	rjmp	.-40     	; 0x328 <Error+0x1a>

00000350 <Green_LED_On>:
void Red_LED_Off(void){
	PORTB &= (0<<PORTB1);
}

void Green_LED_On(void){
	PORTD |= (1<<PORTD6);
 350:	5e 9a       	sbi	0x0b, 6	; 11
 352:	08 95       	ret

00000354 <main>:
#define ARR_SIZE(x)  (sizeof(x) / sizeof(x[0]))

int main(void){

	// Sets the starting state
	DirtyDawg.state = LCD_STATE;
 354:	c8 e1       	ldi	r28, 0x18	; 24
 356:	d1 e0       	ldi	r29, 0x01	; 1
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	8c 87       	std	Y+12, r24	; 0x0c

	// Initiate the hardware
	System_Init();
 35c:	0e 94 53 00 	call	0xa6	; 0xa6 <System_Init>
	
	// Initiate the TWI bus as a master
	TWI_Master_Init();
 360:	0e 94 3d 03 	call	0x67a	; 0x67a <TWI_Master_Init>

	// Initiate the LCD Screen
	LCD_Init();
 364:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_Init>
	
	// Initiate the hardware defined UART
	UART_Init(19200);
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	9b e4       	ldi	r25, 0x4B	; 75
 36c:	0e 94 7e 00 	call	0xfc	; 0xfc <UART_Init>
	
	// Initiate the software define UART
	suart_init();
 370:	0e 94 1c 02 	call	0x438	; 0x438 <suart_init>
	
	// Initiate/Clear the BlueSmirf from previous commands
	BT_Init();
 374:	0e 94 bc 00 	call	0x178	; 0x178 <BT_Init>
	
	// Connect the BlueSmirf to the car
	while(!(DirtyDawg.status & BT_CONNECTED))
 378:	8b 85       	ldd	r24, Y+11	; 0x0b
 37a:	83 fd       	sbrc	r24, 3
 37c:	05 c0       	rjmp	.+10     	; 0x388 <main+0x34>
		BT_Connect();
 37e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <BT_Connect>
	
	// Initiate/Clear the BlueSmirf from previous commands
	BT_Init();
	
	// Connect the BlueSmirf to the car
	while(!(DirtyDawg.status & BT_CONNECTED))
 382:	8b 85       	ldd	r24, Y+11	; 0x0b
 384:	83 ff       	sbrs	r24, 3
 386:	fb cf       	rjmp	.-10     	; 0x37e <main+0x2a>
		BT_Connect();
	  
	while(TRUE)
		Green_LED_On();
 388:	0e 94 a8 01 	call	0x350	; 0x350 <Green_LED_On>
 38c:	fd cf       	rjmp	.-6      	; 0x388 <main+0x34>

0000038e <__vector_5>:
			
		}
	}	
}

ISR(PCINT2_vect){
 38e:	1f 92       	push	r1
 390:	0f 92       	push	r0
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	0f 92       	push	r0
 396:	11 24       	eor	r1, r1

}
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <__vector_18>:
	BT_Connect();
}

*/

ISR(USART_RX_vect){
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	ef 93       	push	r30
 3c6:	ff 93       	push	r31
	LCD_Byte('*',LCD_CHR);
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	8a e2       	ldi	r24, 0x2A	; 42
 3cc:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Byte>
	uint8_t data;
	data = BT_Recieve();
 3d0:	0e 94 ac 00 	call	0x158	; 0x158 <BT_Recieve>
	
	// Ignore command response
	if(data == '%')
 3d4:	85 32       	cpi	r24, 0x25	; 37
 3d6:	29 f4       	brne	.+10     	; 0x3e2 <__vector_18+0x40>
		while(BT_Recieve() != LF);
 3d8:	0e 94 ac 00 	call	0x158	; 0x158 <BT_Recieve>
 3dc:	8a 30       	cpi	r24, 0x0A	; 10
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <__vector_18+0x36>
 3e0:	18 c0       	rjmp	.+48     	; 0x412 <__vector_18+0x70>
	
	// Get sensor data
	if(data == 'S'){
 3e2:	83 35       	cpi	r24, 0x53	; 83
 3e4:	b1 f4       	brne	.+44     	; 0x412 <__vector_18+0x70>
		DirtyDawg.front_sensor = BT_Recieve();
 3e6:	0e 94 ac 00 	call	0x158	; 0x158 <BT_Recieve>
 3ea:	c8 e1       	ldi	r28, 0x18	; 24
 3ec:	d1 e0       	ldi	r29, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	9d 83       	std	Y+5, r25	; 0x05
 3f2:	8c 83       	std	Y+4, r24	; 0x04
		DirtyDawg.back_sensor = BT_Recieve();
 3f4:	0e 94 ac 00 	call	0x158	; 0x158 <BT_Recieve>
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	9f 83       	std	Y+7, r25	; 0x07
 3fc:	8e 83       	std	Y+6, r24	; 0x06
		DirtyDawg.left_sensor = BT_Recieve();
 3fe:	0e 94 ac 00 	call	0x158	; 0x158 <BT_Recieve>
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	99 83       	std	Y+1, r25	; 0x01
 406:	88 83       	st	Y, r24
		DirtyDawg.right_sensor = BT_Recieve();
 408:	0e 94 ac 00 	call	0x158	; 0x158 <BT_Recieve>
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	9b 83       	std	Y+3, r25	; 0x03
 410:	8a 83       	std	Y+2, r24	; 0x02
	}
}
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	bf 91       	pop	r27
 41c:	af 91       	pop	r26
 41e:	9f 91       	pop	r25
 420:	8f 91       	pop	r24
 422:	7f 91       	pop	r23
 424:	6f 91       	pop	r22
 426:	5f 91       	pop	r21
 428:	4f 91       	pop	r20
 42a:	3f 91       	pop	r19
 42c:	2f 91       	pop	r18
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <suart_init>:


void suart_init( void )
{
	// Enable interrupt
	sei();
 438:	78 94       	sei
	
	// Set the port HIGH
	SBIT(PORTD,STX) = 1;
 43a:	5b 9a       	sbi	0x0b, 3	; 11

	// Set the prescaler to 1
	TCCR0B = (1 << CS00);	
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	85 bd       	out	0x25, r24	; 37
	
	// Enable output compare interrupt
	TIMSK0 = (1 << OCIE0A);		
 440:	92 e0       	ldi	r25, 0x02	; 2
 442:	90 93 6e 00 	sts	0x006E, r25

	// Falling edge
	EICRA = (1 << ISC01);
 446:	90 93 69 00 	sts	0x0069, r25
	
	// Enable edge interrupt			
	EIMSK = (1 << INT0);			
 44a:	8d bb       	out	0x1d, r24	; 29

	// Nothing to send
	stx_count = 0;	
 44c:	10 92 28 01 	sts	0x0128, r1
	
	// Nothing to receive			
	srx_done = 0;	
 450:	10 92 29 01 	sts	0x0129, r1
	
	// Sets the output	        
	STXDDR |= 1 << STX;			
 454:	53 9a       	sbi	0x0a, 3	; 10
 456:	08 95       	ret

00000458 <__vector_1>:
	return srx_data;
}


ISR (INT0_vect)    // RX start
{
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	8f 93       	push	r24
	// scan 1.5 bits after start (to set timing right)
	OCR0B = TCNT0 + (u8)((BIT_TIME * 3) / 2);
 464:	86 b5       	in	r24, 0x26	; 38
 466:	80 53       	subi	r24, 0x30	; 48
 468:	88 bd       	out	0x28, r24	; 40

	// Clear bit storage
	srx_tmp = 0;  
 46a:	10 92 2a 01 	sts	0x012A, r1
	
	// Set bit-mask      
	srx_mask = 1;        
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	80 93 26 01 	sts	0x0126, r24
	if( !(SRXPIN & 1<<SRX))  {  // still low
 474:	4a 99       	sbic	0x09, 2	; 9
 476:	04 c0       	rjmp	.+8      	; 0x480 <__vector_1+0x28>
		EIMSK &= ~(1 << INT0);			// disable edge interrupt
 478:	e8 98       	cbi	0x1d, 0	; 29
		TIMSK0 = 1<<OCIE0A^1<<OCIE0B;  // wait for first bit
 47a:	86 e0       	ldi	r24, 0x06	; 6
 47c:	80 93 6e 00 	sts	0x006E, r24
	}
	TIFR0 = (1<<OCF0B);      // clear pending interrupt ? why does that output compare int occur?
 480:	84 e0       	ldi	r24, 0x04	; 4
 482:	85 bb       	out	0x15, r24	; 21
	EIFR |= (1 << INTF0);		// clear any pending edge interrupt
 484:	e0 9a       	sbi	0x1c, 0	; 28
}
 486:	8f 91       	pop	r24
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__vector_15>:


ISR (TIMER0_COMPB_vect)
{
 492:	1f 92       	push	r1
 494:	0f 92       	push	r0
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	0f 92       	push	r0
 49a:	11 24       	eor	r1, r1
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
	u8 in = SRXPIN;      // scan RX line
 4a0:	99 b1       	in	r25, 0x09	; 9

	if (srx_mask) {
 4a2:	80 91 26 01 	lds	r24, 0x0126
 4a6:	88 23       	and	r24, r24
 4a8:	71 f0       	breq	.+28     	; 0x4c6 <__vector_15+0x34>
		if (in & 1 << SRX)
 4aa:	92 ff       	sbrs	r25, 2
 4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <__vector_15+0x26>
			srx_tmp |= srx_mask;
 4ae:	90 91 2a 01 	lds	r25, 0x012A
 4b2:	98 2b       	or	r25, r24
 4b4:	90 93 2a 01 	sts	0x012A, r25
		srx_mask <<= 1; 
 4b8:	88 0f       	add	r24, r24
 4ba:	80 93 26 01 	sts	0x0126, r24
		OCR0B += BIT_TIME;      // next bit slice
 4be:	88 b5       	in	r24, 0x28	; 40
 4c0:	85 57       	subi	r24, 0x75	; 117
 4c2:	88 bd       	out	0x28, r24	; 40
 4c4:	0c c0       	rjmp	.+24     	; 0x4de <__vector_15+0x4c>
		} else {
		srx_done = 1;      // mark RX data valid
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	80 93 29 01 	sts	0x0129, r24
		srx_data = srx_tmp;      // store RX data
 4cc:	90 91 2a 01 	lds	r25, 0x012A
 4d0:	90 93 27 01 	sts	0x0127, r25

		TIMSK0 = 1<<OCIE0A;        // enable TX and wait for start
 4d4:	92 e0       	ldi	r25, 0x02	; 2
 4d6:	90 93 6e 00 	sts	0x006E, r25
		EIFR |= (1 << INTF0);		// clear any pending edge interrupt: This hinders the in0-vect from beeing triggerd again just now which may occur by falling edges in the serial data bits
 4da:	e0 9a       	sbi	0x1c, 0	; 28
		EIMSK = 1 << INT0;	// Re-enable edge interrupt
 4dc:	8d bb       	out	0x1d, r24	; 29
	}

}
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <__vector_14>:
	sputchar (*txt++);
}


ISR (TIMER0_COMPA_vect)    // TX bit
{
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	8f 93       	push	r24
 4f8:	9f 93       	push	r25
	u8 dout;
	u8 count;

	OCR0A += BIT_TIME;      // Next bit slice
 4fa:	87 b5       	in	r24, 0x27	; 39
 4fc:	85 57       	subi	r24, 0x75	; 117
 4fe:	87 bd       	out	0x27, r24	; 39
	count = stx_count;
 500:	80 91 28 01 	lds	r24, 0x0128

	if (count) {
 504:	88 23       	and	r24, r24
 506:	99 f0       	breq	.+38     	; 0x52e <__stack+0x2f>
		stx_count = --count;    // Count down
 508:	81 50       	subi	r24, 0x01	; 1
 50a:	80 93 28 01 	sts	0x0128, r24

		dout = 0;
		if (count != 9) {      // No start bit
 50e:	89 30       	cpi	r24, 0x09	; 9
 510:	49 f0       	breq	.+18     	; 0x524 <__stack+0x25>
			if (!(stx_data & 1))    // Test inverted data
 512:	80 91 25 01 	lds	r24, 0x0125
 516:	98 2f       	mov	r25, r24
 518:	90 95       	com	r25
 51a:	91 70       	andi	r25, 0x01	; 1

			dout = 1;
			stx_data >>= 1;      // Shift zero in from left
 51c:	86 95       	lsr	r24
 51e:	80 93 25 01 	sts	0x0125, r24
 522:	01 c0       	rjmp	.+2      	; 0x526 <__stack+0x27>
	count = stx_count;

	if (count) {
		stx_count = --count;    // Count down

		dout = 0;
 524:	90 e0       	ldi	r25, 0x00	; 0

			dout = 1;
			stx_data >>= 1;      // Shift zero in from left
		}

		SBIT(PORTD,STX) = dout;
 526:	90 fd       	sbrc	r25, 0
 528:	5b 9a       	sbi	0x0b, 3	; 11
 52a:	90 ff       	sbrs	r25, 0
 52c:	5b 98       	cbi	0x0b, 3	; 11
	}
}
 52e:	9f 91       	pop	r25
 530:	8f 91       	pop	r24
 532:	0f 90       	pop	r0
 534:	0f be       	out	0x3f, r0	; 63
 536:	0f 90       	pop	r0
 538:	1f 90       	pop	r1
 53a:	18 95       	reti

0000053c <Write_Byte>:
		LCD_Byte(row2[i], LCD_CHR);
	}

}

void Write_Byte(uint8_t addr, uint8_t bits){
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	c8 2f       	mov	r28, r24
 542:	d6 2f       	mov	r29, r22
	
		
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 544:	84 ea       	ldi	r24, 0xA4	; 164
 546:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 54a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <TWI_Busy>
 54e:	89 2b       	or	r24, r25
 550:	e1 f3       	breq	.-8      	; 0x54a <Write_Byte+0xe>
	if((TWSR & MASK) != START)Error(START);
 552:	80 91 b9 00 	lds	r24, 0x00B9
 556:	88 7f       	andi	r24, 0xF8	; 248
 558:	88 30       	cpi	r24, 0x08	; 8
 55a:	21 f0       	breq	.+8      	; 0x564 <Write_Byte+0x28>
 55c:	88 e0       	ldi	r24, 0x08	; 8
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 87 01 	call	0x30e	; 0x30e <Error>
		
	//Loads the slave address and set the R/W bit to 0
	TWDR = (addr<<1) | LCD_WRITE;
 564:	cc 0f       	add	r28, r28
 566:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN); 
 56a:	84 e8       	ldi	r24, 0x84	; 132
 56c:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 570:	0e 94 51 03 	call	0x6a2	; 0x6a2 <TWI_Busy>
 574:	89 2b       	or	r24, r25
 576:	e1 f3       	breq	.-8      	; 0x570 <Write_Byte+0x34>
	if((TWSR & MASK) !=  MT_ADDRESS_ACK)Error((TWSR & MASK));
 578:	80 91 b9 00 	lds	r24, 0x00B9
 57c:	88 7f       	andi	r24, 0xF8	; 248
 57e:	88 31       	cpi	r24, 0x18	; 24
 580:	31 f0       	breq	.+12     	; 0x58e <Write_Byte+0x52>
 582:	80 91 b9 00 	lds	r24, 0x00B9
 586:	88 7f       	andi	r24, 0xF8	; 248
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 87 01 	call	0x30e	; 0x30e <Error>
		
	//Sends the data to the slave
	TWDR = bits; //4bits
 58e:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
 592:	84 e8       	ldi	r24, 0x84	; 132
 594:	80 93 bc 00 	sts	0x00BC, r24
	
	while(!TWI_Busy());
 598:	0e 94 51 03 	call	0x6a2	; 0x6a2 <TWI_Busy>
 59c:	89 2b       	or	r24, r25
 59e:	e1 f3       	breq	.-8      	; 0x598 <Write_Byte+0x5c>
	if((TWSR & MASK) !=  MT_BYTE_ACK)Error((TWSR & MASK));
 5a0:	80 91 b9 00 	lds	r24, 0x00B9
 5a4:	88 7f       	andi	r24, 0xF8	; 248
 5a6:	88 32       	cpi	r24, 0x28	; 40
 5a8:	31 f0       	breq	.+12     	; 0x5b6 <Write_Byte+0x7a>
 5aa:	80 91 b9 00 	lds	r24, 0x00B9
 5ae:	88 7f       	andi	r24, 0xF8	; 248
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 87 01 	call	0x30e	; 0x30e <Error>
		
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 5b6:	84 e9       	ldi	r24, 0x94	; 148
 5b8:	80 93 bc 00 	sts	0x00BC, r24
	
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	08 95       	ret

000005c2 <LCD_Toggle_enable>:
	Write_Byte(LCD_ADDR, bits_low);
	LCD_Toggle_enable(bits_low);
	
}

void LCD_Toggle_enable(uint8_t bits){
 5c2:	cf 93       	push	r28
 5c4:	c8 2f       	mov	r28, r24
 5c6:	81 ee       	ldi	r24, 0xE1	; 225
 5c8:	94 e0       	ldi	r25, 0x04	; 4
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <LCD_Toggle_enable+0x8>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <LCD_Toggle_enable+0xe>
 5d0:	00 00       	nop
	
	// Toggles the enable pin on the display to activate the code
//	_delay_ms(DELAY_MS*5);
	_delay_ms(5);
	Write_Byte(LCD_ADDR, (bits | ENABLE));
 5d2:	6c 2f       	mov	r22, r28
 5d4:	64 60       	ori	r22, 0x04	; 4
 5d6:	87 e2       	ldi	r24, 0x27	; 39
 5d8:	0e 94 9e 02 	call	0x53c	; 0x53c <Write_Byte>
 5dc:	81 ee       	ldi	r24, 0xE1	; 225
 5de:	94 e0       	ldi	r25, 0x04	; 4
 5e0:	01 97       	sbiw	r24, 0x01	; 1
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <LCD_Toggle_enable+0x1e>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <LCD_Toggle_enable+0x24>
 5e6:	00 00       	nop
	_delay_ms(5);
	Write_Byte(LCD_ADDR, (bits & ~ENABLE));
 5e8:	6c 2f       	mov	r22, r28
 5ea:	6b 7f       	andi	r22, 0xFB	; 251
 5ec:	87 e2       	ldi	r24, 0x27	; 39
 5ee:	0e 94 9e 02 	call	0x53c	; 0x53c <Write_Byte>
 5f2:	81 ee       	ldi	r24, 0xE1	; 225
 5f4:	94 e0       	ldi	r25, 0x04	; 4
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <LCD_Toggle_enable+0x34>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <LCD_Toggle_enable+0x3a>
 5fc:	00 00       	nop
	_delay_ms(5);
		
}
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <LCD_Byte>:
	LCD_Byte(0x01, LCD_CMD); 
	_delay_ms(DELAY_MS*5); //5 ms delay
	
}

void LCD_Byte(uint8_t bits, uint8_t mode){
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	c6 2f       	mov	r28, r22
 608:	c8 60       	ori	r28, 0x08	; 8
	
	uint8_t bits_high, bits_low;
	
	//Divides the data in two 4 bit values
	bits_high = mode | (bits & 0xF0) | LCD_BACKLIGHT;
 60a:	d8 2f       	mov	r29, r24
 60c:	d0 7f       	andi	r29, 0xF0	; 240
 60e:	dc 2b       	or	r29, r28
	bits_low = mode | ((bits<<4) & 0xF0) | LCD_BACKLIGHT;
 610:	90 e1       	ldi	r25, 0x10	; 16
 612:	89 9f       	mul	r24, r25
 614:	90 01       	movw	r18, r0
 616:	11 24       	eor	r1, r1
 618:	c2 2b       	or	r28, r18
	
	// Send the high bits
	Write_Byte(LCD_ADDR, bits_high);
 61a:	6d 2f       	mov	r22, r29
 61c:	87 e2       	ldi	r24, 0x27	; 39
 61e:	0e 94 9e 02 	call	0x53c	; 0x53c <Write_Byte>
	LCD_Toggle_enable(bits_high);
 622:	8d 2f       	mov	r24, r29
 624:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_Toggle_enable>
	
	// Send the low bits
	Write_Byte(LCD_ADDR, bits_low);
 628:	6c 2f       	mov	r22, r28
 62a:	87 e2       	ldi	r24, 0x27	; 39
 62c:	0e 94 9e 02 	call	0x53c	; 0x53c <Write_Byte>
	LCD_Toggle_enable(bits_low);
 630:	8c 2f       	mov	r24, r28
 632:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_Toggle_enable>
	
}
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <LCD_Init>:


void LCD_Init(void){
	
	// Basic initialization
	LCD_Byte(0x33, LCD_CMD); 
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	83 e3       	ldi	r24, 0x33	; 51
 640:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Byte>
	LCD_Byte(0x32, LCD_CMD);
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	82 e3       	ldi	r24, 0x32	; 50
 648:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Byte>
	 
	// Entry mode, move cursor left to right 
	LCD_Byte(0x06, LCD_CMD); 
 64c:	60 e0       	ldi	r22, 0x00	; 0
 64e:	86 e0       	ldi	r24, 0x06	; 6
 650:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Byte>
	
	// Display on, Cursor off, Blink off
	LCD_Byte(0x0C, LCD_CMD); 
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	8c e0       	ldi	r24, 0x0C	; 12
 658:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Byte>
	
	// Set to 4-bit ooperation, 2 lines and 5x7 dots
	LCD_Byte(0x28, LCD_CMD); 
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	88 e2       	ldi	r24, 0x28	; 40
 660:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Byte>
	
	// Clears display and DDRAM
	LCD_Byte(0x01, LCD_CMD); 
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Byte>
 66c:	8f e0       	ldi	r24, 0x0F	; 15
 66e:	97 e2       	ldi	r25, 0x27	; 39
 670:	01 97       	sbiw	r24, 0x01	; 1
 672:	f1 f7       	brne	.-4      	; 0x670 <LCD_Init+0x34>
 674:	00 c0       	rjmp	.+0      	; 0x676 <LCD_Init+0x3a>
 676:	00 00       	nop
 678:	08 95       	ret

0000067a <TWI_Master_Init>:


void TWI_Master_Init (void){
	
	//Sets the power reduction register for TWI to 0.
	PRR &= ~(1<<PRTWI);
 67a:	e4 e6       	ldi	r30, 0x64	; 100
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	80 81       	ld	r24, Z
 680:	8f 77       	andi	r24, 0x7F	; 127
 682:	80 83       	st	Z, r24
	
	//Sets the prescaler to 1 by setting TWPS1 and 0 to 0
	TWSR &= ~(1<<TWPS1) & ~(1<<TWPS0); 
 684:	e9 eb       	ldi	r30, 0xB9	; 185
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	8c 7f       	andi	r24, 0xFC	; 252
 68c:	80 83       	st	Z, r24
	
	//Sets the speed of TWI to 100khz
	TWBR = 0x20;
 68e:	80 e2       	ldi	r24, 0x20	; 32
 690:	80 93 b8 00 	sts	0x00B8, r24
		TWWC - Write Collision Flag
		TWEN - Enable Bit
		TWIE - Interrupt Enable

	************************************************************************/
	TWDR = 0xFF;
 694:	8f ef       	ldi	r24, 0xFF	; 255
 696:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (0<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWWC) | (1<<TWIE) | (1<<TWEN);
 69a:	85 e0       	ldi	r24, 0x05	; 5
 69c:	80 93 bc 00 	sts	0x00BC, r24
 6a0:	08 95       	ret

000006a2 <TWI_Busy>:

}

int TWI_Busy(void){
	//Returns 0 if the MCU is busy
	return TWCR & (1<<TWINT);
 6a2:	80 91 bc 00 	lds	r24, 0x00BC
 6a6:	80 78       	andi	r24, 0x80	; 128
}
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	08 95       	ret

000006ac <__udivmodsi4>:
 6ac:	a1 e2       	ldi	r26, 0x21	; 33
 6ae:	1a 2e       	mov	r1, r26
 6b0:	aa 1b       	sub	r26, r26
 6b2:	bb 1b       	sub	r27, r27
 6b4:	fd 01       	movw	r30, r26
 6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <__udivmodsi4_ep>

000006b8 <__udivmodsi4_loop>:
 6b8:	aa 1f       	adc	r26, r26
 6ba:	bb 1f       	adc	r27, r27
 6bc:	ee 1f       	adc	r30, r30
 6be:	ff 1f       	adc	r31, r31
 6c0:	a2 17       	cp	r26, r18
 6c2:	b3 07       	cpc	r27, r19
 6c4:	e4 07       	cpc	r30, r20
 6c6:	f5 07       	cpc	r31, r21
 6c8:	20 f0       	brcs	.+8      	; 0x6d2 <__udivmodsi4_ep>
 6ca:	a2 1b       	sub	r26, r18
 6cc:	b3 0b       	sbc	r27, r19
 6ce:	e4 0b       	sbc	r30, r20
 6d0:	f5 0b       	sbc	r31, r21

000006d2 <__udivmodsi4_ep>:
 6d2:	66 1f       	adc	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	88 1f       	adc	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	1a 94       	dec	r1
 6dc:	69 f7       	brne	.-38     	; 0x6b8 <__udivmodsi4_loop>
 6de:	60 95       	com	r22
 6e0:	70 95       	com	r23
 6e2:	80 95       	com	r24
 6e4:	90 95       	com	r25
 6e6:	9b 01       	movw	r18, r22
 6e8:	ac 01       	movw	r20, r24
 6ea:	bd 01       	movw	r22, r26
 6ec:	cf 01       	movw	r24, r30
 6ee:	08 95       	ret

000006f0 <__divmodsi4>:
 6f0:	05 2e       	mov	r0, r21
 6f2:	97 fb       	bst	r25, 7
 6f4:	1e f4       	brtc	.+6      	; 0x6fc <__divmodsi4+0xc>
 6f6:	00 94       	com	r0
 6f8:	0e 94 8f 03 	call	0x71e	; 0x71e <__negsi2>
 6fc:	57 fd       	sbrc	r21, 7
 6fe:	07 d0       	rcall	.+14     	; 0x70e <__divmodsi4_neg2>
 700:	0e 94 56 03 	call	0x6ac	; 0x6ac <__udivmodsi4>
 704:	07 fc       	sbrc	r0, 7
 706:	03 d0       	rcall	.+6      	; 0x70e <__divmodsi4_neg2>
 708:	4e f4       	brtc	.+18     	; 0x71c <__divmodsi4_exit>
 70a:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__negsi2>

0000070e <__divmodsi4_neg2>:
 70e:	50 95       	com	r21
 710:	40 95       	com	r20
 712:	30 95       	com	r19
 714:	21 95       	neg	r18
 716:	3f 4f       	sbci	r19, 0xFF	; 255
 718:	4f 4f       	sbci	r20, 0xFF	; 255
 71a:	5f 4f       	sbci	r21, 0xFF	; 255

0000071c <__divmodsi4_exit>:
 71c:	08 95       	ret

0000071e <__negsi2>:
 71e:	90 95       	com	r25
 720:	80 95       	com	r24
 722:	70 95       	com	r23
 724:	61 95       	neg	r22
 726:	7f 4f       	sbci	r23, 0xFF	; 255
 728:	8f 4f       	sbci	r24, 0xFF	; 255
 72a:	9f 4f       	sbci	r25, 0xFF	; 255
 72c:	08 95       	ret

0000072e <_exit>:
 72e:	f8 94       	cli

00000730 <__stop_program>:
 730:	ff cf       	rjmp	.-2      	; 0x730 <__stop_program>
