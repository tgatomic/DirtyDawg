
ATMega168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000486  0000051a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000486  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080011a  0080011a  00000534  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001199  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070e  00000000  00000000  000018c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000816  00000000  00000000  00001fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  000027ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000469  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000858  00000000  00000000  00002fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00003821  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_1>
   8:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_14>
  3c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 32       	cpi	r26, 0x2D	; 45
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  9e:	0c 94 41 02 	jmp	0x482	; 0x482 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <BT_Send>:
	BT_Send('c');
	BT_Send(',');
	for(int i = 0; i < 12;i++){
		BT_Send(adress[i]);
	}
	BT_Send(0x0A); //NL
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
	BT_Send(0x0D); //CR
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	fd cf       	rjmp	.-6      	; 0xaa <BT_Send+0x4>
  b0:	80 93 c6 00 	sts	0x00C6, r24
  b4:	08 95       	ret

000000b6 <Error>:
  b6:	d8 2f       	mov	r29, r24
  b8:	c1 2c       	mov	r12, r1
  ba:	d1 2c       	mov	r13, r1
  bc:	76 01       	movw	r14, r12
  be:	0f 2e       	mov	r0, r31
	//Wait two seconds
	//_delay_ms(8000);
	_delay_ms(8000);
	
	for(int i = 0; i<6;i++){
		BT_Recieve();
  c0:	f0 e1       	ldi	r31, 0x10	; 16
  c2:	8f 2e       	mov	r8, r31
  c4:	f7 e2       	ldi	r31, 0x27	; 39
  c6:	9f 2e       	mov	r9, r31
  c8:	a1 2c       	mov	r10, r1
  ca:	b1 2c       	mov	r11, r1
  cc:	f0 2d       	mov	r31, r0
  ce:	c2 e0       	ldi	r28, 0x02	; 2
  d0:	c7 01       	movw	r24, r14
  d2:	b6 01       	movw	r22, r12
  d4:	a5 01       	movw	r20, r10
  d6:	94 01       	movw	r18, r8
	}
	
	
	if(BT_Recieve() == '%'){
  d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__udivmodsi4>
  dc:	67 2b       	or	r22, r23
  de:	68 2b       	or	r22, r24
		PORTB = (1<<PORTB1);
  e0:	69 2b       	or	r22, r25
  e2:	21 f4       	brne	.+8      	; 0xec <Error+0x36>
		Uart_Flush();
  e4:	c3 b9       	out	0x03, r28	; 3
  e6:	8d 2f       	mov	r24, r29
		return 1;
  e8:	0e 94 53 00 	call	0xa6	; 0xa6 <BT_Send>
  ec:	8f ef       	ldi	r24, 0xFF	; 255
		}
		else if(BT_Recieve()=='E'){
			Error('E');
		}*/
	}
	return 0;
  ee:	c8 1a       	sub	r12, r24
  f0:	d8 0a       	sbc	r13, r24
}
  f2:	e8 0a       	sbc	r14, r24
  f4:	f8 0a       	sbc	r15, r24
  f6:	ec cf       	rjmp	.-40     	; 0xd0 <Error+0x1a>

000000f8 <main>:
//Name of the main struct with all the data in for the different sensors and values
DATA DirtyDawg;

int main(void){

	DirtyDawg.state = 0;
  f8:	10 92 26 01 	sts	0x0126, r1


	//Connects to BT device
	//while(BT_Init()==0);
	
	TWI_Master_Init();
  fc:	0e 94 06 02 	call	0x40c	; 0x40c <TWI_Master_Init>
	LCD_Init();
 100:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LCD_Init>
	
		  suart_init();
 104:	0e 94 c2 00 	call	0x184	; 0x184 <suart_init>
		  sei();
 108:	78 94       	sei
		  
		  sputs("The DirtyDawg Is Awake!\n\r" );
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 30 01 	call	0x260	; 0x260 <sputs>

		  for(;;){				// main loop
			  sputchar( '-' );
 112:	8d e2       	ldi	r24, 0x2D	; 45
 114:	0e 94 25 01 	call	0x24a	; 0x24a <sputchar>
			  while( !kbhit() );			// wait until byte received
 118:	80 91 2b 01 	lds	r24, 0x012B
 11c:	88 23       	and	r24, r24
 11e:	e1 f3       	breq	.-8      	; 0x118 <main+0x20>
			  LCD_Byte( sgetchar(), LCD_CHR );		// sent byte + 1
 120:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sgetchar>
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_Byte>

		  }
 12a:	f3 cf       	rjmp	.-26     	; 0x112 <main+0x1a>

0000012c <__vector_5>:
			Y_LED_On();
	}
		
}

ISR(PCINT2_vect){
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
	if(DirtyDawg.state == FALSE)
 138:	80 91 26 01 	lds	r24, 0x0126
 13c:	81 11       	cpse	r24, r1
 13e:	04 c0       	rjmp	.+8      	; 0x148 <__vector_5+0x1c>
		DirtyDawg.state = TRUE;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 26 01 	sts	0x0126, r24
 146:	02 c0       	rjmp	.+4      	; 0x14c <__vector_5+0x20>
	else
		DirtyDawg.state = FALSE;
 148:	10 92 26 01 	sts	0x0126, r1
}
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_2>:

ISR(INT1_vect){
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
	if(DirtyDawg.state == FALSE)
 164:	80 91 26 01 	lds	r24, 0x0126
 168:	81 11       	cpse	r24, r1
 16a:	04 c0       	rjmp	.+8      	; 0x174 <__vector_2+0x1c>
	DirtyDawg.state = TRUE;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 26 01 	sts	0x0126, r24
 172:	02 c0       	rjmp	.+4      	; 0x178 <__vector_2+0x20>
	else
	DirtyDawg.state = FALSE;
 174:	10 92 26 01 	sts	0x0126, r1
}
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <suart_init>:


void suart_init( void )
{
	// Enable interrupt
	sei();
 184:	78 94       	sei
	
	// Set the port HIGH
	SBIT(PORTD,STX) = 1;
 186:	5b 9a       	sbi	0x0b, 3	; 11

	// Set the prescaler to 1
	TCCR0B = (1 << CS00);	
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	85 bd       	out	0x25, r24	; 37
	
	// Enable output compare interrupt
	TIMSK0 = (1 << OCIE0A);		
 18c:	92 e0       	ldi	r25, 0x02	; 2
 18e:	90 93 6e 00 	sts	0x006E, r25

	// Falling edge
	EICRA = (1 << ISC01);
 192:	90 93 69 00 	sts	0x0069, r25
	
	// Enable edge interrupt			
	EIMSK = (1 << INT0);			
 196:	8d bb       	out	0x1d, r24	; 29

	// Nothing to send
	stx_count = 0;	
 198:	10 92 2a 01 	sts	0x012A, r1
	
	// Nothing to receive			
	srx_done = 0;	
 19c:	10 92 2b 01 	sts	0x012B, r1
	
	// Sets the output	        
	STXDDR |= 1 << STX;			
 1a0:	53 9a       	sbi	0x0a, 3	; 10
 1a2:	08 95       	ret

000001a4 <sgetchar>:
}


u8 sgetchar (void)      // Receive Byte
{
	while (!srx_done);      // wait until byte is received
 1a4:	80 91 2b 01 	lds	r24, 0x012B
 1a8:	88 23       	and	r24, r24
 1aa:	e1 f3       	breq	.-8      	; 0x1a4 <sgetchar>
	srx_done = 0;
 1ac:	10 92 2b 01 	sts	0x012B, r1
	return srx_data;
}
 1b0:	80 91 29 01 	lds	r24, 0x0129
 1b4:	08 95       	ret

000001b6 <__vector_1>:


ISR (INT0_vect)    // RX start
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	8f 93       	push	r24
	// scan 1.5 bits after start (to set timing right)
	OCR0B = TCNT0 + (u8)((BIT_TIME * 3) / 2);
 1c2:	86 b5       	in	r24, 0x26	; 38
 1c4:	80 53       	subi	r24, 0x30	; 48
 1c6:	88 bd       	out	0x28, r24	; 40

	// Clear bit storage
	srx_tmp = 0;  
 1c8:	10 92 2c 01 	sts	0x012C, r1
	
	// Set bit-mask      
	srx_mask = 1;        
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 28 01 	sts	0x0128, r24
	if( !(SRXPIN & 1<<SRX))  {  // still low
 1d2:	4a 99       	sbic	0x09, 2	; 9
 1d4:	04 c0       	rjmp	.+8      	; 0x1de <__vector_1+0x28>
		EIMSK &= ~(1 << INT0);			// disable edge interrupt
 1d6:	e8 98       	cbi	0x1d, 0	; 29
		TIMSK0 = 1<<OCIE0A^1<<OCIE0B;  // wait for first bit
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	80 93 6e 00 	sts	0x006E, r24
	}
	TIFR0 = (1<<OCF0B);      // clear pending interrupt ? why does that output compare int occur?
 1de:	84 e0       	ldi	r24, 0x04	; 4
 1e0:	85 bb       	out	0x15, r24	; 21
	EIFR |= (1 << INTF0);		// clear any pending edge interrupt
 1e2:	e0 9a       	sbi	0x1c, 0	; 28
}
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_15>:


ISR (TIMER0_COMPB_vect)
{
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
	u8 in = SRXPIN;      // scan RX line
 1fe:	99 b1       	in	r25, 0x09	; 9

	if (srx_mask) {
 200:	80 91 28 01 	lds	r24, 0x0128
 204:	88 23       	and	r24, r24
 206:	71 f0       	breq	.+28     	; 0x224 <__vector_15+0x34>
		if (in & 1 << SRX)
 208:	92 ff       	sbrs	r25, 2
 20a:	05 c0       	rjmp	.+10     	; 0x216 <__vector_15+0x26>
			srx_tmp |= srx_mask;
 20c:	90 91 2c 01 	lds	r25, 0x012C
 210:	98 2b       	or	r25, r24
 212:	90 93 2c 01 	sts	0x012C, r25
		srx_mask <<= 1; 
 216:	88 0f       	add	r24, r24
 218:	80 93 28 01 	sts	0x0128, r24
		OCR0B += BIT_TIME;      // next bit slice
 21c:	88 b5       	in	r24, 0x28	; 40
 21e:	85 57       	subi	r24, 0x75	; 117
 220:	88 bd       	out	0x28, r24	; 40
 222:	0c c0       	rjmp	.+24     	; 0x23c <__vector_15+0x4c>
		} else {
		srx_done = 1;      // mark RX data valid
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	80 93 2b 01 	sts	0x012B, r24
		srx_data = srx_tmp;      // store RX data
 22a:	90 91 2c 01 	lds	r25, 0x012C
 22e:	90 93 29 01 	sts	0x0129, r25

		TIMSK0 = 1<<OCIE0A;        // enable TX and wait for start
 232:	92 e0       	ldi	r25, 0x02	; 2
 234:	90 93 6e 00 	sts	0x006E, r25
		EIFR |= (1 << INTF0);		// clear any pending edge interrupt: This hinders the in0-vect from beeing triggerd again just now which may occur by falling edges in the serial data bits
 238:	e0 9a       	sbi	0x1c, 0	; 28
		EIMSK = 1 << INT0;	// Re-enable edge interrupt
 23a:	8d bb       	out	0x1d, r24	; 29
	}

}
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <sputchar>:


void sputchar (u8 val)      // Send byte
{
	// Until last byte is finished
	while (stx_count);      
 24a:	90 91 2a 01 	lds	r25, 0x012A
 24e:	91 11       	cpse	r25, r1
 250:	fc cf       	rjmp	.-8      	; 0x24a <sputchar>
	stx_data = ~val;      // Invert data for Stop bit generation
 252:	80 95       	com	r24
 254:	80 93 27 01 	sts	0x0127, r24
	stx_count = 10;      // 10 bits: Start + data + Stop
 258:	8a e0       	ldi	r24, 0x0A	; 10
 25a:	80 93 2a 01 	sts	0x012A, r24
 25e:	08 95       	ret

00000260 <sputs>:
}


void sputs (u8 *txt)      // Send string
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	ec 01       	movw	r28, r24
	while (*txt)
 266:	88 81       	ld	r24, Y
 268:	88 23       	and	r24, r24
 26a:	31 f0       	breq	.+12     	; 0x278 <sputs+0x18>
 26c:	21 96       	adiw	r28, 0x01	; 1
	sputchar (*txt++);
 26e:	0e 94 25 01 	call	0x24a	; 0x24a <sputchar>
}


void sputs (u8 *txt)      // Send string
{
	while (*txt)
 272:	89 91       	ld	r24, Y+
 274:	81 11       	cpse	r24, r1
 276:	fb cf       	rjmp	.-10     	; 0x26e <sputs+0xe>
	sputchar (*txt++);
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <__vector_14>:


ISR (TIMER0_COMPA_vect)    // TX bit
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
	u8 dout;
	u8 count;

	OCR0A += BIT_TIME;      // Next bit slice
 28c:	87 b5       	in	r24, 0x27	; 39
 28e:	85 57       	subi	r24, 0x75	; 117
 290:	87 bd       	out	0x27, r24	; 39
	count = stx_count;
 292:	80 91 2a 01 	lds	r24, 0x012A

	if (count) {
 296:	88 23       	and	r24, r24
 298:	99 f0       	breq	.+38     	; 0x2c0 <__vector_14+0x42>
		stx_count = --count;    // Count down
 29a:	81 50       	subi	r24, 0x01	; 1
 29c:	80 93 2a 01 	sts	0x012A, r24

		dout = 0;
		if (count != 9) {      // No start bit
 2a0:	89 30       	cpi	r24, 0x09	; 9
 2a2:	49 f0       	breq	.+18     	; 0x2b6 <__vector_14+0x38>
			if (!(stx_data & 1))    // Test inverted data
 2a4:	80 91 27 01 	lds	r24, 0x0127
 2a8:	98 2f       	mov	r25, r24
 2aa:	90 95       	com	r25
 2ac:	91 70       	andi	r25, 0x01	; 1

			dout = 1;
			stx_data >>= 1;      // Shift zero in from left
 2ae:	86 95       	lsr	r24
 2b0:	80 93 27 01 	sts	0x0127, r24
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <__vector_14+0x3a>
	count = stx_count;

	if (count) {
		stx_count = --count;    // Count down

		dout = 0;
 2b6:	90 e0       	ldi	r25, 0x00	; 0

			dout = 1;
			stx_data >>= 1;      // Shift zero in from left
		}

		SBIT(PORTD,STX) = dout;
 2b8:	90 fd       	sbrc	r25, 0
 2ba:	5b 9a       	sbi	0x0b, 3	; 11
 2bc:	90 ff       	sbrs	r25, 0
 2be:	5b 98       	cbi	0x0b, 3	; 11
	}
}
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <Write_Byte>:
		LCD_Byte(row2[i], LCD_CHR);
	}

}

void Write_Byte(uint8_t addr, uint8_t bits){
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	c8 2f       	mov	r28, r24
 2d4:	d6 2f       	mov	r29, r22
	
		
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 2d6:	84 ea       	ldi	r24, 0xA4	; 164
 2d8:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 2dc:	0e 94 1a 02 	call	0x434	; 0x434 <TWI_Busy>
 2e0:	89 2b       	or	r24, r25
 2e2:	e1 f3       	breq	.-8      	; 0x2dc <Write_Byte+0xe>
	if((TWSR & MASK) != START)Error(START);
 2e4:	80 91 b9 00 	lds	r24, 0x00B9
 2e8:	88 7f       	andi	r24, 0xF8	; 248
 2ea:	88 30       	cpi	r24, 0x08	; 8
 2ec:	21 f0       	breq	.+8      	; 0x2f6 <Write_Byte+0x28>
 2ee:	88 e0       	ldi	r24, 0x08	; 8
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 5b 00 	call	0xb6	; 0xb6 <Error>
		
	//Loads the slave address and set the R/W bit to 0
	TWDR = (addr<<1) | LCD_WRITE;
 2f6:	cc 0f       	add	r28, r28
 2f8:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN); 
 2fc:	84 e8       	ldi	r24, 0x84	; 132
 2fe:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 302:	0e 94 1a 02 	call	0x434	; 0x434 <TWI_Busy>
 306:	89 2b       	or	r24, r25
 308:	e1 f3       	breq	.-8      	; 0x302 <Write_Byte+0x34>
	if((TWSR & MASK) !=  MT_ADDRESS_ACK)Error((TWSR & MASK));
 30a:	80 91 b9 00 	lds	r24, 0x00B9
 30e:	88 7f       	andi	r24, 0xF8	; 248
 310:	88 31       	cpi	r24, 0x18	; 24
 312:	31 f0       	breq	.+12     	; 0x320 <Write_Byte+0x52>
 314:	80 91 b9 00 	lds	r24, 0x00B9
 318:	88 7f       	andi	r24, 0xF8	; 248
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 5b 00 	call	0xb6	; 0xb6 <Error>
		
	//Sends the data to the slave
	TWDR = bits; //4bits
 320:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
 324:	84 e8       	ldi	r24, 0x84	; 132
 326:	80 93 bc 00 	sts	0x00BC, r24
	
	while(!TWI_Busy());
 32a:	0e 94 1a 02 	call	0x434	; 0x434 <TWI_Busy>
 32e:	89 2b       	or	r24, r25
 330:	e1 f3       	breq	.-8      	; 0x32a <Write_Byte+0x5c>
	if((TWSR & MASK) !=  MT_BYTE_ACK)Error((TWSR & MASK));
 332:	80 91 b9 00 	lds	r24, 0x00B9
 336:	88 7f       	andi	r24, 0xF8	; 248
 338:	88 32       	cpi	r24, 0x28	; 40
 33a:	31 f0       	breq	.+12     	; 0x348 <Write_Byte+0x7a>
 33c:	80 91 b9 00 	lds	r24, 0x00B9
 340:	88 7f       	andi	r24, 0xF8	; 248
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 5b 00 	call	0xb6	; 0xb6 <Error>
		
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 348:	84 e9       	ldi	r24, 0x94	; 148
 34a:	80 93 bc 00 	sts	0x00BC, r24
	
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <LCD_Toggle_enable>:
	Write_Byte(LCD_ADDR, bits_low);
	LCD_Toggle_enable(bits_low);
	
}

void LCD_Toggle_enable(uint8_t bits){
 354:	cf 93       	push	r28
 356:	c8 2f       	mov	r28, r24
 358:	8f e0       	ldi	r24, 0x0F	; 15
 35a:	97 e2       	ldi	r25, 0x27	; 39
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCD_Toggle_enable+0x8>
 360:	00 c0       	rjmp	.+0      	; 0x362 <LCD_Toggle_enable+0xe>
 362:	00 00       	nop
	
	// Toggles the enable pin on the display to activate the code
	_delay_ms(DELAY_MS*5);
	Write_Byte(LCD_ADDR, (bits | ENABLE));
 364:	6c 2f       	mov	r22, r28
 366:	64 60       	ori	r22, 0x04	; 4
 368:	87 e2       	ldi	r24, 0x27	; 39
 36a:	0e 94 67 01 	call	0x2ce	; 0x2ce <Write_Byte>
 36e:	8f e0       	ldi	r24, 0x0F	; 15
 370:	97 e2       	ldi	r25, 0x27	; 39
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <LCD_Toggle_enable+0x1e>
 376:	00 c0       	rjmp	.+0      	; 0x378 <LCD_Toggle_enable+0x24>
 378:	00 00       	nop
	_delay_ms(DELAY_MS*5);
	Write_Byte(LCD_ADDR, (bits & ~ENABLE));
 37a:	6c 2f       	mov	r22, r28
 37c:	6b 7f       	andi	r22, 0xFB	; 251
 37e:	87 e2       	ldi	r24, 0x27	; 39
 380:	0e 94 67 01 	call	0x2ce	; 0x2ce <Write_Byte>
 384:	8f e0       	ldi	r24, 0x0F	; 15
 386:	97 e2       	ldi	r25, 0x27	; 39
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <LCD_Toggle_enable+0x34>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <LCD_Toggle_enable+0x3a>
 38e:	00 00       	nop
	_delay_ms(DELAY_MS*5);
		
}
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <LCD_Byte>:
	LCD_Byte(0x01, LCD_CMD); 
	_delay_ms(DELAY_MS*5); //5 ms delay
	
}

void LCD_Byte(uint8_t bits, uint8_t mode){
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	c6 2f       	mov	r28, r22
 39a:	c8 60       	ori	r28, 0x08	; 8
	
	uint8_t bits_high, bits_low;
	
	//Divides the data in two 4 bit values
	bits_high = mode | (bits & 0xF0) | LCD_BACKLIGHT;
 39c:	d8 2f       	mov	r29, r24
 39e:	d0 7f       	andi	r29, 0xF0	; 240
 3a0:	dc 2b       	or	r29, r28
	bits_low = mode | ((bits<<4) & 0xF0) | LCD_BACKLIGHT;
 3a2:	90 e1       	ldi	r25, 0x10	; 16
 3a4:	89 9f       	mul	r24, r25
 3a6:	90 01       	movw	r18, r0
 3a8:	11 24       	eor	r1, r1
 3aa:	c2 2b       	or	r28, r18
	
	// Send the high bits
	Write_Byte(LCD_ADDR, bits_high);
 3ac:	6d 2f       	mov	r22, r29
 3ae:	87 e2       	ldi	r24, 0x27	; 39
 3b0:	0e 94 67 01 	call	0x2ce	; 0x2ce <Write_Byte>
	LCD_Toggle_enable(bits_high);
 3b4:	8d 2f       	mov	r24, r29
 3b6:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_Toggle_enable>
	
	// Send the low bits
	Write_Byte(LCD_ADDR, bits_low);
 3ba:	6c 2f       	mov	r22, r28
 3bc:	87 e2       	ldi	r24, 0x27	; 39
 3be:	0e 94 67 01 	call	0x2ce	; 0x2ce <Write_Byte>
	LCD_Toggle_enable(bits_low);
 3c2:	8c 2f       	mov	r24, r28
 3c4:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_Toggle_enable>
	
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <LCD_Init>:


void LCD_Init(void){
	
	// Basic initialization
	LCD_Byte(0x33, LCD_CMD); 
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	83 e3       	ldi	r24, 0x33	; 51
 3d2:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_Byte>
	LCD_Byte(0x32, LCD_CMD);
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	82 e3       	ldi	r24, 0x32	; 50
 3da:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_Byte>
	 
	// Entry mode, move cursor left to right 
	LCD_Byte(0x06, LCD_CMD); 
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	86 e0       	ldi	r24, 0x06	; 6
 3e2:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_Byte>
	
	// Display on, Cursor off, Blink off
	LCD_Byte(0x0C, LCD_CMD); 
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	8c e0       	ldi	r24, 0x0C	; 12
 3ea:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_Byte>
	
	// Set to 4-bit ooperation, 2 lines and 5x7 dots
	LCD_Byte(0x28, LCD_CMD); 
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	88 e2       	ldi	r24, 0x28	; 40
 3f2:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_Byte>
	
	// Clears display and DDRAM
	LCD_Byte(0x01, LCD_CMD); 
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_Byte>
 3fe:	8f e0       	ldi	r24, 0x0F	; 15
 400:	97 e2       	ldi	r25, 0x27	; 39
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <LCD_Init+0x34>
 406:	00 c0       	rjmp	.+0      	; 0x408 <LCD_Init+0x3a>
 408:	00 00       	nop
 40a:	08 95       	ret

0000040c <TWI_Master_Init>:


void TWI_Master_Init (void){
	
	//Sets the power reduction register for TWI to 0.
	PRR &= ~(1<<PRTWI);
 40c:	e4 e6       	ldi	r30, 0x64	; 100
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	8f 77       	andi	r24, 0x7F	; 127
 414:	80 83       	st	Z, r24
	
	//Sets the prescaler to 1 by setting TWPS1 and 0 to 0
	TWSR &= ~(1<<TWPS1) & ~(1<<TWPS0); 
 416:	e9 eb       	ldi	r30, 0xB9	; 185
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	8c 7f       	andi	r24, 0xFC	; 252
 41e:	80 83       	st	Z, r24
	
	//Sets the speed of TWI to 100khz
	TWBR = 0x20;
 420:	80 e2       	ldi	r24, 0x20	; 32
 422:	80 93 b8 00 	sts	0x00B8, r24
		TWWC - Write Collision Flag
		TWEN - Enable Bit
		TWIE - Interrupt Enable

	************************************************************************/
	TWDR = 0xFF;
 426:	8f ef       	ldi	r24, 0xFF	; 255
 428:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (0<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWWC) | (1<<TWIE) | (1<<TWEN);
 42c:	85 e0       	ldi	r24, 0x05	; 5
 42e:	80 93 bc 00 	sts	0x00BC, r24
 432:	08 95       	ret

00000434 <TWI_Busy>:

}

int TWI_Busy(void){
	//Returns 0 if the MCU is busy
	return TWCR & (1<<TWINT);
 434:	80 91 bc 00 	lds	r24, 0x00BC
 438:	80 78       	andi	r24, 0x80	; 128
}
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	08 95       	ret

0000043e <__udivmodsi4>:
 43e:	a1 e2       	ldi	r26, 0x21	; 33
 440:	1a 2e       	mov	r1, r26
 442:	aa 1b       	sub	r26, r26
 444:	bb 1b       	sub	r27, r27
 446:	fd 01       	movw	r30, r26
 448:	0d c0       	rjmp	.+26     	; 0x464 <__udivmodsi4_ep>

0000044a <__udivmodsi4_loop>:
 44a:	aa 1f       	adc	r26, r26
 44c:	bb 1f       	adc	r27, r27
 44e:	ee 1f       	adc	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	a2 17       	cp	r26, r18
 454:	b3 07       	cpc	r27, r19
 456:	e4 07       	cpc	r30, r20
 458:	f5 07       	cpc	r31, r21
 45a:	20 f0       	brcs	.+8      	; 0x464 <__udivmodsi4_ep>
 45c:	a2 1b       	sub	r26, r18
 45e:	b3 0b       	sbc	r27, r19
 460:	e4 0b       	sbc	r30, r20
 462:	f5 0b       	sbc	r31, r21

00000464 <__udivmodsi4_ep>:
 464:	66 1f       	adc	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	88 1f       	adc	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	1a 94       	dec	r1
 46e:	69 f7       	brne	.-38     	; 0x44a <__udivmodsi4_loop>
 470:	60 95       	com	r22
 472:	70 95       	com	r23
 474:	80 95       	com	r24
 476:	90 95       	com	r25
 478:	9b 01       	movw	r18, r22
 47a:	ac 01       	movw	r20, r24
 47c:	bd 01       	movw	r22, r26
 47e:	cf 01       	movw	r24, r30
 480:	08 95       	ret

00000482 <_exit>:
 482:	f8 94       	cli

00000484 <__stop_program>:
 484:	ff cf       	rjmp	.-2      	; 0x484 <__stop_program>
