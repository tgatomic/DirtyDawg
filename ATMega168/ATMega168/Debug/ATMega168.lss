
ATMega168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000cdc  00000d70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080016c  0080016c  00000ddc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f2a  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007da  00000000  00000000  00002f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000097b  00000000  00000000  00003700  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  0000407c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d7  00000000  00000000  000044a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b41  00000000  00000000  00004977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000054b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c9 04 	jmp	0x992	; 0x992 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__vector_14>
  3c:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a3 04 	jmp	0x946	; 0x946 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 36       	cpi	r26, 0x6C	; 108
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e6       	ldi	r26, 0x6C	; 108
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 38       	cpi	r26, 0x88	; 136
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 01 04 	call	0x802	; 0x802 <main>
  9e:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <System_Init>:
#include "SWUART.H"


void System_Init(void){
	
	DirtyDawg.status = 0;
  a6:	e9 e7       	ldi	r30, 0x79	; 121
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	17 82       	std	Z+7, r1	; 0x07
	DirtyDawg.front_sensor = 0;
  ac:	12 82       	std	Z+2, r1	; 0x02
	DirtyDawg.back_sensor = 0;
  ae:	13 82       	std	Z+3, r1	; 0x03
	DirtyDawg.left_sensor = 0;
  b0:	10 82       	st	Z, r1
	DirtyDawg.right_sensor = 0;
  b2:	11 82       	std	Z+1, r1	; 0x01
	
	// Enable global interrupt
	sei();
  b4:	78 94       	sei
	// Enable interrupt on 
	// PCINT20 (pin 6 on AtMega 168P)
	// PCINT21 (pin 11 on AtMega 168P)
	EICRA = (1<<ISC11);
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	80 93 69 00 	sts	0x0069, r24
	EIMSK = (1<<INT1);
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	8d bb       	out	0x1d, r24	; 29
	PCICR = (1<<PCIE2);
  c0:	84 e0       	ldi	r24, 0x04	; 4
  c2:	80 93 68 00 	sts	0x0068, r24
	PCMSK2 = (1<<PCINT20) | (1<<PCINT21);
  c6:	80 e3       	ldi	r24, 0x30	; 48
  c8:	80 93 6d 00 	sts	0x006D, r24
	
	/*Setting ports - page 75*/
		
	DDRB = (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB3) | (1<<PORTB0); //PB0 is debug greenlight
  cc:	8f e0       	ldi	r24, 0x0F	; 15
  ce:	84 b9       	out	0x04, r24	; 4
	DDRD = (1<<PORTD3) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7); //PD7 is debug yellow
  d0:	88 ee       	ldi	r24, 0xE8	; 232
  d2:	8a b9       	out	0x0a, r24	; 10
	
	//Turn on and off the red LED for 2 seconds
	PORTB |= (1<<PORTB1);
  d4:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	83 ed       	ldi	r24, 0xD3	; 211
  da:	90 e3       	ldi	r25, 0x30	; 48
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <System_Init+0x36>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <System_Init+0x40>
  e6:	00 00       	nop
	_delay_ms(2000);
	PORTB &= (0<<PORTB1);
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	15 b8       	out	0x05, r1	; 5
	

	//Signs the status
	DirtyDawg.status = MCU_STARTED;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	87 83       	std	Z+7, r24	; 0x07
  f0:	08 95       	ret

000000f2 <UART_Init>:
}

void UART_Init(unsigned int baud){
	
	//Set double speed
	UCSR0A = (1<<U2X0);
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	20 93 c0 00 	sts	0x00C0, r18
	
	//Set baudrate
	unsigned int baudrate;
	baudrate = 8000000/8/baud-1;
  f8:	9c 01       	movw	r18, r24
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	60 e4       	ldi	r22, 0x40	; 64
 100:	72 e4       	ldi	r23, 0x42	; 66
 102:	8f e0       	ldi	r24, 0x0F	; 15
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 39 06 	call	0xc72	; 0xc72 <__divmodsi4>
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	31 09       	sbc	r19, r1
	//Double speed use frequency/8/baud
	
	//Set the baudrate in the registry
	UBRR0H = (unsigned char) (baudrate>>8);
 10e:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) (baudrate);
 112:	20 93 c4 00 	sts	0x00C4, r18

	//Enables Receive and Transmit over UART
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); //RXCIE and TXCIE for interrupt based UART.
 116:	88 e1       	ldi	r24, 0x18	; 24
 118:	80 93 c1 00 	sts	0x00C1, r24
	
	//Sets to 1 stop bit and 8 data bits
	UCSR0C = (0<<USBS0) | (3<<UCSZ00);
 11c:	e2 ec       	ldi	r30, 0xC2	; 194
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	80 83       	st	Z, r24
	
	//Disables Parity
	UCSR0C |= (0<<UPM01) | (0<<UPM00);
 124:	80 81       	ld	r24, Z
 126:	80 83       	st	Z, r24
	
	// Set status flag
	DirtyDawg.status |= UART_STARTED;
 128:	e9 e7       	ldi	r30, 0x79	; 121
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	87 81       	ldd	r24, Z+7	; 0x07
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	87 83       	std	Z+7, r24	; 0x07
 132:	08 95       	ret

00000134 <LCD_Update>:
}

void LCD_Update(void){
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
	
	// Prints the distance to front obstacle
	LCD_Byte(LCD_LINE_1, LCD_CMD);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	80 e8       	ldi	r24, 0x80	; 128
 140:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_String("C: ");
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_String>
 14c:	c6 e7       	ldi	r28, 0x76	; 118
 14e:	d1 e0       	ldi	r29, 0x01	; 1
 150:	09 e7       	ldi	r16, 0x79	; 121
 152:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
		LCD_Byte(front[i], LCD_CHR);
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	89 91       	ld	r24, Y+
 158:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
void LCD_Update(void){
	
	// Prints the distance to front obstacle
	LCD_Byte(LCD_LINE_1, LCD_CMD);
	LCD_String("C: ");
	for(int i = 0; i < 3; i++)
 15c:	c0 17       	cp	r28, r16
 15e:	d1 07       	cpc	r29, r17
 160:	c9 f7       	brne	.-14     	; 0x154 <LCD_Update+0x20>
		LCD_Byte(front[i], LCD_CHR);
	
	// Prints the distance to back obstacle
	LCD_String("  S: ");
 162:	80 e1       	ldi	r24, 0x10	; 16
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_String>
 16a:	cd e6       	ldi	r28, 0x6D	; 109
 16c:	d1 e0       	ldi	r29, 0x01	; 1
 16e:	00 e7       	ldi	r16, 0x70	; 112
 170:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
		LCD_Byte(back[i], LCD_CHR);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	89 91       	ld	r24, Y+
 176:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	for(int i = 0; i < 3; i++)
		LCD_Byte(front[i], LCD_CHR);
	
	// Prints the distance to back obstacle
	LCD_String("  S: ");
	for(int i = 0; i < 3; i++)
 17a:	c0 17       	cp	r28, r16
 17c:	d1 07       	cpc	r29, r17
 17e:	c9 f7       	brne	.-14     	; 0x172 <LCD_Update+0x3e>
		LCD_Byte(back[i], LCD_CHR);

	// Prints the distance to left obstacle
	LCD_Byte(LCD_LINE_2, LCD_CMD);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	80 ec       	ldi	r24, 0xC0	; 192
 184:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_String("P: ");
 188:	86 e1       	ldi	r24, 0x16	; 22
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_String>
 190:	c3 e7       	ldi	r28, 0x73	; 115
 192:	d1 e0       	ldi	r29, 0x01	; 1
 194:	06 e7       	ldi	r16, 0x76	; 118
 196:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
		LCD_Byte(left[i], LCD_CHR);
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	89 91       	ld	r24, Y+
 19c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
		LCD_Byte(back[i], LCD_CHR);

	// Prints the distance to left obstacle
	LCD_Byte(LCD_LINE_2, LCD_CMD);
	LCD_String("P: ");
	for(int i = 0; i < 3; i++)
 1a0:	c0 17       	cp	r28, r16
 1a2:	d1 07       	cpc	r29, r17
 1a4:	c9 f7       	brne	.-14     	; 0x198 <LCD_Update+0x64>
		LCD_Byte(left[i], LCD_CHR);

	// Prints the distance to right obstacle
	LCD_String("  T: ");
 1a6:	8a e1       	ldi	r24, 0x1A	; 26
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_String>
 1ae:	c0 e7       	ldi	r28, 0x70	; 112
 1b0:	d1 e0       	ldi	r29, 0x01	; 1
 1b2:	03 e7       	ldi	r16, 0x73	; 115
 1b4:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 3; i++)
		LCD_Byte(right[i], LCD_CHR);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	89 91       	ld	r24, Y+
 1ba:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	for(int i = 0; i < 3; i++)
		LCD_Byte(left[i], LCD_CHR);

	// Prints the distance to right obstacle
	LCD_String("  T: ");
	for(int i = 0; i < 3; i++)
 1be:	c0 17       	cp	r28, r16
 1c0:	d1 07       	cpc	r29, r17
 1c2:	c9 f7       	brne	.-14     	; 0x1b6 <LCD_Update+0x82>
		LCD_Byte(right[i], LCD_CHR);

	//Change state
	DirtyDawg.state = SEND_DATA_STATE;
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	80 93 81 01 	sts	0x0181, r24
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <Uart_Flush>:

void Uart_Flush(void){
	uint8_t dummy;
	while (UCSR0A & (1<<RXC0)) 
 1d4:	80 91 c0 00 	lds	r24, 0x00C0
 1d8:	88 23       	and	r24, r24
 1da:	44 f4       	brge	.+16     	; 0x1ec <Uart_Flush+0x18>
		dummy = UDR0;	
 1dc:	a6 ec       	ldi	r26, 0xC6	; 198
 1de:	b0 e0       	ldi	r27, 0x00	; 0
	DirtyDawg.state = SEND_DATA_STATE;
}

void Uart_Flush(void){
	uint8_t dummy;
	while (UCSR0A & (1<<RXC0)) 
 1e0:	e0 ec       	ldi	r30, 0xC0	; 192
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
		dummy = UDR0;	
 1e4:	8c 91       	ld	r24, X
	DirtyDawg.state = SEND_DATA_STATE;
}

void Uart_Flush(void){
	uint8_t dummy;
	while (UCSR0A & (1<<RXC0)) 
 1e6:	80 81       	ld	r24, Z
 1e8:	88 23       	and	r24, r24
 1ea:	e4 f3       	brlt	.-8      	; 0x1e4 <Uart_Flush+0x10>
 1ec:	08 95       	ret

000001ee <BT_Recieve>:
}

uint8_t BT_Recieve(void){
	
	//Wait for data to be received (wait for flag to be set)
	while(!(UCSR0A & (1<<RXC0)));
 1ee:	e0 ec       	ldi	r30, 0xC0	; 192
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	88 23       	and	r24, r24
 1f6:	ec f7       	brge	.-6      	; 0x1f2 <BT_Recieve+0x4>

	//Returns the data from buffer
	return UDR0;
 1f8:	80 91 c6 00 	lds	r24, 0x00C6
}
 1fc:	08 95       	ret

000001fe <BT_Send>:

void BT_Send(uint8_t data){
	
	//Waits for the transmit buffer to be empty (wait for flag)
	while(!(UCSR0A & (1<<UDRE0)));
 1fe:	e0 ec       	ldi	r30, 0xC0	; 192
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	90 81       	ld	r25, Z
 204:	95 ff       	sbrs	r25, 5
 206:	fd cf       	rjmp	.-6      	; 0x202 <BT_Send+0x4>
	
	//Put data in buffer and sends it
	UDR0 = data;
 208:	80 93 c6 00 	sts	0x00C6, r24
 20c:	08 95       	ret

0000020e <BT_Init>:
/*                 Functions for the BlueSmirf                          */
/************************************************************************/
void BT_Init(void){
	
	// Send "---" to ensure BlueSmirf is not in command mode
	for(int i = 0; i<3; i++) BT_Send('-');
 20e:	8d e2       	ldi	r24, 0x2D	; 45
 210:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 214:	8d e2       	ldi	r24, 0x2D	; 45
 216:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 21a:	8d e2       	ldi	r24, 0x2D	; 45
 21c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(LF); // Line feed
 220:	8a e0       	ldi	r24, 0x0A	; 10
 222:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(CR); // Carriage return
 226:	8d e0       	ldi	r24, 0x0D	; 13
 228:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 22c:	2f e7       	ldi	r18, 0x7F	; 127
 22e:	8a e1       	ldi	r24, 0x1A	; 26
 230:	96 e0       	ldi	r25, 0x06	; 6
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <BT_Init+0x24>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <BT_Init+0x2e>
 23c:	00 00       	nop
	_delay_ms(250);
	// Clear LCD display
	LCD_Byte(LCD_CLEAR, LCD_CMD);
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
 246:	2f e7       	ldi	r18, 0x7F	; 127
 248:	89 ea       	ldi	r24, 0xA9	; 169
 24a:	93 e0       	ldi	r25, 0x03	; 3
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <BT_Init+0x3e>
 254:	00 c0       	rjmp	.+0      	; 0x256 <BT_Init+0x48>
 256:	00 00       	nop
	_delay_ms(150);
	Uart_Flush();
 258:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Uart_Flush>
 25c:	08 95       	ret

0000025e <BT_Connection_Check>:
}

void BT_Connection_Check(void){
	
	// Send command to end command mode
	for(int i = 0; i < 3; i++) BT_Send('-');
 25e:	8d e2       	ldi	r24, 0x2D	; 45
 260:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 264:	8d e2       	ldi	r24, 0x2D	; 45
 266:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 26a:	8d e2       	ldi	r24, 0x2D	; 45
 26c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	BT_Send(LF); //Line feed
 270:	8a e0       	ldi	r24, 0x0A	; 10
 272:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(CR); //Carriage return
 276:	8d e0       	ldi	r24, 0x0D	; 13
 278:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	84 e3       	ldi	r24, 0x34	; 52
 280:	9c e0       	ldi	r25, 0x0C	; 12
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <BT_Connection_Check+0x24>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <BT_Connection_Check+0x2e>
 28c:	00 00       	nop
	_delay_ms(500);
	Uart_Flush();
 28e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Uart_Flush>

	// Sends command to enter command mode
	for(int i = 0; i < 3; i++) BT_Send('$');
 292:	84 e2       	ldi	r24, 0x24	; 36
 294:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 298:	84 e2       	ldi	r24, 0x24	; 36
 29a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 29e:	84 e2       	ldi	r24, 0x24	; 36
 2a0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	// Ignore the message from BlueSmirf "CMD"
	while(BT_Recieve() != LF);
 2a4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 2a8:	8a 30       	cpi	r24, 0x0A	; 10
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <BT_Connection_Check+0x46>

	// Check if connected
	BT_Send('G');
 2ac:	87 e4       	ldi	r24, 0x47	; 71
 2ae:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send('K');
 2b2:	8b e4       	ldi	r24, 0x4B	; 75
 2b4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(LF);
 2b8:	8a e0       	ldi	r24, 0x0A	; 10
 2ba:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(CR);
 2be:	8d e0       	ldi	r24, 0x0D	; 13
 2c0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	if(BT_Recieve() == '1')
 2c4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 2c8:	81 33       	cpi	r24, 0x31	; 49
 2ca:	31 f4       	brne	.+12     	; 0x2d8 <BT_Connection_Check+0x7a>
		DirtyDawg.status |= BT_CONNECTED;
 2cc:	e9 e7       	ldi	r30, 0x79	; 121
 2ce:	f1 e0       	ldi	r31, 0x01	; 1
 2d0:	87 81       	ldd	r24, Z+7	; 0x07
 2d2:	88 60       	ori	r24, 0x08	; 8
 2d4:	87 83       	std	Z+7, r24	; 0x07
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <BT_Connection_Check+0x84>
	else
		DirtyDawg.status &= ~BT_CONNECTED;
 2d8:	e9 e7       	ldi	r30, 0x79	; 121
 2da:	f1 e0       	ldi	r31, 0x01	; 1
 2dc:	87 81       	ldd	r24, Z+7	; 0x07
 2de:	80 7f       	andi	r24, 0xF0	; 240
 2e0:	87 83       	std	Z+7, r24	; 0x07

	Uart_Flush();
 2e2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Uart_Flush>
	
	// End command mode
	for(int i = 0; i < 3; i++) BT_Send('-');
 2e6:	8d e2       	ldi	r24, 0x2D	; 45
 2e8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 2ec:	8d e2       	ldi	r24, 0x2D	; 45
 2ee:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 2f2:	8d e2       	ldi	r24, 0x2D	; 45
 2f4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	BT_Send(LF); //Line feed
 2f8:	8a e0       	ldi	r24, 0x0A	; 10
 2fa:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(CR); //Carriage return
 2fe:	8d e0       	ldi	r24, 0x0D	; 13
 300:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 304:	2f ef       	ldi	r18, 0xFF	; 255
 306:	84 e3       	ldi	r24, 0x34	; 52
 308:	9c e0       	ldi	r25, 0x0C	; 12
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <BT_Connection_Check+0xac>
 312:	00 c0       	rjmp	.+0      	; 0x314 <BT_Connection_Check+0xb6>
 314:	00 00       	nop
	_delay_ms(500);
	Uart_Flush();
 316:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Uart_Flush>
 31a:	08 95       	ret

0000031c <BT_Connect>:

}

void BT_Connect(void){
 31c:	ef 92       	push	r14
 31e:	ff 92       	push	r15
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	2c 97       	sbiw	r28, 0x0c	; 12
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61

	//Wait for 1 second to ensure the device has power
	//_delay_ms(1000);

	for(int i = 0; i < 3; i++) BT_Send('-');
 338:	8d e2       	ldi	r24, 0x2D	; 45
 33a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 33e:	8d e2       	ldi	r24, 0x2D	; 45
 340:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 344:	8d e2       	ldi	r24, 0x2D	; 45
 346:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	BT_Send(LF); //Line feed
 34a:	8a e0       	ldi	r24, 0x0A	; 10
 34c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(CR); //Carriage return
 350:	8d e0       	ldi	r24, 0x0D	; 13
 352:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 356:	2f ef       	ldi	r18, 0xFF	; 255
 358:	84 e3       	ldi	r24, 0x34	; 52
 35a:	9c e0       	ldi	r25, 0x0C	; 12
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <BT_Connect+0x40>
 364:	00 c0       	rjmp	.+0      	; 0x366 <BT_Connect+0x4a>
 366:	00 00       	nop
	_delay_ms(500);
	LCD_Byte(LCD_LINE_2 + 1, LCD_CMD);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	81 ec       	ldi	r24, 0xC1	; 193
 36c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_Byte('*', LCD_CHR);
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	8a e2       	ldi	r24, 0x2A	; 42
 374:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_Byte(LCD_LINE_2 + 14, LCD_CMD);
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	8e ec       	ldi	r24, 0xCE	; 206
 37c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_Byte('*', LCD_CHR);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	8a e2       	ldi	r24, 0x2A	; 42
 384:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	Uart_Flush();
 388:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Uart_Flush>

	//Sends command to enter command mode
	for(int i = 0; i < 3; i++) BT_Send('$');
 38c:	84 e2       	ldi	r24, 0x24	; 36
 38e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 392:	84 e2       	ldi	r24, 0x24	; 36
 394:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 398:	84 e2       	ldi	r24, 0x24	; 36
 39a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	// Ignore the message from BlueSmirf "CMD"
	while(BT_Recieve() != LF);
 39e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 3a2:	8a 30       	cpi	r24, 0x0A	; 10
 3a4:	e1 f7       	brne	.-8      	; 0x39e <BT_Connect+0x82>

	Uart_Flush();
 3a6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Uart_Flush>
		
	// Address to BlueSmirf in the car
	uint8_t adress[12] = {'0','0','0','6','6','6','7','6','A','0','A','A'};
 3aa:	8c e0       	ldi	r24, 0x0C	; 12
 3ac:	e0 e0       	ldi	r30, 0x00	; 0
 3ae:	f1 e0       	ldi	r31, 0x01	; 1
 3b0:	de 01       	movw	r26, r28
 3b2:	11 96       	adiw	r26, 0x01	; 1
 3b4:	01 90       	ld	r0, Z+
 3b6:	0d 92       	st	X+, r0
 3b8:	8a 95       	dec	r24
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <BT_Connect+0x98>
		
	// Command to connect with BlueSmirf in the car
	BT_Send('c');
 3bc:	83 e6       	ldi	r24, 0x63	; 99
 3be:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(',');
 3c2:	8c e2       	ldi	r24, 0x2C	; 44
 3c4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 3c8:	8e 01       	movw	r16, r28
 3ca:	0f 5f       	subi	r16, 0xFF	; 255
 3cc:	1f 4f       	sbci	r17, 0xFF	; 255
 3ce:	7e 01       	movw	r14, r28
 3d0:	ed e0       	ldi	r30, 0x0D	; 13
 3d2:	ee 0e       	add	r14, r30
 3d4:	f1 1c       	adc	r15, r1
	for(int i = 0; i < 12;i++){
		BT_Send(adress[i]);
 3d6:	f8 01       	movw	r30, r16
 3d8:	81 91       	ld	r24, Z+
 3da:	8f 01       	movw	r16, r30
 3dc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	uint8_t adress[12] = {'0','0','0','6','6','6','7','6','A','0','A','A'};
		
	// Command to connect with BlueSmirf in the car
	BT_Send('c');
	BT_Send(',');
	for(int i = 0; i < 12;i++){
 3e0:	0e 15       	cp	r16, r14
 3e2:	1f 05       	cpc	r17, r15
 3e4:	c1 f7       	brne	.-16     	; 0x3d6 <BT_Connect+0xba>
		BT_Send(adress[i]);
	}
	BT_Send(LF);
 3e6:	8a e0       	ldi	r24, 0x0A	; 10
 3e8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(CR);
 3ec:	8d e0       	ldi	r24, 0x0D	; 13
 3ee:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	// Ignore the message from BlueSmirf "TRYING"
	while(BT_Recieve() != LF);
 3f2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 3f6:	8a 30       	cpi	r24, 0x0A	; 10
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <BT_Connect+0xd6>

	// If a good connection, set status
	if(BT_Recieve() == '%')
 3fa:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 3fe:	85 32       	cpi	r24, 0x25	; 37
 400:	29 f4       	brne	.+10     	; 0x40c <BT_Connect+0xf0>
		DirtyDawg.status |= BT_CONNECTED;
 402:	e9 e7       	ldi	r30, 0x79	; 121
 404:	f1 e0       	ldi	r31, 0x01	; 1
 406:	87 81       	ldd	r24, Z+7	; 0x07
 408:	88 60       	ori	r24, 0x08	; 8
 40a:	87 83       	std	Z+7, r24	; 0x07

	// Ignore the message from BlueSmirf "CONNECTING"
	while(BT_Recieve() != LF);
 40c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <BT_Recieve>
 410:	8a 30       	cpi	r24, 0x0A	; 10
 412:	e1 f7       	brne	.-8      	; 0x40c <BT_Connect+0xf0>

	LCD_Byte(LCD_LINE_2 + 1, LCD_CMD);
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	81 ec       	ldi	r24, 0xC1	; 193
 418:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_Byte(' ', LCD_CHR);
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	80 e2       	ldi	r24, 0x20	; 32
 420:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_Byte(LCD_LINE_2 + 14, LCD_CMD);
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	8e ec       	ldi	r24, 0xCE	; 206
 428:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_Byte(' ', LCD_CHR);
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	80 e2       	ldi	r24, 0x20	; 32
 430:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	
}
 434:	2c 96       	adiw	r28, 0x0c	; 12
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	f8 94       	cli
 43a:	de bf       	out	0x3e, r29	; 62
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	cd bf       	out	0x3d, r28	; 61
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	08 95       	ret

0000044e <BT_Send_Data>:
		ticks++;
	}
}


void BT_Send_Data(void){
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
	
	uint8_t stop_go;
	// Enable edge interrupt
	EIMSK |= (1 << INT0);
 454:	e8 9a       	sbi	0x1d, 0	; 29

	// Wait for start command from Linkura device
	while(sgetchar() != 'S');
 456:	0e 94 c0 04 	call	0x980	; 0x980 <sgetchar>
 45a:	83 35       	cpi	r24, 0x53	; 83
 45c:	e1 f7       	brne	.-8      	; 0x456 <BT_Send_Data+0x8>

	// Get accelerometer and ECG data from Linkura device
	DirtyDawg.accelerometer = sgetchar(); // Store the tilt 
 45e:	0e 94 c0 04 	call	0x980	; 0x980 <sgetchar>
 462:	c9 e7       	ldi	r28, 0x79	; 121
 464:	d1 e0       	ldi	r29, 0x01	; 1
 466:	8c 83       	std	Y+4, r24	; 0x04
	stop_go = sgetchar(); // Stop the car or go
 468:	0e 94 c0 04 	call	0x980	; 0x980 <sgetchar>
 46c:	18 2f       	mov	r17, r24
	DirtyDawg.ECG = sgetchar(); // ECG data
 46e:	0e 94 c0 04 	call	0x980	; 0x980 <sgetchar>
 472:	8d 83       	std	Y+5, r24	; 0x05

	DirtyDawg.back_sensor = DirtyDawg.ECG;
 474:	8b 83       	std	Y+3, r24	; 0x03
	DirtyDawg.front_sensor = DirtyDawg.command;
 476:	8e 81       	ldd	r24, Y+6	; 0x06
 478:	8a 83       	std	Y+2, r24	; 0x02
	DirtyDawg.left_sensor = stop_go;
 47a:	18 83       	st	Y, r17
	DirtyDawg.right_sensor = DirtyDawg.accelerometer;
 47c:	8c 81       	ldd	r24, Y+4	; 0x04
 47e:	89 83       	std	Y+1, r24	; 0x01

	// Disable edge interrupt
	EIMSK &= ~(1 << INT0);
 480:	e8 98       	cbi	0x1d, 0	; 29

	if((stop_go == 0) && (DirtyDawg.ECG == 0))
 482:	11 11       	cpse	r17, r1
 484:	08 c0       	rjmp	.+16     	; 0x496 <BT_Send_Data+0x48>
 486:	80 91 7e 01 	lds	r24, 0x017E
 48a:	81 11       	cpse	r24, r1
 48c:	04 c0       	rjmp	.+8      	; 0x496 <BT_Send_Data+0x48>
		DirtyDawg.command |= STOP;
 48e:	8e 81       	ldd	r24, Y+6	; 0x06
 490:	82 60       	ori	r24, 0x02	; 2
 492:	8e 83       	std	Y+6, r24	; 0x06
 494:	05 c0       	rjmp	.+10     	; 0x4a0 <BT_Send_Data+0x52>
	else
		DirtyDawg.command &= ~STOP;
 496:	e9 e7       	ldi	r30, 0x79	; 121
 498:	f1 e0       	ldi	r31, 0x01	; 1
 49a:	86 81       	ldd	r24, Z+6	; 0x06
 49c:	8c 7f       	andi	r24, 0xFC	; 252
 49e:	86 83       	std	Z+6, r24	; 0x06
		
	if(DirtyDawg.accelerometer == TILT_LEFT)
 4a0:	80 91 7d 01 	lds	r24, 0x017D
 4a4:	81 30       	cpi	r24, 0x01	; 1
 4a6:	31 f4       	brne	.+12     	; 0x4b4 <BT_Send_Data+0x66>
		DirtyDawg.command |= TURN_LEFT;
 4a8:	e9 e7       	ldi	r30, 0x79	; 121
 4aa:	f1 e0       	ldi	r31, 0x01	; 1
 4ac:	86 81       	ldd	r24, Z+6	; 0x06
 4ae:	88 60       	ori	r24, 0x08	; 8
 4b0:	86 83       	std	Z+6, r24	; 0x06
 4b2:	0d c0       	rjmp	.+26     	; 0x4ce <BT_Send_Data+0x80>
	else if(DirtyDawg.accelerometer == TILT_RIGHT)
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	31 f4       	brne	.+12     	; 0x4c4 <BT_Send_Data+0x76>
		DirtyDawg.command |= TURN_RIGHT;
 4b8:	e9 e7       	ldi	r30, 0x79	; 121
 4ba:	f1 e0       	ldi	r31, 0x01	; 1
 4bc:	86 81       	ldd	r24, Z+6	; 0x06
 4be:	80 61       	ori	r24, 0x10	; 16
 4c0:	86 83       	std	Z+6, r24	; 0x06
 4c2:	05 c0       	rjmp	.+10     	; 0x4ce <BT_Send_Data+0x80>
	else
		DirtyDawg.command &= ~(TURN_LEFT | TURN_RIGHT);
 4c4:	e9 e7       	ldi	r30, 0x79	; 121
 4c6:	f1 e0       	ldi	r31, 0x01	; 1
 4c8:	86 81       	ldd	r24, Z+6	; 0x06
 4ca:	87 7e       	andi	r24, 0xE7	; 231
 4cc:	86 83       	std	Z+6, r24	; 0x06

	// Start signal
	BT_Send('S');
 4ce:	83 e5       	ldi	r24, 0x53	; 83
 4d0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	// Send command flags and ECG data to car
	BT_Send(DirtyDawg.command);
 4d4:	c9 e7       	ldi	r28, 0x79	; 121
 4d6:	d1 e0       	ldi	r29, 0x01	; 1
 4d8:	8e 81       	ldd	r24, Y+6	; 0x06
 4da:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 4de:	8d 81       	ldd	r24, Y+5	; 0x05
 4e0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	// Change state
	DirtyDawg.state = GET_DATA_STATE;
 4e4:	83 e0       	ldi	r24, 0x03	; 3
 4e6:	88 87       	std	Y+8, r24	; 0x08
}
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	08 95       	ret

000004f0 <BT_Recieve_Data>:

void BT_Recieve_Data(void){
 4f0:	ff 92       	push	r15
 4f2:	0f 93       	push	r16
 4f4:	1f 93       	push	r17
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29

	uint8_t ch;

	ch = 0;
	Uart_Flush();
 4fa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Uart_Flush>
		DirtyDawg.left_sensor = 0;
		DirtyDawg.right_sensor = 0;
		DirtyDawg.back_sensor = DirtyDawg.ECG;
		DirtyDawg.front_sensor = DirtyDawg.command; */
		// Convert sensor value to ASCII
		front[0] = DirtyDawg.front_sensor / 100;
 4fe:	c9 e7       	ldi	r28, 0x79	; 121
 500:	d1 e0       	ldi	r29, 0x01	; 1
 502:	4a 81       	ldd	r20, Y+2	; 0x02
 504:	29 e2       	ldi	r18, 0x29	; 41
 506:	42 9f       	mul	r20, r18
 508:	f1 2c       	mov	r15, r1
 50a:	11 24       	eor	r1, r1
 50c:	f6 94       	lsr	r15
 50e:	f6 94       	lsr	r15
 510:	f6 94       	lsr	r15
 512:	f6 94       	lsr	r15
 514:	06 e7       	ldi	r16, 0x76	; 118
 516:	11 e0       	ldi	r17, 0x01	; 1
 518:	d8 01       	movw	r26, r16
 51a:	fc 92       	st	X, r15
		front[1] = (DirtyDawg.front_sensor - (front[0] * 100 )) / 10;
 51c:	3c e9       	ldi	r19, 0x9C	; 156
 51e:	5f 2d       	mov	r21, r15
 520:	35 03       	mulsu	r19, r21
 522:	c0 01       	movw	r24, r0
 524:	11 24       	eor	r1, r1
 526:	84 0f       	add	r24, r20
 528:	91 1d       	adc	r25, r1
 52a:	ea e0       	ldi	r30, 0x0A	; 10
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	bf 01       	movw	r22, r30
 530:	0e 94 03 06 	call	0xc06	; 0xc06 <__divmodhi4>
 534:	d8 01       	movw	r26, r16
 536:	11 96       	adiw	r26, 0x01	; 1
 538:	6c 93       	st	X, r22
 53a:	11 97       	sbiw	r26, 0x01	; 1
 53c:	f3 9e       	mul	r15, r19
 53e:	40 0d       	add	r20, r0
 540:	11 24       	eor	r1, r1
		front[2] = (DirtyDawg.front_sensor - (front[0] * 100 )) - front[1] * 10;
 542:	66 0f       	add	r22, r22
 544:	86 2f       	mov	r24, r22
 546:	88 0f       	add	r24, r24
 548:	88 0f       	add	r24, r24
 54a:	68 0f       	add	r22, r24
 54c:	46 1b       	sub	r20, r22
 54e:	12 96       	adiw	r26, 0x02	; 2
 550:	4c 93       	st	X, r20

		back[0] = DirtyDawg.back_sensor / 100;
 552:	4b 81       	ldd	r20, Y+3	; 0x03
 554:	42 9f       	mul	r20, r18
 556:	f1 2c       	mov	r15, r1
 558:	11 24       	eor	r1, r1
 55a:	f6 94       	lsr	r15
 55c:	f6 94       	lsr	r15
 55e:	f6 94       	lsr	r15
 560:	f6 94       	lsr	r15
 562:	0d e6       	ldi	r16, 0x6D	; 109
 564:	11 e0       	ldi	r17, 0x01	; 1
 566:	d8 01       	movw	r26, r16
 568:	fc 92       	st	X, r15
		back[1] = (DirtyDawg.back_sensor - (back[0] * 100 )) / 10;
 56a:	5f 2d       	mov	r21, r15
 56c:	35 03       	mulsu	r19, r21
 56e:	c0 01       	movw	r24, r0
 570:	11 24       	eor	r1, r1
 572:	84 0f       	add	r24, r20
 574:	91 1d       	adc	r25, r1
 576:	bf 01       	movw	r22, r30
 578:	0e 94 03 06 	call	0xc06	; 0xc06 <__divmodhi4>
 57c:	d8 01       	movw	r26, r16
 57e:	11 96       	adiw	r26, 0x01	; 1
 580:	6c 93       	st	X, r22
 582:	11 97       	sbiw	r26, 0x01	; 1
 584:	f3 9e       	mul	r15, r19
 586:	40 0d       	add	r20, r0
 588:	11 24       	eor	r1, r1
		back[2] = (DirtyDawg.back_sensor - (back[0] * 100 )) - back[1] * 10;
 58a:	66 0f       	add	r22, r22
 58c:	86 2f       	mov	r24, r22
 58e:	88 0f       	add	r24, r24
 590:	88 0f       	add	r24, r24
 592:	68 0f       	add	r22, r24
 594:	46 1b       	sub	r20, r22
 596:	12 96       	adiw	r26, 0x02	; 2
 598:	4c 93       	st	X, r20

		left[0] = DirtyDawg.left_sensor / 100;
 59a:	48 81       	ld	r20, Y
 59c:	42 9f       	mul	r20, r18
 59e:	f1 2c       	mov	r15, r1
 5a0:	11 24       	eor	r1, r1
 5a2:	f6 94       	lsr	r15
 5a4:	f6 94       	lsr	r15
 5a6:	f6 94       	lsr	r15
 5a8:	f6 94       	lsr	r15
 5aa:	03 e7       	ldi	r16, 0x73	; 115
 5ac:	11 e0       	ldi	r17, 0x01	; 1
 5ae:	d8 01       	movw	r26, r16
 5b0:	fc 92       	st	X, r15
		left[1] = (DirtyDawg.left_sensor - (left[0] * 100 )) / 10;
 5b2:	5f 2d       	mov	r21, r15
 5b4:	35 03       	mulsu	r19, r21
 5b6:	c0 01       	movw	r24, r0
 5b8:	11 24       	eor	r1, r1
 5ba:	84 0f       	add	r24, r20
 5bc:	91 1d       	adc	r25, r1
 5be:	bf 01       	movw	r22, r30
 5c0:	0e 94 03 06 	call	0xc06	; 0xc06 <__divmodhi4>
 5c4:	d8 01       	movw	r26, r16
 5c6:	11 96       	adiw	r26, 0x01	; 1
 5c8:	6c 93       	st	X, r22
 5ca:	11 97       	sbiw	r26, 0x01	; 1
 5cc:	f3 9e       	mul	r15, r19
 5ce:	40 0d       	add	r20, r0
 5d0:	11 24       	eor	r1, r1
		left[2] = (DirtyDawg.left_sensor - (left[0] * 100 )) - left[1] * 10;
 5d2:	66 0f       	add	r22, r22
 5d4:	86 2f       	mov	r24, r22
 5d6:	88 0f       	add	r24, r24
 5d8:	88 0f       	add	r24, r24
 5da:	68 0f       	add	r22, r24
 5dc:	46 1b       	sub	r20, r22
 5de:	12 96       	adiw	r26, 0x02	; 2
 5e0:	4c 93       	st	X, r20

		right[0] = DirtyDawg.right_sensor / 100;
 5e2:	49 81       	ldd	r20, Y+1	; 0x01
 5e4:	42 9f       	mul	r20, r18
 5e6:	21 2d       	mov	r18, r1
 5e8:	11 24       	eor	r1, r1
 5ea:	22 95       	swap	r18
 5ec:	2f 70       	andi	r18, 0x0F	; 15
 5ee:	c0 e7       	ldi	r28, 0x70	; 112
 5f0:	d1 e0       	ldi	r29, 0x01	; 1
 5f2:	28 83       	st	Y, r18
		right[1] = (DirtyDawg.right_sensor - (right[0] * 100 )) / 10;
 5f4:	32 03       	mulsu	r19, r18
 5f6:	c0 01       	movw	r24, r0
 5f8:	11 24       	eor	r1, r1
 5fa:	84 0f       	add	r24, r20
 5fc:	91 1d       	adc	r25, r1
 5fe:	bf 01       	movw	r22, r30
 600:	0e 94 03 06 	call	0xc06	; 0xc06 <__divmodhi4>
 604:	69 83       	std	Y+1, r22	; 0x01
 606:	23 9f       	mul	r18, r19
 608:	40 0d       	add	r20, r0
 60a:	11 24       	eor	r1, r1
		right[2] = (DirtyDawg.right_sensor - (right[0] * 100 )) - right[1] * 10;
 60c:	66 0f       	add	r22, r22
 60e:	86 2f       	mov	r24, r22
 610:	88 0f       	add	r24, r24
 612:	88 0f       	add	r24, r24
 614:	68 0f       	add	r22, r24
 616:	46 1b       	sub	r20, r22
 618:	4a 83       	std	Y+2, r20	; 0x02
 61a:	e6 e7       	ldi	r30, 0x76	; 118
 61c:	f1 e0       	ldi	r31, 0x01	; 1
 61e:	2d e6       	ldi	r18, 0x6D	; 109
 620:	31 e0       	ldi	r19, 0x01	; 1
 622:	e8 01       	movw	r28, r16
 624:	60 e7       	ldi	r22, 0x70	; 112
 626:	71 e0       	ldi	r23, 0x01	; 1
 628:	49 e7       	ldi	r20, 0x79	; 121
 62a:	51 e0       	ldi	r21, 0x01	; 1

		for(int i = 0; i < 3; i++){
			front[i] += '0';
 62c:	80 81       	ld	r24, Z
 62e:	80 5d       	subi	r24, 0xD0	; 208
 630:	81 93       	st	Z+, r24
			back[i] += '0';
 632:	d9 01       	movw	r26, r18
 634:	8c 91       	ld	r24, X
 636:	80 5d       	subi	r24, 0xD0	; 208
 638:	8d 93       	st	X+, r24
 63a:	9d 01       	movw	r18, r26
			left[i] += '0';
 63c:	88 81       	ld	r24, Y
 63e:	80 5d       	subi	r24, 0xD0	; 208
 640:	89 93       	st	Y+, r24
			right[i] += '0';
 642:	db 01       	movw	r26, r22
 644:	8c 91       	ld	r24, X
 646:	80 5d       	subi	r24, 0xD0	; 208
 648:	8d 93       	st	X+, r24
 64a:	bd 01       	movw	r22, r26

		right[0] = DirtyDawg.right_sensor / 100;
		right[1] = (DirtyDawg.right_sensor - (right[0] * 100 )) / 10;
		right[2] = (DirtyDawg.right_sensor - (right[0] * 100 )) - right[1] * 10;

		for(int i = 0; i < 3; i++){
 64c:	e4 17       	cp	r30, r20
 64e:	f5 07       	cpc	r31, r21
 650:	69 f7       	brne	.-38     	; 0x62c <__stack+0x12d>
			right[i] += '0';
		}
//	}

	// Change state 
	DirtyDawg.state = LCD_STATE;
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	80 93 81 01 	sts	0x0181, r24
}
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	1f 91       	pop	r17
 65e:	0f 91       	pop	r16
 660:	ff 90       	pop	r15
 662:	08 95       	ret

00000664 <Test_Car_Commands>:

void Test_Car_Commands(void){
 664:	0f 93       	push	r16
 666:	1f 93       	push	r17
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
	#define STOP 1<<1
	#define REVERSE 1<<2
	#define TURN_LEFT 1<<3
	#define TURN_RIGHT 1<<4
*/
	LCD_Byte(LCD_CLEAR,LCD_CMD);
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_Byte(LCD_LINE_1, LCD_CMD);
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	80 e8       	ldi	r24, 0x80	; 128
 678:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_String("Test commands");
 67c:	80 e2       	ldi	r24, 0x20	; 32
 67e:	91 e0       	ldi	r25, 0x01	; 1
 680:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_String>

	// Stop
	DirtyDawg.command = STOP;
 684:	c9 e7       	ldi	r28, 0x79	; 121
 686:	d1 e0       	ldi	r29, 0x01	; 1
 688:	12 e0       	ldi	r17, 0x02	; 2
 68a:	1e 83       	std	Y+6, r17	; 0x06
	DirtyDawg.ECG = 0;
 68c:	1d 82       	std	Y+5, r1	; 0x05
	BT_Send('S');
 68e:	83 e5       	ldi	r24, 0x53	; 83
 690:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.command);
 694:	8e 81       	ldd	r24, Y+6	; 0x06
 696:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 69a:	8d 81       	ldd	r24, Y+5	; 0x05
 69c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 6a0:	2f ef       	ldi	r18, 0xFF	; 255
 6a2:	83 ed       	ldi	r24, 0xD3	; 211
 6a4:	90 e3       	ldi	r25, 0x30	; 48
 6a6:	21 50       	subi	r18, 0x01	; 1
 6a8:	80 40       	sbci	r24, 0x00	; 0
 6aa:	90 40       	sbci	r25, 0x00	; 0
 6ac:	e1 f7       	brne	.-8      	; 0x6a6 <Test_Car_Commands+0x42>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <Test_Car_Commands+0x4c>
 6b0:	00 00       	nop

	_delay_ms(2000);

	// Drive forward
	DirtyDawg.command = 0;
 6b2:	1e 82       	std	Y+6, r1	; 0x06
	DirtyDawg.ECG = 100;
 6b4:	04 e6       	ldi	r16, 0x64	; 100
 6b6:	0d 83       	std	Y+5, r16	; 0x05
	BT_Send('S');
 6b8:	83 e5       	ldi	r24, 0x53	; 83
 6ba:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.command);
 6be:	8e 81       	ldd	r24, Y+6	; 0x06
 6c0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 6c4:	8d 81       	ldd	r24, Y+5	; 0x05
 6c6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 6ca:	2f ef       	ldi	r18, 0xFF	; 255
 6cc:	83 ed       	ldi	r24, 0xD3	; 211
 6ce:	90 e3       	ldi	r25, 0x30	; 48
 6d0:	21 50       	subi	r18, 0x01	; 1
 6d2:	80 40       	sbci	r24, 0x00	; 0
 6d4:	90 40       	sbci	r25, 0x00	; 0
 6d6:	e1 f7       	brne	.-8      	; 0x6d0 <Test_Car_Commands+0x6c>
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <Test_Car_Commands+0x76>
 6da:	00 00       	nop

	_delay_ms(2000);
	
	// Reverse
	DirtyDawg.command = REVERSE;
 6dc:	84 e0       	ldi	r24, 0x04	; 4
 6de:	8e 83       	std	Y+6, r24	; 0x06
	DirtyDawg.ECG = 100;
 6e0:	0d 83       	std	Y+5, r16	; 0x05
	BT_Send('S');
 6e2:	83 e5       	ldi	r24, 0x53	; 83
 6e4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.command);
 6e8:	8e 81       	ldd	r24, Y+6	; 0x06
 6ea:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 6ee:	8d 81       	ldd	r24, Y+5	; 0x05
 6f0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 6f4:	2f ef       	ldi	r18, 0xFF	; 255
 6f6:	83 ed       	ldi	r24, 0xD3	; 211
 6f8:	90 e3       	ldi	r25, 0x30	; 48
 6fa:	21 50       	subi	r18, 0x01	; 1
 6fc:	80 40       	sbci	r24, 0x00	; 0
 6fe:	90 40       	sbci	r25, 0x00	; 0
 700:	e1 f7       	brne	.-8      	; 0x6fa <Test_Car_Commands+0x96>
 702:	00 c0       	rjmp	.+0      	; 0x704 <Test_Car_Commands+0xa0>
 704:	00 00       	nop
	
	_delay_ms(2000);
	
	// Turn on lights
	DirtyDawg.command = LIGHT;
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	8e 83       	std	Y+6, r24	; 0x06
	DirtyDawg.ECG = 0;
 70a:	1d 82       	std	Y+5, r1	; 0x05
	BT_Send('S');
 70c:	83 e5       	ldi	r24, 0x53	; 83
 70e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.command);
 712:	8e 81       	ldd	r24, Y+6	; 0x06
 714:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 718:	8d 81       	ldd	r24, Y+5	; 0x05
 71a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 71e:	2f ef       	ldi	r18, 0xFF	; 255
 720:	83 ed       	ldi	r24, 0xD3	; 211
 722:	90 e3       	ldi	r25, 0x30	; 48
 724:	21 50       	subi	r18, 0x01	; 1
 726:	80 40       	sbci	r24, 0x00	; 0
 728:	90 40       	sbci	r25, 0x00	; 0
 72a:	e1 f7       	brne	.-8      	; 0x724 <Test_Car_Commands+0xc0>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <Test_Car_Commands+0xca>
 72e:	00 00       	nop

	_delay_ms(2000);
	
	// Turn left
	DirtyDawg.command = TURN_LEFT;
 730:	88 e0       	ldi	r24, 0x08	; 8
 732:	8e 83       	std	Y+6, r24	; 0x06
	DirtyDawg.ECG = 0;
 734:	1d 82       	std	Y+5, r1	; 0x05
	BT_Send('S');
 736:	83 e5       	ldi	r24, 0x53	; 83
 738:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.command);
 73c:	8e 81       	ldd	r24, Y+6	; 0x06
 73e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 742:	8d 81       	ldd	r24, Y+5	; 0x05
 744:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 748:	2f ef       	ldi	r18, 0xFF	; 255
 74a:	83 ed       	ldi	r24, 0xD3	; 211
 74c:	90 e3       	ldi	r25, 0x30	; 48
 74e:	21 50       	subi	r18, 0x01	; 1
 750:	80 40       	sbci	r24, 0x00	; 0
 752:	90 40       	sbci	r25, 0x00	; 0
 754:	e1 f7       	brne	.-8      	; 0x74e <Test_Car_Commands+0xea>
 756:	00 c0       	rjmp	.+0      	; 0x758 <Test_Car_Commands+0xf4>
 758:	00 00       	nop

	_delay_ms(2000);
	
	// Turn right
	DirtyDawg.command = TURN_RIGHT;
 75a:	80 e1       	ldi	r24, 0x10	; 16
 75c:	8e 83       	std	Y+6, r24	; 0x06
	DirtyDawg.ECG = 0;
 75e:	1d 82       	std	Y+5, r1	; 0x05
	BT_Send('S');
 760:	83 e5       	ldi	r24, 0x53	; 83
 762:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.command);
 766:	8e 81       	ldd	r24, Y+6	; 0x06
 768:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 76c:	8d 81       	ldd	r24, Y+5	; 0x05
 76e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
 772:	2f ef       	ldi	r18, 0xFF	; 255
 774:	83 ed       	ldi	r24, 0xD3	; 211
 776:	90 e3       	ldi	r25, 0x30	; 48
 778:	21 50       	subi	r18, 0x01	; 1
 77a:	80 40       	sbci	r24, 0x00	; 0
 77c:	90 40       	sbci	r25, 0x00	; 0
 77e:	e1 f7       	brne	.-8      	; 0x778 <Test_Car_Commands+0x114>
 780:	00 c0       	rjmp	.+0      	; 0x782 <Test_Car_Commands+0x11e>
 782:	00 00       	nop

	_delay_ms(2000);

	// Stop
	DirtyDawg.command = STOP;
 784:	1e 83       	std	Y+6, r17	; 0x06
	DirtyDawg.ECG = 0;
 786:	1d 82       	std	Y+5, r1	; 0x05
	BT_Send('S');
 788:	83 e5       	ldi	r24, 0x53	; 83
 78a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.command);
 78e:	8e 81       	ldd	r24, Y+6	; 0x06
 790:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
	BT_Send(DirtyDawg.ECG);
 794:	8d 81       	ldd	r24, Y+5	; 0x05
 796:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>

	LCD_Byte(LCD_CLEAR,LCD_CMD);
 79a:	60 e0       	ldi	r22, 0x00	; 0
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>

}
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	1f 91       	pop	r17
 7a8:	0f 91       	pop	r16
 7aa:	08 95       	ret

000007ac <Red_LED_On>:
void Yellow_LED_Off(void){
	PORTD &= (0<<PORTD7);
}

void Red_LED_On(void){
	PORTB |= (1<<PORTB1);
 7ac:	29 9a       	sbi	0x05, 1	; 5
 7ae:	08 95       	ret

000007b0 <Error>:

void Error(unsigned int errorcode){
	
	//Flashes the red lights and show message on LCD
	unsigned long ticks = 0;
	LCD_Byte(LCD_CLEAR, LCD_CMD);
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_Byte(LCD_LINE_1 + 5, LCD_CMD);
 7b8:	60 e0       	ldi	r22, 0x00	; 0
 7ba:	85 e8       	ldi	r24, 0x85	; 133
 7bc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_String("Error");
 7c0:	8e e2       	ldi	r24, 0x2E	; 46
 7c2:	91 e0       	ldi	r25, 0x01	; 1
 7c4:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_String>
}

void Error(unsigned int errorcode){
	
	//Flashes the red lights and show message on LCD
	unsigned long ticks = 0;
 7c8:	c1 2c       	mov	r12, r1
 7ca:	d1 2c       	mov	r13, r1
 7cc:	76 01       	movw	r14, r12
	LCD_Byte(LCD_CLEAR, LCD_CMD);
	LCD_Byte(LCD_LINE_1 + 5, LCD_CMD);
	LCD_String("Error");
	for(;;){
		if(ticks%10000 == 0){
 7ce:	0f 2e       	mov	r0, r31
 7d0:	f0 e1       	ldi	r31, 0x10	; 16
 7d2:	8f 2e       	mov	r8, r31
 7d4:	f7 e2       	ldi	r31, 0x27	; 39
 7d6:	9f 2e       	mov	r9, r31
 7d8:	a1 2c       	mov	r10, r1
 7da:	b1 2c       	mov	r11, r1
 7dc:	f0 2d       	mov	r31, r0
 7de:	c7 01       	movw	r24, r14
 7e0:	b6 01       	movw	r22, r12
 7e2:	a5 01       	movw	r20, r10
 7e4:	94 01       	movw	r18, r8
 7e6:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodsi4>
 7ea:	67 2b       	or	r22, r23
 7ec:	68 2b       	or	r22, r24
 7ee:	69 2b       	or	r22, r25
 7f0:	11 f4       	brne	.+4      	; 0x7f6 <Error+0x46>
			Red_LED_On();
 7f2:	0e 94 d6 03 	call	0x7ac	; 0x7ac <Red_LED_On>
		}
		if(ticks%10000 == 50000){
			Red_LED_Off();
		}
		ticks++;
 7f6:	8f ef       	ldi	r24, 0xFF	; 255
 7f8:	c8 1a       	sub	r12, r24
 7fa:	d8 0a       	sbc	r13, r24
 7fc:	e8 0a       	sbc	r14, r24
 7fe:	f8 0a       	sbc	r15, r24
	}
 800:	ee cf       	rjmp	.-36     	; 0x7de <Error+0x2e>

00000802 <main>:
volatile uint8_t portbhistory = 0;

int main(void){

	// Sets the starting state
	DirtyDawg.state = LCD_STATE;
 802:	c9 e7       	ldi	r28, 0x79	; 121
 804:	d1 e0       	ldi	r29, 0x01	; 1
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	88 87       	std	Y+8, r24	; 0x08

	// Initiate the hardware
	System_Init();
 80a:	0e 94 53 00 	call	0xa6	; 0xa6 <System_Init>
	
	// Initiate the TWI bus as a master
	TWI_Master_Init();
 80e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <TWI_Master_Init>

	// Initiate the hardware defined UART
	UART_Init(19200);
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	9b e4       	ldi	r25, 0x4B	; 75
 816:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_Init>
	
	// Initiate the LCD Screen
	LCD_Init();
 81a:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_Init>
	
	// Initiate the software define UART
	suart_init();
 81e:	0e 94 ad 04 	call	0x95a	; 0x95a <suart_init>

	// Initiate/Clear the BlueSmirf from previous commands
	BT_Init();
 822:	0e 94 07 01 	call	0x20e	; 0x20e <BT_Init>

	// Connect the BlueSmirf to the car
	LCD_Byte(LCD_LINE_1 + 3, LCD_CMD);
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	83 e8       	ldi	r24, 0x83	; 131
 82a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_String("DirtyDawg!");
 82e:	84 e3       	ldi	r24, 0x34	; 52
 830:	91 e0       	ldi	r25, 0x01	; 1
 832:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_String>
	LCD_Byte(LCD_LINE_2 + 3, LCD_CMD);
 836:	60 e0       	ldi	r22, 0x00	; 0
 838:	83 ec       	ldi	r24, 0xC3	; 195
 83a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_String("Connecting");
 83e:	8f e3       	ldi	r24, 0x3F	; 63
 840:	91 e0       	ldi	r25, 0x01	; 1
 842:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_String>
	BT_Connection_Check();
 846:	0e 94 2f 01 	call	0x25e	; 0x25e <BT_Connection_Check>
	while(!(DirtyDawg.status & BT_CONNECTED))
 84a:	8f 81       	ldd	r24, Y+7	; 0x07
 84c:	83 fd       	sbrc	r24, 3
 84e:	05 c0       	rjmp	.+10     	; 0x85a <main+0x58>
		BT_Connect();
 850:	0e 94 8e 01 	call	0x31c	; 0x31c <BT_Connect>
	LCD_Byte(LCD_LINE_1 + 3, LCD_CMD);
	LCD_String("DirtyDawg!");
	LCD_Byte(LCD_LINE_2 + 3, LCD_CMD);
	LCD_String("Connecting");
	BT_Connection_Check();
	while(!(DirtyDawg.status & BT_CONNECTED))
 854:	8f 81       	ldd	r24, Y+7	; 0x07
 856:	83 ff       	sbrs	r24, 3
 858:	fb cf       	rjmp	.-10     	; 0x850 <main+0x4e>
		BT_Connect();
	  
	// When active connection send '=' to car 
	BT_Send('=');
 85a:	8d e3       	ldi	r24, 0x3D	; 61
 85c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <BT_Send>
//	_delay_ms(500);
//	Test_Car_Commands();
	

	// Prepare the LCD for distance data
	LCD_Byte(LCD_LINE_1, LCD_CMD);
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	80 e8       	ldi	r24, 0x80	; 128
 864:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_String(ROW1);
 868:	8a e4       	ldi	r24, 0x4A	; 74
 86a:	91 e0       	ldi	r25, 0x01	; 1
 86c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_String>
	LCD_Byte(LCD_LINE_2, LCD_CMD);
 870:	60 e0       	ldi	r22, 0x00	; 0
 872:	80 ec       	ldi	r24, 0xC0	; 192
 874:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_String(ROW2);
 878:	8b e5       	ldi	r24, 0x5B	; 91
 87a:	91 e0       	ldi	r25, 0x01	; 1
 87c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_String>
	
	// Main loop
	while(TRUE){
		
		switch(DirtyDawg.state){
 880:	c9 e7       	ldi	r28, 0x79	; 121
 882:	d1 e0       	ldi	r29, 0x01	; 1
 884:	88 85       	ldd	r24, Y+8	; 0x08
 886:	82 30       	cpi	r24, 0x02	; 2
 888:	39 f0       	breq	.+14     	; 0x898 <main+0x96>
 88a:	83 30       	cpi	r24, 0x03	; 3
 88c:	41 f0       	breq	.+16     	; 0x89e <main+0x9c>
 88e:	81 30       	cpi	r24, 0x01	; 1
 890:	49 f4       	brne	.+18     	; 0x8a4 <main+0xa2>
			
			// Put sensor data to LCD
			case LCD_STATE:
				LCD_Update();
 892:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Update>
				break;
 896:	f6 cf       	rjmp	.-20     	; 0x884 <main+0x82>
			
			// Send commands to the car
			case SEND_DATA_STATE:
				BT_Send_Data();
 898:	0e 94 27 02 	call	0x44e	; 0x44e <BT_Send_Data>
				break;
 89c:	f3 cf       	rjmp	.-26     	; 0x884 <main+0x82>

			// Get sensor data from the car
			case GET_DATA_STATE:
				BT_Recieve_Data();
 89e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <BT_Recieve_Data>
				break;
 8a2:	f0 cf       	rjmp	.-32     	; 0x884 <main+0x82>
				
			default:
				Error(0x53);
 8a4:	83 e5       	ldi	r24, 0x53	; 83
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Error>
 8ac:	eb cf       	rjmp	.-42     	; 0x884 <main+0x82>

000008ae <__vector_5>:
			
		}
	}	
}

ISR(PCINT2_vect){
 8ae:	1f 92       	push	r1
 8b0:	0f 92       	push	r0
 8b2:	0f b6       	in	r0, 0x3f	; 63
 8b4:	0f 92       	push	r0
 8b6:	11 24       	eor	r1, r1
 8b8:	2f 93       	push	r18
 8ba:	3f 93       	push	r19
 8bc:	4f 93       	push	r20
 8be:	5f 93       	push	r21
 8c0:	6f 93       	push	r22
 8c2:	7f 93       	push	r23
 8c4:	8f 93       	push	r24
 8c6:	9f 93       	push	r25
 8c8:	af 93       	push	r26
 8ca:	bf 93       	push	r27
 8cc:	ef 93       	push	r30
 8ce:	ff 93       	push	r31
    uint8_t changedbits;

    changedbits = PIND ^ portbhistory;
 8d0:	89 b1       	in	r24, 0x09	; 9
 8d2:	90 91 6c 01 	lds	r25, 0x016C
 8d6:	89 27       	eor	r24, r25
    portbhistory = PIND;
 8d8:	99 b1       	in	r25, 0x09	; 9
 8da:	90 93 6c 01 	sts	0x016C, r25

    // Interrupt PCINT20
	// Toggles light on and off
    if(changedbits & (1 << PIND4)){
 8de:	84 ff       	sbrs	r24, 4
 8e0:	10 c0       	rjmp	.+32     	; 0x902 <__vector_5+0x54>
		if(DirtyDawg.status & LIGHT_BUTTON){
 8e2:	90 91 80 01 	lds	r25, 0x0180
 8e6:	94 ff       	sbrs	r25, 4
 8e8:	09 c0       	rjmp	.+18     	; 0x8fc <__vector_5+0x4e>
			DirtyDawg.command ^= LIGHT;
 8ea:	e9 e7       	ldi	r30, 0x79	; 121
 8ec:	f1 e0       	ldi	r31, 0x01	; 1
 8ee:	36 81       	ldd	r19, Z+6	; 0x06
 8f0:	21 e0       	ldi	r18, 0x01	; 1
 8f2:	23 27       	eor	r18, r19
 8f4:	26 83       	std	Z+6, r18	; 0x06
			DirtyDawg.status &= ~LIGHT_BUTTON;
 8f6:	90 7e       	andi	r25, 0xE0	; 224
 8f8:	97 83       	std	Z+7, r25	; 0x07
 8fa:	03 c0       	rjmp	.+6      	; 0x902 <__vector_5+0x54>
		}
		else{
			DirtyDawg.status |= LIGHT_BUTTON;
 8fc:	90 61       	ori	r25, 0x10	; 16
 8fe:	90 93 80 01 	sts	0x0180, r25
		}
    }

    // Interrupt PCINT21
	// Toggles reverse and forward
    if(changedbits & (1 << PIND5)){
 902:	85 ff       	sbrs	r24, 5
 904:	0f c0       	rjmp	.+30     	; 0x924 <__vector_5+0x76>
		if(DirtyDawg.status & REVERSE_BUTTON){
 906:	80 91 80 01 	lds	r24, 0x0180
 90a:	85 ff       	sbrs	r24, 5
 90c:	08 c0       	rjmp	.+16     	; 0x91e <__vector_5+0x70>
			// DirtyDawg.command ^= REVERSE;
			Test_Car_Commands();
 90e:	0e 94 32 03 	call	0x664	; 0x664 <Test_Car_Commands>
			DirtyDawg.status &= ~REVERSE_BUTTON;
 912:	e9 e7       	ldi	r30, 0x79	; 121
 914:	f1 e0       	ldi	r31, 0x01	; 1
 916:	87 81       	ldd	r24, Z+7	; 0x07
 918:	80 7c       	andi	r24, 0xC0	; 192
 91a:	87 83       	std	Z+7, r24	; 0x07
 91c:	03 c0       	rjmp	.+6      	; 0x924 <__vector_5+0x76>
		}
		else{
			DirtyDawg.status |= REVERSE_BUTTON;
 91e:	80 62       	ori	r24, 0x20	; 32
 920:	80 93 80 01 	sts	0x0180, r24
		}
    }
}
 924:	ff 91       	pop	r31
 926:	ef 91       	pop	r30
 928:	bf 91       	pop	r27
 92a:	af 91       	pop	r26
 92c:	9f 91       	pop	r25
 92e:	8f 91       	pop	r24
 930:	7f 91       	pop	r23
 932:	6f 91       	pop	r22
 934:	5f 91       	pop	r21
 936:	4f 91       	pop	r20
 938:	3f 91       	pop	r19
 93a:	2f 91       	pop	r18
 93c:	0f 90       	pop	r0
 93e:	0f be       	out	0x3f, r0	; 63
 940:	0f 90       	pop	r0
 942:	1f 90       	pop	r1
 944:	18 95       	reti

00000946 <__vector_18>:

ISR(USART_RX_vect){
 946:	1f 92       	push	r1
 948:	0f 92       	push	r0
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	0f 92       	push	r0
 94e:	11 24       	eor	r1, r1
		DirtyDawg.front_sensor = BT_Recieve();
		DirtyDawg.back_sensor = BT_Recieve();
		DirtyDawg.left_sensor = BT_Recieve();
		DirtyDawg.right_sensor = BT_Recieve();
	} */
}
 950:	0f 90       	pop	r0
 952:	0f be       	out	0x3f, r0	; 63
 954:	0f 90       	pop	r0
 956:	1f 90       	pop	r1
 958:	18 95       	reti

0000095a <suart_init>:


void suart_init( void )
{
	// Enable interrupt
	sei();
 95a:	78 94       	sei
	
	// Set the port HIGH
	SBIT(PORTD,STX) = 1;
 95c:	5b 9a       	sbi	0x0b, 3	; 11

	// Set the prescaler to 1
	TCCR0B = (1 << CS00);	
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	85 bd       	out	0x25, r24	; 37
	
	// Enable output compare interrupt
	TIMSK0 = (1 << OCIE0A);		
 962:	82 e0       	ldi	r24, 0x02	; 2
 964:	80 93 6e 00 	sts	0x006E, r24

	// Falling edge
	EICRA |= (1 << ISC01);
 968:	e9 e6       	ldi	r30, 0x69	; 105
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
 96e:	82 60       	ori	r24, 0x02	; 2
 970:	80 83       	st	Z, r24
	
	// Enable edge interrupt			
	EIMSK |= (1 << INT0);			
 972:	e8 9a       	sbi	0x1d, 0	; 29

	// Nothing to send
	stx_count = 0;	
 974:	10 92 85 01 	sts	0x0185, r1
	
	// Nothing to receive			
	srx_done = 0;	
 978:	10 92 86 01 	sts	0x0186, r1
	
	// Sets the output	        
	STXDDR |= 1 << STX;			
 97c:	53 9a       	sbi	0x0a, 3	; 10
 97e:	08 95       	ret

00000980 <sgetchar>:
}


u8 sgetchar (void)      // Receive Byte
{
	while (!srx_done);      // wait until byte is received
 980:	80 91 86 01 	lds	r24, 0x0186
 984:	88 23       	and	r24, r24
 986:	e1 f3       	breq	.-8      	; 0x980 <sgetchar>
	srx_done = 0;
 988:	10 92 86 01 	sts	0x0186, r1
	return srx_data;
}
 98c:	80 91 84 01 	lds	r24, 0x0184
 990:	08 95       	ret

00000992 <__vector_1>:


ISR (INT0_vect)    // RX start
{
 992:	1f 92       	push	r1
 994:	0f 92       	push	r0
 996:	0f b6       	in	r0, 0x3f	; 63
 998:	0f 92       	push	r0
 99a:	11 24       	eor	r1, r1
 99c:	8f 93       	push	r24
	// scan 1.5 bits after start (to set timing right)
	OCR0B = TCNT0 + (u8)((BIT_TIME * 3) / 2);
 99e:	86 b5       	in	r24, 0x26	; 38
 9a0:	80 53       	subi	r24, 0x30	; 48
 9a2:	88 bd       	out	0x28, r24	; 40

	// Clear bit storage
	srx_tmp = 0;  
 9a4:	10 92 87 01 	sts	0x0187, r1
	
	// Set bit-mask      
	srx_mask = 1;        
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	80 93 83 01 	sts	0x0183, r24
	if( !(SRXPIN & 1<<SRX))  {  // still low
 9ae:	4a 99       	sbic	0x09, 2	; 9
 9b0:	04 c0       	rjmp	.+8      	; 0x9ba <__vector_1+0x28>
		EIMSK &= ~(1 << INT0);			// disable edge interrupt
 9b2:	e8 98       	cbi	0x1d, 0	; 29
		TIMSK0 = 1<<OCIE0A^1<<OCIE0B;  // wait for first bit
 9b4:	86 e0       	ldi	r24, 0x06	; 6
 9b6:	80 93 6e 00 	sts	0x006E, r24
	}
	TIFR0 = (1<<OCF0B);      // clear pending interrupt ? why does that output compare int occur?
 9ba:	84 e0       	ldi	r24, 0x04	; 4
 9bc:	85 bb       	out	0x15, r24	; 21
	EIFR |= (1 << INTF0);		// clear any pending edge interrupt
 9be:	e0 9a       	sbi	0x1c, 0	; 28
}
 9c0:	8f 91       	pop	r24
 9c2:	0f 90       	pop	r0
 9c4:	0f be       	out	0x3f, r0	; 63
 9c6:	0f 90       	pop	r0
 9c8:	1f 90       	pop	r1
 9ca:	18 95       	reti

000009cc <__vector_15>:


ISR (TIMER0_COMPB_vect)
{
 9cc:	1f 92       	push	r1
 9ce:	0f 92       	push	r0
 9d0:	0f b6       	in	r0, 0x3f	; 63
 9d2:	0f 92       	push	r0
 9d4:	11 24       	eor	r1, r1
 9d6:	8f 93       	push	r24
 9d8:	9f 93       	push	r25
	u8 in = SRXPIN;      // scan RX line
 9da:	99 b1       	in	r25, 0x09	; 9

	if (srx_mask) {
 9dc:	80 91 83 01 	lds	r24, 0x0183
 9e0:	88 23       	and	r24, r24
 9e2:	71 f0       	breq	.+28     	; 0xa00 <__vector_15+0x34>
		if (in & 1 << SRX)
 9e4:	92 ff       	sbrs	r25, 2
 9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <__vector_15+0x26>
			srx_tmp |= srx_mask;
 9e8:	90 91 87 01 	lds	r25, 0x0187
 9ec:	98 2b       	or	r25, r24
 9ee:	90 93 87 01 	sts	0x0187, r25
		srx_mask <<= 1; 
 9f2:	88 0f       	add	r24, r24
 9f4:	80 93 83 01 	sts	0x0183, r24
		OCR0B += BIT_TIME;      // next bit slice
 9f8:	88 b5       	in	r24, 0x28	; 40
 9fa:	85 57       	subi	r24, 0x75	; 117
 9fc:	88 bd       	out	0x28, r24	; 40
 9fe:	0c c0       	rjmp	.+24     	; 0xa18 <__vector_15+0x4c>
		} else {
		srx_done = 1;      // mark RX data valid
 a00:	81 e0       	ldi	r24, 0x01	; 1
 a02:	80 93 86 01 	sts	0x0186, r24
		srx_data = srx_tmp;      // store RX data
 a06:	90 91 87 01 	lds	r25, 0x0187
 a0a:	90 93 84 01 	sts	0x0184, r25

		TIMSK0 = 1<<OCIE0A;        // enable TX and wait for start
 a0e:	92 e0       	ldi	r25, 0x02	; 2
 a10:	90 93 6e 00 	sts	0x006E, r25
		EIFR |= (1 << INTF0);		// clear any pending edge interrupt: This hinders the in0-vect from beeing triggerd again just now which may occur by falling edges in the serial data bits
 a14:	e0 9a       	sbi	0x1c, 0	; 28
		EIMSK = 1 << INT0;	// Re-enable edge interrupt
 a16:	8d bb       	out	0x1d, r24	; 29
	}

}
 a18:	9f 91       	pop	r25
 a1a:	8f 91       	pop	r24
 a1c:	0f 90       	pop	r0
 a1e:	0f be       	out	0x3f, r0	; 63
 a20:	0f 90       	pop	r0
 a22:	1f 90       	pop	r1
 a24:	18 95       	reti

00000a26 <__vector_14>:
	sputchar (*txt++);
}


ISR (TIMER0_COMPA_vect)    // TX bit
{
 a26:	1f 92       	push	r1
 a28:	0f 92       	push	r0
 a2a:	0f b6       	in	r0, 0x3f	; 63
 a2c:	0f 92       	push	r0
 a2e:	11 24       	eor	r1, r1
 a30:	8f 93       	push	r24
 a32:	9f 93       	push	r25
	u8 dout;
	u8 count;

	OCR0A += BIT_TIME;      // Next bit slice
 a34:	87 b5       	in	r24, 0x27	; 39
 a36:	85 57       	subi	r24, 0x75	; 117
 a38:	87 bd       	out	0x27, r24	; 39
	count = stx_count;
 a3a:	80 91 85 01 	lds	r24, 0x0185

	if (count) {
 a3e:	88 23       	and	r24, r24
 a40:	99 f0       	breq	.+38     	; 0xa68 <__vector_14+0x42>
		stx_count = --count;    // Count down
 a42:	81 50       	subi	r24, 0x01	; 1
 a44:	80 93 85 01 	sts	0x0185, r24

		dout = 0;
		if (count != 9) {      // No start bit
 a48:	89 30       	cpi	r24, 0x09	; 9
 a4a:	49 f0       	breq	.+18     	; 0xa5e <__vector_14+0x38>
			if (!(stx_data & 1))    // Test inverted data
 a4c:	80 91 82 01 	lds	r24, 0x0182
 a50:	98 2f       	mov	r25, r24
 a52:	90 95       	com	r25
 a54:	91 70       	andi	r25, 0x01	; 1

			dout = 1;
			stx_data >>= 1;      // Shift zero in from left
 a56:	86 95       	lsr	r24
 a58:	80 93 82 01 	sts	0x0182, r24
 a5c:	01 c0       	rjmp	.+2      	; 0xa60 <__vector_14+0x3a>
	count = stx_count;

	if (count) {
		stx_count = --count;    // Count down

		dout = 0;
 a5e:	90 e0       	ldi	r25, 0x00	; 0

			dout = 1;
			stx_data >>= 1;      // Shift zero in from left
		}

		SBIT(PORTD,STX) = dout;
 a60:	90 fd       	sbrc	r25, 0
 a62:	5b 9a       	sbi	0x0b, 3	; 11
 a64:	90 ff       	sbrs	r25, 0
 a66:	5b 98       	cbi	0x0b, 3	; 11
	}
}
 a68:	9f 91       	pop	r25
 a6a:	8f 91       	pop	r24
 a6c:	0f 90       	pop	r0
 a6e:	0f be       	out	0x3f, r0	; 63
 a70:	0f 90       	pop	r0
 a72:	1f 90       	pop	r1
 a74:	18 95       	reti

00000a76 <Write_Byte>:
	Write_Byte(LCD_ADDR, (bits & ~ENABLE));
	_delay_ms(5);
		
}

void Write_Byte(uint8_t addr, uint8_t bits){
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	c8 2f       	mov	r28, r24
 a7c:	d6 2f       	mov	r29, r22
			
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 a7e:	84 ea       	ldi	r24, 0xA4	; 164
 a80:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 a84:	0e 94 fe 05 	call	0xbfc	; 0xbfc <TWI_Busy>
 a88:	89 2b       	or	r24, r25
 a8a:	e1 f3       	breq	.-8      	; 0xa84 <Write_Byte+0xe>
	if((TWSR & MASK) != START)Error(START);
 a8c:	80 91 b9 00 	lds	r24, 0x00B9
 a90:	88 7f       	andi	r24, 0xF8	; 248
 a92:	88 30       	cpi	r24, 0x08	; 8
 a94:	21 f0       	breq	.+8      	; 0xa9e <Write_Byte+0x28>
 a96:	88 e0       	ldi	r24, 0x08	; 8
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Error>
		
	//Loads the slave address and set the R/W bit to 0
	TWDR = (addr<<1) | LCD_WRITE;
 a9e:	cc 0f       	add	r28, r28
 aa0:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN); 
 aa4:	84 e8       	ldi	r24, 0x84	; 132
 aa6:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 aaa:	0e 94 fe 05 	call	0xbfc	; 0xbfc <TWI_Busy>
 aae:	89 2b       	or	r24, r25
 ab0:	e1 f3       	breq	.-8      	; 0xaaa <Write_Byte+0x34>
	if((TWSR & MASK) !=  MT_ADDRESS_ACK)Error((TWSR & MASK));
 ab2:	80 91 b9 00 	lds	r24, 0x00B9
 ab6:	88 7f       	andi	r24, 0xF8	; 248
 ab8:	88 31       	cpi	r24, 0x18	; 24
 aba:	31 f0       	breq	.+12     	; 0xac8 <Write_Byte+0x52>
 abc:	80 91 b9 00 	lds	r24, 0x00B9
 ac0:	88 7f       	andi	r24, 0xF8	; 248
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Error>
		
	//Sends the data to the slave
	TWDR = bits; //4bits
 ac8:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
 acc:	84 e8       	ldi	r24, 0x84	; 132
 ace:	80 93 bc 00 	sts	0x00BC, r24
	
	while(!TWI_Busy());
 ad2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <TWI_Busy>
 ad6:	89 2b       	or	r24, r25
 ad8:	e1 f3       	breq	.-8      	; 0xad2 <Write_Byte+0x5c>
	if((TWSR & MASK) !=  MT_BYTE_ACK)Error((TWSR & MASK));
 ada:	80 91 b9 00 	lds	r24, 0x00B9
 ade:	88 7f       	andi	r24, 0xF8	; 248
 ae0:	88 32       	cpi	r24, 0x28	; 40
 ae2:	31 f0       	breq	.+12     	; 0xaf0 <Write_Byte+0x7a>
 ae4:	80 91 b9 00 	lds	r24, 0x00B9
 ae8:	88 7f       	andi	r24, 0xF8	; 248
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Error>
		
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 af0:	84 e9       	ldi	r24, 0x94	; 148
 af2:	80 93 bc 00 	sts	0x00BC, r24
	
}
 af6:	df 91       	pop	r29
 af8:	cf 91       	pop	r28
 afa:	08 95       	ret

00000afc <LCD_Toggle_enable>:
	Write_Byte(LCD_ADDR, bits_low);
	LCD_Toggle_enable(bits_low);
	
}

void LCD_Toggle_enable(uint8_t bits){
 afc:	cf 93       	push	r28
 afe:	c8 2f       	mov	r28, r24
 b00:	81 ee       	ldi	r24, 0xE1	; 225
 b02:	94 e0       	ldi	r25, 0x04	; 4
 b04:	01 97       	sbiw	r24, 0x01	; 1
 b06:	f1 f7       	brne	.-4      	; 0xb04 <LCD_Toggle_enable+0x8>
 b08:	00 c0       	rjmp	.+0      	; 0xb0a <LCD_Toggle_enable+0xe>
 b0a:	00 00       	nop
	
	// Toggles the enable pin on the display to activate the code
	_delay_ms(5);
	Write_Byte(LCD_ADDR, (bits | ENABLE));
 b0c:	6c 2f       	mov	r22, r28
 b0e:	64 60       	ori	r22, 0x04	; 4
 b10:	87 e2       	ldi	r24, 0x27	; 39
 b12:	0e 94 3b 05 	call	0xa76	; 0xa76 <Write_Byte>
 b16:	81 ee       	ldi	r24, 0xE1	; 225
 b18:	94 e0       	ldi	r25, 0x04	; 4
 b1a:	01 97       	sbiw	r24, 0x01	; 1
 b1c:	f1 f7       	brne	.-4      	; 0xb1a <LCD_Toggle_enable+0x1e>
 b1e:	00 c0       	rjmp	.+0      	; 0xb20 <LCD_Toggle_enable+0x24>
 b20:	00 00       	nop
	_delay_ms(5);
	Write_Byte(LCD_ADDR, (bits & ~ENABLE));
 b22:	6c 2f       	mov	r22, r28
 b24:	6b 7f       	andi	r22, 0xFB	; 251
 b26:	87 e2       	ldi	r24, 0x27	; 39
 b28:	0e 94 3b 05 	call	0xa76	; 0xa76 <Write_Byte>
 b2c:	81 ee       	ldi	r24, 0xE1	; 225
 b2e:	94 e0       	ldi	r25, 0x04	; 4
 b30:	01 97       	sbiw	r24, 0x01	; 1
 b32:	f1 f7       	brne	.-4      	; 0xb30 <LCD_Toggle_enable+0x34>
 b34:	00 c0       	rjmp	.+0      	; 0xb36 <LCD_Toggle_enable+0x3a>
 b36:	00 00       	nop
	_delay_ms(5);
		
}
 b38:	cf 91       	pop	r28
 b3a:	08 95       	ret

00000b3c <LCD_Byte>:
	LCD_Byte(0x01, LCD_CMD); 
	_delay_ms(5); //5 ms delay
	
}

void LCD_Byte(uint8_t bits, uint8_t mode){
 b3c:	cf 93       	push	r28
 b3e:	df 93       	push	r29
 b40:	c6 2f       	mov	r28, r22
 b42:	c8 60       	ori	r28, 0x08	; 8
	
	uint8_t bits_high, bits_low;
	
	//Divides the data in two 4 bit values
	bits_high = mode | (bits & 0xF0) | LCD_BACKLIGHT;
 b44:	d8 2f       	mov	r29, r24
 b46:	d0 7f       	andi	r29, 0xF0	; 240
 b48:	dc 2b       	or	r29, r28
	bits_low = mode | ((bits<<4) & 0xF0) | LCD_BACKLIGHT;
 b4a:	90 e1       	ldi	r25, 0x10	; 16
 b4c:	89 9f       	mul	r24, r25
 b4e:	90 01       	movw	r18, r0
 b50:	11 24       	eor	r1, r1
 b52:	c2 2b       	or	r28, r18
	
	// Send the high bits
	Write_Byte(LCD_ADDR, bits_high);
 b54:	6d 2f       	mov	r22, r29
 b56:	87 e2       	ldi	r24, 0x27	; 39
 b58:	0e 94 3b 05 	call	0xa76	; 0xa76 <Write_Byte>
	LCD_Toggle_enable(bits_high);
 b5c:	8d 2f       	mov	r24, r29
 b5e:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_Toggle_enable>
	
	// Send the low bits
	Write_Byte(LCD_ADDR, bits_low);
 b62:	6c 2f       	mov	r22, r28
 b64:	87 e2       	ldi	r24, 0x27	; 39
 b66:	0e 94 3b 05 	call	0xa76	; 0xa76 <Write_Byte>
	LCD_Toggle_enable(bits_low);
 b6a:	8c 2f       	mov	r24, r28
 b6c:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_Toggle_enable>
	
}
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	08 95       	ret

00000b76 <LCD_Init>:


void LCD_Init(void){
	
	// Basic initialization
	LCD_Byte(0x33, LCD_CMD); 
 b76:	60 e0       	ldi	r22, 0x00	; 0
 b78:	83 e3       	ldi	r24, 0x33	; 51
 b7a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	LCD_Byte(0x32, LCD_CMD);
 b7e:	60 e0       	ldi	r22, 0x00	; 0
 b80:	82 e3       	ldi	r24, 0x32	; 50
 b82:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	 
	// Entry mode, move cursor left to right 
	LCD_Byte(0x06, LCD_CMD); 
 b86:	60 e0       	ldi	r22, 0x00	; 0
 b88:	86 e0       	ldi	r24, 0x06	; 6
 b8a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	
	// Display on, Cursor off, Blink off
	LCD_Byte(0x0C, LCD_CMD); 
 b8e:	60 e0       	ldi	r22, 0x00	; 0
 b90:	8c e0       	ldi	r24, 0x0C	; 12
 b92:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	
	// Set to 4-bit operation, 2 lines and 5x7 dots
	LCD_Byte(0x28, LCD_CMD); 
 b96:	60 e0       	ldi	r22, 0x00	; 0
 b98:	88 e2       	ldi	r24, 0x28	; 40
 b9a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	
	// Clears display and DDRAM
	LCD_Byte(0x01, LCD_CMD); 
 b9e:	60 e0       	ldi	r22, 0x00	; 0
 ba0:	81 e0       	ldi	r24, 0x01	; 1
 ba2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
 ba6:	81 ee       	ldi	r24, 0xE1	; 225
 ba8:	94 e0       	ldi	r25, 0x04	; 4
 baa:	01 97       	sbiw	r24, 0x01	; 1
 bac:	f1 f7       	brne	.-4      	; 0xbaa <LCD_Init+0x34>
 bae:	00 c0       	rjmp	.+0      	; 0xbb0 <LCD_Init+0x3a>
 bb0:	00 00       	nop
 bb2:	08 95       	ret

00000bb4 <LCD_String>:
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
	
}

void LCD_String(uint8_t *text){
 bb4:	cf 93       	push	r28
 bb6:	df 93       	push	r29
 bb8:	ec 01       	movw	r28, r24
	
	while(*text){
 bba:	88 81       	ld	r24, Y
 bbc:	88 23       	and	r24, r24
 bbe:	39 f0       	breq	.+14     	; 0xbce <LCD_String+0x1a>
 bc0:	21 96       	adiw	r28, 0x01	; 1
		LCD_Byte(*text++, LCD_CHR);
 bc2:	61 e0       	ldi	r22, 0x01	; 1
 bc4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_Byte>
	
}

void LCD_String(uint8_t *text){
	
	while(*text){
 bc8:	89 91       	ld	r24, Y+
 bca:	81 11       	cpse	r24, r1
 bcc:	fa cf       	rjmp	.-12     	; 0xbc2 <LCD_String+0xe>
		LCD_Byte(*text++, LCD_CHR);
	}
}
 bce:	df 91       	pop	r29
 bd0:	cf 91       	pop	r28
 bd2:	08 95       	ret

00000bd4 <TWI_Master_Init>:


void TWI_Master_Init (void){
	
	//Sets the power reduction register for TWI to 0.
	PRR &= ~(1<<PRTWI);
 bd4:	e4 e6       	ldi	r30, 0x64	; 100
 bd6:	f0 e0       	ldi	r31, 0x00	; 0
 bd8:	80 81       	ld	r24, Z
 bda:	8f 77       	andi	r24, 0x7F	; 127
 bdc:	80 83       	st	Z, r24
	
	//Sets the prescaler to 1 by setting TWPS1 and 0 to 0
	TWSR &= ~(1<<TWPS1) & ~(1<<TWPS0); 
 bde:	e9 eb       	ldi	r30, 0xB9	; 185
 be0:	f0 e0       	ldi	r31, 0x00	; 0
 be2:	80 81       	ld	r24, Z
 be4:	8c 7f       	andi	r24, 0xFC	; 252
 be6:	80 83       	st	Z, r24
	
	//Sets the speed of TWI to 100khz
	TWBR = 0x20;
 be8:	80 e2       	ldi	r24, 0x20	; 32
 bea:	80 93 b8 00 	sts	0x00B8, r24
		TWWC - Write Collision Flag
		TWEN - Enable Bit
		TWIE - Interrupt Enable

	************************************************************************/
	TWDR = 0xFF;
 bee:	8f ef       	ldi	r24, 0xFF	; 255
 bf0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (0<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWWC) | (1<<TWIE) | (1<<TWEN);
 bf4:	85 e0       	ldi	r24, 0x05	; 5
 bf6:	80 93 bc 00 	sts	0x00BC, r24
 bfa:	08 95       	ret

00000bfc <TWI_Busy>:

}

int TWI_Busy(void){
	//Returns 0 if the MCU is busy
	return TWCR & (1<<TWINT);
 bfc:	80 91 bc 00 	lds	r24, 0x00BC
 c00:	80 78       	andi	r24, 0x80	; 128
}
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	08 95       	ret

00000c06 <__divmodhi4>:
 c06:	97 fb       	bst	r25, 7
 c08:	07 2e       	mov	r0, r23
 c0a:	16 f4       	brtc	.+4      	; 0xc10 <__divmodhi4+0xa>
 c0c:	00 94       	com	r0
 c0e:	07 d0       	rcall	.+14     	; 0xc1e <__divmodhi4_neg1>
 c10:	77 fd       	sbrc	r23, 7
 c12:	09 d0       	rcall	.+18     	; 0xc26 <__divmodhi4_neg2>
 c14:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__udivmodhi4>
 c18:	07 fc       	sbrc	r0, 7
 c1a:	05 d0       	rcall	.+10     	; 0xc26 <__divmodhi4_neg2>
 c1c:	3e f4       	brtc	.+14     	; 0xc2c <__divmodhi4_exit>

00000c1e <__divmodhi4_neg1>:
 c1e:	90 95       	com	r25
 c20:	81 95       	neg	r24
 c22:	9f 4f       	sbci	r25, 0xFF	; 255
 c24:	08 95       	ret

00000c26 <__divmodhi4_neg2>:
 c26:	70 95       	com	r23
 c28:	61 95       	neg	r22
 c2a:	7f 4f       	sbci	r23, 0xFF	; 255

00000c2c <__divmodhi4_exit>:
 c2c:	08 95       	ret

00000c2e <__udivmodsi4>:
 c2e:	a1 e2       	ldi	r26, 0x21	; 33
 c30:	1a 2e       	mov	r1, r26
 c32:	aa 1b       	sub	r26, r26
 c34:	bb 1b       	sub	r27, r27
 c36:	fd 01       	movw	r30, r26
 c38:	0d c0       	rjmp	.+26     	; 0xc54 <__udivmodsi4_ep>

00000c3a <__udivmodsi4_loop>:
 c3a:	aa 1f       	adc	r26, r26
 c3c:	bb 1f       	adc	r27, r27
 c3e:	ee 1f       	adc	r30, r30
 c40:	ff 1f       	adc	r31, r31
 c42:	a2 17       	cp	r26, r18
 c44:	b3 07       	cpc	r27, r19
 c46:	e4 07       	cpc	r30, r20
 c48:	f5 07       	cpc	r31, r21
 c4a:	20 f0       	brcs	.+8      	; 0xc54 <__udivmodsi4_ep>
 c4c:	a2 1b       	sub	r26, r18
 c4e:	b3 0b       	sbc	r27, r19
 c50:	e4 0b       	sbc	r30, r20
 c52:	f5 0b       	sbc	r31, r21

00000c54 <__udivmodsi4_ep>:
 c54:	66 1f       	adc	r22, r22
 c56:	77 1f       	adc	r23, r23
 c58:	88 1f       	adc	r24, r24
 c5a:	99 1f       	adc	r25, r25
 c5c:	1a 94       	dec	r1
 c5e:	69 f7       	brne	.-38     	; 0xc3a <__udivmodsi4_loop>
 c60:	60 95       	com	r22
 c62:	70 95       	com	r23
 c64:	80 95       	com	r24
 c66:	90 95       	com	r25
 c68:	9b 01       	movw	r18, r22
 c6a:	ac 01       	movw	r20, r24
 c6c:	bd 01       	movw	r22, r26
 c6e:	cf 01       	movw	r24, r30
 c70:	08 95       	ret

00000c72 <__divmodsi4>:
 c72:	05 2e       	mov	r0, r21
 c74:	97 fb       	bst	r25, 7
 c76:	1e f4       	brtc	.+6      	; 0xc7e <__divmodsi4+0xc>
 c78:	00 94       	com	r0
 c7a:	0e 94 50 06 	call	0xca0	; 0xca0 <__negsi2>
 c7e:	57 fd       	sbrc	r21, 7
 c80:	07 d0       	rcall	.+14     	; 0xc90 <__divmodsi4_neg2>
 c82:	0e 94 17 06 	call	0xc2e	; 0xc2e <__udivmodsi4>
 c86:	07 fc       	sbrc	r0, 7
 c88:	03 d0       	rcall	.+6      	; 0xc90 <__divmodsi4_neg2>
 c8a:	4e f4       	brtc	.+18     	; 0xc9e <__divmodsi4_exit>
 c8c:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__negsi2>

00000c90 <__divmodsi4_neg2>:
 c90:	50 95       	com	r21
 c92:	40 95       	com	r20
 c94:	30 95       	com	r19
 c96:	21 95       	neg	r18
 c98:	3f 4f       	sbci	r19, 0xFF	; 255
 c9a:	4f 4f       	sbci	r20, 0xFF	; 255
 c9c:	5f 4f       	sbci	r21, 0xFF	; 255

00000c9e <__divmodsi4_exit>:
 c9e:	08 95       	ret

00000ca0 <__negsi2>:
 ca0:	90 95       	com	r25
 ca2:	80 95       	com	r24
 ca4:	70 95       	com	r23
 ca6:	61 95       	neg	r22
 ca8:	7f 4f       	sbci	r23, 0xFF	; 255
 caa:	8f 4f       	sbci	r24, 0xFF	; 255
 cac:	9f 4f       	sbci	r25, 0xFF	; 255
 cae:	08 95       	ret

00000cb0 <__udivmodhi4>:
 cb0:	aa 1b       	sub	r26, r26
 cb2:	bb 1b       	sub	r27, r27
 cb4:	51 e1       	ldi	r21, 0x11	; 17
 cb6:	07 c0       	rjmp	.+14     	; 0xcc6 <__udivmodhi4_ep>

00000cb8 <__udivmodhi4_loop>:
 cb8:	aa 1f       	adc	r26, r26
 cba:	bb 1f       	adc	r27, r27
 cbc:	a6 17       	cp	r26, r22
 cbe:	b7 07       	cpc	r27, r23
 cc0:	10 f0       	brcs	.+4      	; 0xcc6 <__udivmodhi4_ep>
 cc2:	a6 1b       	sub	r26, r22
 cc4:	b7 0b       	sbc	r27, r23

00000cc6 <__udivmodhi4_ep>:
 cc6:	88 1f       	adc	r24, r24
 cc8:	99 1f       	adc	r25, r25
 cca:	5a 95       	dec	r21
 ccc:	a9 f7       	brne	.-22     	; 0xcb8 <__udivmodhi4_loop>
 cce:	80 95       	com	r24
 cd0:	90 95       	com	r25
 cd2:	bc 01       	movw	r22, r24
 cd4:	cd 01       	movw	r24, r26
 cd6:	08 95       	ret

00000cd8 <_exit>:
 cd8:	f8 94       	cli

00000cda <__stop_program>:
 cda:	ff cf       	rjmp	.-2      	; 0xcda <__stop_program>
