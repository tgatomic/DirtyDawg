
Dirty_Dawg_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000003f0  00000484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  00000490  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a19  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000040b  00000000  00000000  00000ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000492  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032f  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000218  00000000  00000000  00001d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00001f83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:


uint16_t Read_ADC(void){
	
	//Starts conversion
	ADCSRA = (1<<ADSC);
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
	//While the flag is set, wait
	while (ADCSRA & (1<<ADSC));
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
	//while(ADCSRA & (1<<ADIF));
	
	uint16_t analogval = 0;
	
	//Saves the first two bits in variable
	analogval = ADCH;
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
	//Shifts the value with 8
	analogval = (analogval<<8);
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
	//Saves the rest in the first 8 bits
	analogval += ADCL;
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
	

	return analogval;
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <main>
  9e:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <System_Init>:



void System_Init(void){
	
	status = 0;
  a6:	10 92 0d 01 	sts	0x010D, r1
  aa:	10 92 0c 01 	sts	0x010C, r1
	
	/*Setting ports - page 75*/
		
	DDRB = (1<<BRAKELIGHT) | (1<<HEADLIGHT) | (1<<RIGHT) | (1<<PORTB0); //PB0 is debug greenlight
  ae:	8f e0       	ldi	r24, 0x0F	; 15
  b0:	84 b9       	out	0x04, r24	; 4
	DDRD = (1<<FORWARD) | (1<<BACKWARD) | (1<<LEFT) | (1<<PORTD7); //PD7 is debug yellow
  b2:	88 ee       	ldi	r24, 0xE8	; 232
  b4:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f e3       	ldi	r18, 0x3F	; 63
  b8:	8d e0       	ldi	r24, 0x0D	; 13
  ba:	93 e0       	ldi	r25, 0x03	; 3
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <System_Init+0x16>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <System_Init+0x20>
  c6:	00 00       	nop
	
	//Turn on the front and backlights
	_delay_ms(1000);
	PORTB = (1<<BRAKELIGHT) | (1<<HEADLIGHT);
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	85 b9       	out	0x05, r24	; 5
  cc:	2f e3       	ldi	r18, 0x3F	; 63
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <System_Init+0x2c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <System_Init+0x36>
  dc:	00 00       	nop
	_delay_ms(1000);
	PORTB = (0<<BRAKELIGHT) | (0<<HEADLIGHT);
  de:	15 b8       	out	0x05, r1	; 5
	
	
	//Signs the status
	status = MCU_STARTED;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	90 93 0d 01 	sts	0x010D, r25
  e8:	80 93 0c 01 	sts	0x010C, r24
  ec:	08 95       	ret

000000ee <UART_Init>:
}

void UART_Init(unsigned int baud){
	
	//Set double speed
	UCSR0A = (1<<U2X0);
  ee:	22 e0       	ldi	r18, 0x02	; 2
  f0:	20 93 c0 00 	sts	0x00C0, r18
	
	//Set baudrate
	unsigned int baudrate;
	baudrate = 8000000/8/baud-1;
  f4:	9c 01       	movw	r18, r24
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	60 e4       	ldi	r22, 0x40	; 64
  fc:	72 e4       	ldi	r23, 0x42	; 66
  fe:	8f e0       	ldi	r24, 0x0F	; 15
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__divmodsi4>
 106:	21 50       	subi	r18, 0x01	; 1
 108:	31 09       	sbc	r19, r1
	//Double speed use frequency/8/baud
	
	//Set the baudrate in the registry
	UBRR0H = (unsigned char) (baudrate>>8);
 10a:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) (baudrate);
 10e:	20 93 c4 00 	sts	0x00C4, r18

	
	//Enables Receive and Transmit over UART
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 112:	88 e1       	ldi	r24, 0x18	; 24
 114:	80 93 c1 00 	sts	0x00C1, r24
	
	//Sets to 1 stop bit and 8 databits
	UCSR0C = (0<<USBS0) | (3<<UCSZ00);
 118:	e2 ec       	ldi	r30, 0xC2	; 194
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	86 e0       	ldi	r24, 0x06	; 6
 11e:	80 83       	st	Z, r24
	
	//Disables Parity
	UCSR0C |= (0<<UPM01) | (0<<UPM00);
 120:	80 81       	ld	r24, Z
 122:	80 83       	st	Z, r24
	
	
	status |= UART_STARTED;
 124:	80 91 0c 01 	lds	r24, 0x010C
 128:	90 91 0d 01 	lds	r25, 0x010D
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	90 93 0d 01 	sts	0x010D, r25
 132:	80 93 0c 01 	sts	0x010C, r24
 136:	08 95       	ret

00000138 <BT_Recieve>:
}

uint8_t BT_Recieve(void){
	
	//Wait for data to be received (wait for flag to be set)
	while(!(UCSR0A & (1<<RXC0)));
 138:	e0 ec       	ldi	r30, 0xC0	; 192
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	ec f7       	brge	.-6      	; 0x13c <BT_Recieve+0x4>
	
	//Returns the data from buffer
	return UDR0;
 142:	80 91 c6 00 	lds	r24, 0x00C6
}
 146:	08 95       	ret

00000148 <BT_Send>:
void BT_Send(unsigned char data){
	
	//PORTB = ~(1<<PORTB1);
	//_delay_ms(1000);
	//Waits for the transmit buffer to be empty (wait for flag)
	while(!(UCSR0A & (1<<UDRE0)));
 148:	e0 ec       	ldi	r30, 0xC0	; 192
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	90 81       	ld	r25, Z
 14e:	95 ff       	sbrs	r25, 5
 150:	fd cf       	rjmp	.-6      	; 0x14c <BT_Send+0x4>
	
	//Put data in buffer and sends it
	UDR0 = data;
 152:	80 93 c6 00 	sts	0x00C6, r24
 156:	08 95       	ret

00000158 <Uart_Flush>:
	//_delay_ms(1000);
}

void Uart_Flush(void){
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0)) dummy = UDR0;	
 158:	80 91 c0 00 	lds	r24, 0x00C0
 15c:	88 23       	and	r24, r24
 15e:	44 f4       	brge	.+16     	; 0x170 <Uart_Flush+0x18>
 160:	a6 ec       	ldi	r26, 0xC6	; 198
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	e0 ec       	ldi	r30, 0xC0	; 192
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	8c 91       	ld	r24, X
 16a:	80 81       	ld	r24, Z
 16c:	88 23       	and	r24, r24
 16e:	e4 f3       	brlt	.-8      	; 0x168 <Uart_Flush+0x10>
 170:	08 95       	ret

00000172 <Error>:
void Sense_Light(void){
	
	
}

void Error(unsigned int errorcode){
 172:	d8 2f       	mov	r29, r24
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
 174:	c1 2c       	mov	r12, r1
 176:	d1 2c       	mov	r13, r1
 178:	76 01       	movw	r14, r12
	for(;;){
		if(ticks%100000 == 0){
 17a:	0f 2e       	mov	r0, r31
 17c:	f0 ea       	ldi	r31, 0xA0	; 160
 17e:	8f 2e       	mov	r8, r31
 180:	f6 e8       	ldi	r31, 0x86	; 134
 182:	9f 2e       	mov	r9, r31
 184:	aa 24       	eor	r10, r10
 186:	a3 94       	inc	r10
 188:	b1 2c       	mov	r11, r1
 18a:	f0 2d       	mov	r31, r0
			PINB = (1<<BRAKELIGHT);
			BT_Send(errorcode);
		}
		if(ticks%100000 == 50000){
			PINB = ~(1<<BRAKELIGHT);
 18c:	1d ef       	ldi	r17, 0xFD	; 253
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
	for(;;){
		if(ticks%100000 == 0){
			PINB = (1<<BRAKELIGHT);
 18e:	c2 e0       	ldi	r28, 0x02	; 2
void Error(unsigned int errorcode){
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
	for(;;){
		if(ticks%100000 == 0){
 190:	c7 01       	movw	r24, r14
 192:	b6 01       	movw	r22, r12
 194:	a5 01       	movw	r20, r10
 196:	94 01       	movw	r18, r8
 198:	0e 94 b5 01 	call	0x36a	; 0x36a <__udivmodsi4>
 19c:	61 15       	cp	r22, r1
 19e:	71 05       	cpc	r23, r1
 1a0:	81 05       	cpc	r24, r1
 1a2:	91 05       	cpc	r25, r1
 1a4:	29 f4       	brne	.+10     	; 0x1b0 <Error+0x3e>
			PINB = (1<<BRAKELIGHT);
 1a6:	c3 b9       	out	0x03, r28	; 3
			BT_Send(errorcode);
 1a8:	8d 2f       	mov	r24, r29
 1aa:	0e 94 a4 00 	call	0x148	; 0x148 <BT_Send>
 1ae:	06 c0       	rjmp	.+12     	; 0x1bc <Error+0x4a>
		}
		if(ticks%100000 == 50000){
 1b0:	60 35       	cpi	r22, 0x50	; 80
 1b2:	73 4c       	sbci	r23, 0xC3	; 195
 1b4:	81 05       	cpc	r24, r1
 1b6:	91 05       	cpc	r25, r1
 1b8:	09 f4       	brne	.+2      	; 0x1bc <Error+0x4a>
			PINB = ~(1<<BRAKELIGHT);
 1ba:	13 b9       	out	0x03, r17	; 3
		}
		ticks++;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	c8 1a       	sub	r12, r24
 1c0:	d8 0a       	sbc	r13, r24
 1c2:	e8 0a       	sbc	r14, r24
 1c4:	f8 0a       	sbc	r15, r24
	}
 1c6:	e4 cf       	rjmp	.-56     	; 0x190 <Error+0x1e>

000001c8 <BT_Init>:
void Uart_Flush(void){
	unsigned char dummy;
	while (UCSR0A & (1<<RXC0)) dummy = UDR0;	
}

int BT_Init(void){
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
 1d8:	2c 97       	sbiw	r28, 0x0c	; 12
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	89 e6       	ldi	r24, 0x69	; 105
 1e8:	98 e1       	ldi	r25, 0x18	; 24
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <BT_Init+0x22>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <BT_Init+0x2c>
 1f4:	00 00       	nop
	
	//Wait for 1 second to ensure the device has power
	_delay_ms(8000);

	//Sends command to enter command mode
	for(int i = 0; i<3; i++) BT_Send('$');
 1f6:	84 e2       	ldi	r24, 0x24	; 36
 1f8:	0e 94 a4 00 	call	0x148	; 0x148 <BT_Send>
 1fc:	84 e2       	ldi	r24, 0x24	; 36
 1fe:	0e 94 a4 00 	call	0x148	; 0x148 <BT_Send>
 202:	84 e2       	ldi	r24, 0x24	; 36
 204:	0e 94 a4 00 	call	0x148	; 0x148 <BT_Send>

	//If it fails to go into command mode
	if(BT_Recieve() == 'E'){
 208:	0e 94 9c 00 	call	0x138	; 0x138 <BT_Recieve>
 20c:	85 34       	cpi	r24, 0x45	; 69
 20e:	21 f4       	brne	.+8      	; 0x218 <BT_Init+0x50>
		Error(0x01);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 b9 00 	call	0x172	; 0x172 <Error>
 218:	ef ef       	ldi	r30, 0xFF	; 255
 21a:	f9 e6       	ldi	r31, 0x69	; 105
 21c:	28 e1       	ldi	r18, 0x18	; 24
 21e:	e1 50       	subi	r30, 0x01	; 1
 220:	f0 40       	sbci	r31, 0x00	; 0
 222:	20 40       	sbci	r18, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <BT_Init+0x56>
 226:	00 c0       	rjmp	.+0      	; 0x228 <BT_Init+0x60>
 228:	00 00       	nop
	}
	//Wait for 1 second to ensure the device has power
	_delay_ms(8000);
	
	Uart_Flush();
 22a:	0e 94 ac 00 	call	0x158	; 0x158 <Uart_Flush>
	
	unsigned char adress[12] = {'0','0','0','6','6','6','7','6','A','1','3','F'};
 22e:	8c e0       	ldi	r24, 0x0C	; 12
 230:	e0 e0       	ldi	r30, 0x00	; 0
 232:	f1 e0       	ldi	r31, 0x01	; 1
 234:	de 01       	movw	r26, r28
 236:	11 96       	adiw	r26, 0x01	; 1
 238:	01 90       	ld	r0, Z+
 23a:	0d 92       	st	X+, r0
 23c:	8a 95       	dec	r24
 23e:	e1 f7       	brne	.-8      	; 0x238 <BT_Init+0x70>
	
	BT_Send('c');
 240:	83 e6       	ldi	r24, 0x63	; 99
 242:	0e 94 a4 00 	call	0x148	; 0x148 <BT_Send>
	BT_Send(',');
 246:	8c e2       	ldi	r24, 0x2C	; 44
 248:	0e 94 a4 00 	call	0x148	; 0x148 <BT_Send>
 24c:	8e 01       	movw	r16, r28
 24e:	0f 5f       	subi	r16, 0xFF	; 255
 250:	1f 4f       	sbci	r17, 0xFF	; 255
 252:	7e 01       	movw	r14, r28
 254:	8d e0       	ldi	r24, 0x0D	; 13
 256:	e8 0e       	add	r14, r24
 258:	f1 1c       	adc	r15, r1
	for(int i = 0; i < 12;i++){
		BT_Send(adress[i]);
 25a:	f8 01       	movw	r30, r16
 25c:	81 91       	ld	r24, Z+
 25e:	8f 01       	movw	r16, r30
 260:	0e 94 a4 00 	call	0x148	; 0x148 <BT_Send>
	
	unsigned char adress[12] = {'0','0','0','6','6','6','7','6','A','1','3','F'};
	
	BT_Send('c');
	BT_Send(',');
	for(int i = 0; i < 12;i++){
 264:	0e 15       	cp	r16, r14
 266:	1f 05       	cpc	r17, r15
 268:	c1 f7       	brne	.-16     	; 0x25a <BT_Init+0x92>
		BT_Send(adress[i]);
	}
	BT_Send(0x0A); //NL
 26a:	8a e0       	ldi	r24, 0x0A	; 10
 26c:	0e 94 a4 00 	call	0x148	; 0x148 <BT_Send>
	BT_Send(0x0D); //CR
 270:	8d e0       	ldi	r24, 0x0D	; 13
 272:	0e 94 a4 00 	call	0x148	; 0x148 <BT_Send>
 276:	ff ef       	ldi	r31, 0xFF	; 255
 278:	29 e6       	ldi	r18, 0x69	; 105
 27a:	88 e1       	ldi	r24, 0x18	; 24
 27c:	f1 50       	subi	r31, 0x01	; 1
 27e:	20 40       	sbci	r18, 0x00	; 0
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <BT_Init+0xb4>
 284:	00 c0       	rjmp	.+0      	; 0x286 <BT_Init+0xbe>
 286:	00 00       	nop
	//Wait two seconds
	//_delay_ms(8000);
	_delay_ms(8000);
	
	for(int i = 0; i<6;i++){
		BT_Recieve();
 288:	0e 94 9c 00 	call	0x138	; 0x138 <BT_Recieve>
 28c:	0e 94 9c 00 	call	0x138	; 0x138 <BT_Recieve>
 290:	0e 94 9c 00 	call	0x138	; 0x138 <BT_Recieve>
 294:	0e 94 9c 00 	call	0x138	; 0x138 <BT_Recieve>
 298:	0e 94 9c 00 	call	0x138	; 0x138 <BT_Recieve>
 29c:	0e 94 9c 00 	call	0x138	; 0x138 <BT_Recieve>
	}
	
	
	if(BT_Recieve() == '%'){
 2a0:	0e 94 9c 00 	call	0x138	; 0x138 <BT_Recieve>
 2a4:	85 32       	cpi	r24, 0x25	; 37
 2a6:	39 f4       	brne	.+14     	; 0x2b6 <BT_Init+0xee>
		PORTB = (1<<PORTB1);
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	85 b9       	out	0x05, r24	; 5
		Uart_Flush();
 2ac:	0e 94 ac 00 	call	0x158	; 0x158 <Uart_Flush>
		return 1;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <BT_Init+0xf2>
		}
		else if(BT_Recieve()=='E'){
			Error('E');
		}*/
	}
	return 0;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
}
 2ba:	2c 96       	adiw	r28, 0x0c	; 12
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	de bf       	out	0x3e, r29	; 62
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	ff 90       	pop	r15
 2d0:	ef 90       	pop	r14
 2d2:	08 95       	ret

000002d4 <main>:
dataptn DirtyDawg;

int main(void)
{

	PORTB = (1<<PORTB1);
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	85 b9       	out	0x05, r24	; 5
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	89 e6       	ldi	r24, 0x69	; 105
 2dc:	98 e1       	ldi	r25, 0x18	; 24
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	90 40       	sbci	r25, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <main+0xa>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <main+0x14>
 2e8:	00 00       	nop

	
	_delay_ms(1000);
	
	System_Init(); //Checked - OK!
 2ea:	0e 94 53 00 	call	0xa6	; 0xa6 <System_Init>
	//Baudrate max is 19200 (double speed enabled)
	UART_Init(19200); //Checked - OK!
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	9b e4       	ldi	r25, 0x4B	; 75
 2f2:	0e 94 77 00 	call	0xee	; 0xee <UART_Init>
	
	//Connects to BT device
	while(BT_Init()==0);
 2f6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <BT_Init>
 2fa:	89 2b       	or	r24, r25
 2fc:	e1 f3       	breq	.-8      	; 0x2f6 <main+0x22>
	
	
	
	PORTB = (1<<PORTB0);
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	85 b9       	out	0x05, r24	; 5
 302:	2f ef       	ldi	r18, 0xFF	; 255
 304:	8f e4       	ldi	r24, 0x4F	; 79
 306:	93 ec       	ldi	r25, 0xC3	; 195
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	80 40       	sbci	r24, 0x00	; 0
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <main+0x34>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x3e>
 312:	00 00       	nop
 314:	2f ef       	ldi	r18, 0xFF	; 255
 316:	8f e4       	ldi	r24, 0x4F	; 79
 318:	93 ec       	ldi	r25, 0xC3	; 195
 31a:	21 50       	subi	r18, 0x01	; 1
 31c:	80 40       	sbci	r24, 0x00	; 0
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <main+0x46>
 322:	00 c0       	rjmp	.+0      	; 0x324 <main+0x50>
 324:	00 00       	nop
 326:	2f ef       	ldi	r18, 0xFF	; 255
 328:	8f e4       	ldi	r24, 0x4F	; 79
 32a:	93 ec       	ldi	r25, 0xC3	; 195
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <main+0x58>
 334:	00 c0       	rjmp	.+0      	; 0x336 <main+0x62>
 336:	00 00       	nop
	_delay_ms(8000);
	_delay_ms(8000);
	_delay_ms(8000);
	
	
	for(int i = 0; i<3; i++) BT_Send('$');
 338:	84 e2       	ldi	r24, 0x24	; 36
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 a4 00 	call	0x148	; 0x148 <BT_Send>
 340:	84 e2       	ldi	r24, 0x24	; 36
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 a4 00 	call	0x148	; 0x148 <BT_Send>
 348:	84 e2       	ldi	r24, 0x24	; 36
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 a4 00 	call	0x148	; 0x148 <BT_Send>
	BT_Send('k');
 350:	8b e6       	ldi	r24, 0x6B	; 107
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 a4 00 	call	0x148	; 0x148 <BT_Send>
	BT_Send(',');
 358:	8c e2       	ldi	r24, 0x2C	; 44
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 a4 00 	call	0x148	; 0x148 <BT_Send>
	BT_Send('1');
 360:	81 e3       	ldi	r24, 0x31	; 49
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 a4 00 	call	0x148	; 0x148 <BT_Send>


	while(1);
 368:	ff cf       	rjmp	.-2      	; 0x368 <main+0x94>

0000036a <__udivmodsi4>:
 36a:	a1 e2       	ldi	r26, 0x21	; 33
 36c:	1a 2e       	mov	r1, r26
 36e:	aa 1b       	sub	r26, r26
 370:	bb 1b       	sub	r27, r27
 372:	fd 01       	movw	r30, r26
 374:	0d c0       	rjmp	.+26     	; 0x390 <__udivmodsi4_ep>

00000376 <__udivmodsi4_loop>:
 376:	aa 1f       	adc	r26, r26
 378:	bb 1f       	adc	r27, r27
 37a:	ee 1f       	adc	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	a2 17       	cp	r26, r18
 380:	b3 07       	cpc	r27, r19
 382:	e4 07       	cpc	r30, r20
 384:	f5 07       	cpc	r31, r21
 386:	20 f0       	brcs	.+8      	; 0x390 <__udivmodsi4_ep>
 388:	a2 1b       	sub	r26, r18
 38a:	b3 0b       	sbc	r27, r19
 38c:	e4 0b       	sbc	r30, r20
 38e:	f5 0b       	sbc	r31, r21

00000390 <__udivmodsi4_ep>:
 390:	66 1f       	adc	r22, r22
 392:	77 1f       	adc	r23, r23
 394:	88 1f       	adc	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	1a 94       	dec	r1
 39a:	69 f7       	brne	.-38     	; 0x376 <__udivmodsi4_loop>
 39c:	60 95       	com	r22
 39e:	70 95       	com	r23
 3a0:	80 95       	com	r24
 3a2:	90 95       	com	r25
 3a4:	9b 01       	movw	r18, r22
 3a6:	ac 01       	movw	r20, r24
 3a8:	bd 01       	movw	r22, r26
 3aa:	cf 01       	movw	r24, r30
 3ac:	08 95       	ret

000003ae <__divmodsi4>:
 3ae:	05 2e       	mov	r0, r21
 3b0:	97 fb       	bst	r25, 7
 3b2:	1e f4       	brtc	.+6      	; 0x3ba <__divmodsi4+0xc>
 3b4:	00 94       	com	r0
 3b6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__negsi2>
 3ba:	57 fd       	sbrc	r21, 7
 3bc:	07 d0       	rcall	.+14     	; 0x3cc <__divmodsi4_neg2>
 3be:	0e 94 b5 01 	call	0x36a	; 0x36a <__udivmodsi4>
 3c2:	07 fc       	sbrc	r0, 7
 3c4:	03 d0       	rcall	.+6      	; 0x3cc <__divmodsi4_neg2>
 3c6:	4e f4       	brtc	.+18     	; 0x3da <__divmodsi4_exit>
 3c8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__negsi2>

000003cc <__divmodsi4_neg2>:
 3cc:	50 95       	com	r21
 3ce:	40 95       	com	r20
 3d0:	30 95       	com	r19
 3d2:	21 95       	neg	r18
 3d4:	3f 4f       	sbci	r19, 0xFF	; 255
 3d6:	4f 4f       	sbci	r20, 0xFF	; 255
 3d8:	5f 4f       	sbci	r21, 0xFF	; 255

000003da <__divmodsi4_exit>:
 3da:	08 95       	ret

000003dc <__negsi2>:
 3dc:	90 95       	com	r25
 3de:	80 95       	com	r24
 3e0:	70 95       	com	r23
 3e2:	61 95       	neg	r22
 3e4:	7f 4f       	sbci	r23, 0xFF	; 255
 3e6:	8f 4f       	sbci	r24, 0xFF	; 255
 3e8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ea:	08 95       	ret

000003ec <_exit>:
 3ec:	f8 94       	cli

000003ee <__stop_program>:
 3ee:	ff cf       	rjmp	.-2      	; 0x3ee <__stop_program>
