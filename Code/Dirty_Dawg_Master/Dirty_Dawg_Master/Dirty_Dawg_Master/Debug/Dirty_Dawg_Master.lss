
Dirty_Dawg_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c0c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000c80  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dc6  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073a  00000000  00000000  00002c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf1  00000000  00000000  00003374  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00003f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041c  00000000  00000000  0000423c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000397  00000000  00000000  00004658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000049ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:


uint16_t Read_ADC(void){
	
	//Starts conversion
	ADCSRA = (1<<ADSC);
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
	//While the flag is set, wait
	while (ADCSRA & (1<<ADSC));
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
	//while(ADCSRA & (1<<ADIF));
	
	uint16_t analogval = 0;
	
	//Saves the first two bits in variable
	analogval = ADCH;
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
	//Shifts the value with 8
	analogval = (analogval<<8);
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
	//Saves the rest in the first 8 bits
	analogval += ADCL;
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
	

	return analogval;
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 55 05 	call	0xaaa	; 0xaaa <main>
  9e:	0c 94 04 06 	jmp	0xc08	; 0xc08 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <System_Init>:
	BT_Send('c');
	BT_Send(',');
	for(int i = 0; i < 12;i++){
		BT_Send(adress[i]);
	}
	BT_Send(0x0A); //NL
  a6:	10 92 01 01 	sts	0x0101, r1
	BT_Send(0x0D); //CR
  aa:	10 92 00 01 	sts	0x0100, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	8f e0       	ldi	r24, 0x0F	; 15
  b0:	84 b9       	out	0x04, r24	; 4
  b2:	88 ee       	ldi	r24, 0xE8	; 232
  b4:	8a b9       	out	0x0a, r24	; 10
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	89 e6       	ldi	r24, 0x69	; 105
  ba:	98 e1       	ldi	r25, 0x18	; 24
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
	//Wait two seconds
	//_delay_ms(8000);
	_delay_ms(8000);
	
	for(int i = 0; i<6;i++){
		BT_Recieve();
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <System_Init+0x16>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <System_Init+0x20>
  c6:	00 00       	nop
  c8:	87 e0       	ldi	r24, 0x07	; 7
  ca:	85 b9       	out	0x05, r24	; 5
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	89 e6       	ldi	r24, 0x69	; 105
  d0:	98 e1       	ldi	r25, 0x18	; 24
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
	}
	
	
	if(BT_Recieve() == '%'){
  d8:	e1 f7       	brne	.-8      	; 0xd2 <System_Init+0x2c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <System_Init+0x36>
  dc:	00 00       	nop
  de:	15 b8       	out	0x05, r1	; 5
		PORTB = (1<<PORTB1);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
		Uart_Flush();
  e4:	90 93 01 01 	sts	0x0101, r25
		return 1;
  e8:	80 93 00 01 	sts	0x0100, r24
  ec:	08 95       	ret

000000ee <UART_Init>:
		}
		else if(BT_Recieve()=='E'){
			Error('E');
		}*/
	}
	return 0;
  ee:	22 e0       	ldi	r18, 0x02	; 2
  f0:	20 93 c0 00 	sts	0x00C0, r18
}
  f4:	9c 01       	movw	r18, r24
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	60 e4       	ldi	r22, 0x40	; 64
  fc:	72 e4       	ldi	r23, 0x42	; 66
  fe:	8f e0       	ldi	r24, 0x0F	; 15
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 e5 05 	call	0xbca	; 0xbca <__divmodsi4>
 106:	21 50       	subi	r18, 0x01	; 1
 108:	31 09       	sbc	r19, r1
 10a:	30 93 c5 00 	sts	0x00C5, r19
	baudrate = 8000000/8/baud-1;
	//Double speed use frequency/8/baud
	
	//Set the baudrate in the registry
	UBRR0H = (unsigned char) (baudrate>>8);
	UBRR0L = (unsigned char) (baudrate);
 10e:	20 93 c4 00 	sts	0x00C4, r18

	
	//Enables Receive and Transmit over UART
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); //RXCIE och TXCIE for interrupt based UART.
 112:	88 e1       	ldi	r24, 0x18	; 24
 114:	80 93 c1 00 	sts	0x00C1, r24
	
	//Sets to 1 stop bit and 8 databits
	UCSR0C = (0<<USBS0) | (3<<UCSZ00);
 118:	e2 ec       	ldi	r30, 0xC2	; 194
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	86 e0       	ldi	r24, 0x06	; 6
 11e:	80 83       	st	Z, r24
	
	//Disables Parity
	UCSR0C |= (0<<UPM01) | (0<<UPM00);
 120:	80 81       	ld	r24, Z
 122:	80 83       	st	Z, r24
	
	
	status |= UART_STARTED;
 124:	80 91 00 01 	lds	r24, 0x0100
 128:	90 91 01 01 	lds	r25, 0x0101
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	90 93 01 01 	sts	0x0101, r25
 132:	80 93 00 01 	sts	0x0100, r24
 136:	08 95       	ret

00000138 <BT_Send>:
void BT_Send(unsigned char data){
	
	//PORTB = ~(1<<PORTB1);
	//_delay_ms(1000);
	//Waits for the transmit buffer to be empty (wait for flag)
	while(!(UCSR0A & (1<<UDRE0)));
 138:	e0 ec       	ldi	r30, 0xC0	; 192
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	90 81       	ld	r25, Z
 13e:	95 ff       	sbrs	r25, 5
 140:	fd cf       	rjmp	.-6      	; 0x13c <BT_Send+0x4>
	
	//Put data in buffer and sends it
	UDR0 = data;
 142:	80 93 c6 00 	sts	0x00C6, r24
 146:	08 95       	ret

00000148 <Error>:
void Sense_Light(void){
	
	
}

void Error(unsigned int errorcode){
 148:	d8 2f       	mov	r29, r24
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
 14a:	c1 2c       	mov	r12, r1
 14c:	d1 2c       	mov	r13, r1
 14e:	76 01       	movw	r14, r12
	for(;;){
		if(ticks%10000 == 0){
 150:	0f 2e       	mov	r0, r31
 152:	f0 e1       	ldi	r31, 0x10	; 16
 154:	8f 2e       	mov	r8, r31
 156:	f7 e2       	ldi	r31, 0x27	; 39
 158:	9f 2e       	mov	r9, r31
 15a:	a1 2c       	mov	r10, r1
 15c:	b1 2c       	mov	r11, r1
 15e:	f0 2d       	mov	r31, r0
			PINB = (1<<BRAKELIGHT);
 160:	c2 e0       	ldi	r28, 0x02	; 2
void Error(unsigned int errorcode){
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
	for(;;){
		if(ticks%10000 == 0){
 162:	c7 01       	movw	r24, r14
 164:	b6 01       	movw	r22, r12
 166:	a5 01       	movw	r20, r10
 168:	94 01       	movw	r18, r8
 16a:	0e 94 c3 05 	call	0xb86	; 0xb86 <__udivmodsi4>
 16e:	67 2b       	or	r22, r23
 170:	68 2b       	or	r22, r24
 172:	69 2b       	or	r22, r25
 174:	21 f4       	brne	.+8      	; 0x17e <Error+0x36>
			PINB = (1<<BRAKELIGHT);
 176:	c3 b9       	out	0x03, r28	; 3
			BT_Send(errorcode);
 178:	8d 2f       	mov	r24, r29
 17a:	0e 94 9c 00 	call	0x138	; 0x138 <BT_Send>
		}
		if(ticks%10000 == 50000){
			PINB = (0<<BRAKELIGHT);
		}
		ticks++;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	c8 1a       	sub	r12, r24
 182:	d8 0a       	sbc	r13, r24
 184:	e8 0a       	sbc	r14, r24
 186:	f8 0a       	sbc	r15, r24
	}
 188:	ec cf       	rjmp	.-40     	; 0x162 <Error+0x1a>

0000018a <Y_LED_On>:
	BT_Recieve = UART;
}
*/

void Y_LED_On(void){
	PORTD |= (1<<PORTD7);
 18a:	5f 9a       	sbi	0x0b, 7	; 11
 18c:	08 95       	ret

0000018e <LCD_set_outputpinhigh>:
		uint8_t b = 0;
		
		b |= (1<<LCD_E_PIN);
		
		//Sends the start condition
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 18e:	84 ea       	ldi	r24, 0xA4	; 164
 190:	80 93 bc 00 	sts	0x00BC, r24
			
		while(!TWI_Busy());
 194:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 198:	89 2b       	or	r24, r25
 19a:	e1 f3       	breq	.-8      	; 0x194 <LCD_set_outputpinhigh+0x6>
		if((TWSR & MASK) != START)Error(START);
 19c:	80 91 b9 00 	lds	r24, 0x00B9
 1a0:	88 7f       	andi	r24, 0xF8	; 248
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	21 f0       	breq	.+8      	; 0x1ae <LCD_set_outputpinhigh+0x20>
 1a6:	88 e0       	ldi	r24, 0x08	; 8
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
			
		//Loads the slave address and set the R/W bit to 1
		TWDR = (0x27<<1) | LCD_WRITE;
 1ae:	8e e4       	ldi	r24, 0x4E	; 78
 1b0:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1<<TWINT) | (1<<TWEN); //MAYBE 1<<TWEA also???
 1b4:	84 e8       	ldi	r24, 0x84	; 132
 1b6:	80 93 bc 00 	sts	0x00BC, r24
			
		while(!TWI_Busy());
 1ba:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 1be:	89 2b       	or	r24, r25
 1c0:	e1 f3       	breq	.-8      	; 0x1ba <LCD_set_outputpinhigh+0x2c>
		if((TWSR & MASK) != MT_ADDRESS_ACK)Error(MR_ADDRESS_ACK);
 1c2:	80 91 b9 00 	lds	r24, 0x00B9
 1c6:	88 7f       	andi	r24, 0xF8	; 248
 1c8:	88 31       	cpi	r24, 0x18	; 24
 1ca:	21 f0       	breq	.+8      	; 0x1d4 <LCD_set_outputpinhigh+0x46>
 1cc:	80 e4       	ldi	r24, 0x40	; 64
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
			
		//Sends the data to the slave
		TWDR = b; //8bits
 1d4:	80 e1       	ldi	r24, 0x10	; 16
 1d6:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1<<TWINT) | (1<<TWEN);
 1da:	84 e8       	ldi	r24, 0x84	; 132
 1dc:	80 93 bc 00 	sts	0x00BC, r24
		while(!TWI_Busy());
 1e0:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 1e4:	89 2b       	or	r24, r25
 1e6:	e1 f3       	breq	.-8      	; 0x1e0 <LCD_set_outputpinhigh+0x52>
		if((TWSR & MASK) !=  MT_BYTE_ACK)Error(MT_BYTE_ACK);
 1e8:	80 91 b9 00 	lds	r24, 0x00B9
 1ec:	88 7f       	andi	r24, 0xF8	; 248
 1ee:	88 32       	cpi	r24, 0x28	; 40
 1f0:	21 f0       	breq	.+8      	; 0x1fa <LCD_set_outputpinhigh+0x6c>
 1f2:	88 e2       	ldi	r24, 0x28	; 40
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
			
		//Sends the stop condition
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 1fa:	84 e9       	ldi	r24, 0x94	; 148
 1fc:	80 93 bc 00 	sts	0x00BC, r24
 200:	08 95       	ret

00000202 <LCD_set_outputpinlow>:
		uint8_t b = 0;
			
		b &= (0<<LCD_E_PIN);
			
		//Sends the start condition
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 202:	84 ea       	ldi	r24, 0xA4	; 164
 204:	80 93 bc 00 	sts	0x00BC, r24
			
		while(!TWI_Busy());
 208:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 20c:	89 2b       	or	r24, r25
 20e:	e1 f3       	breq	.-8      	; 0x208 <LCD_set_outputpinlow+0x6>
		if((TWSR & MASK) != START)Error(START);
 210:	80 91 b9 00 	lds	r24, 0x00B9
 214:	88 7f       	andi	r24, 0xF8	; 248
 216:	88 30       	cpi	r24, 0x08	; 8
 218:	21 f0       	breq	.+8      	; 0x222 <LCD_set_outputpinlow+0x20>
 21a:	88 e0       	ldi	r24, 0x08	; 8
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
			
		//Loads the slave address and set the R/W bit to 1
		TWDR = (0x27<<1) | LCD_WRITE;
 222:	8e e4       	ldi	r24, 0x4E	; 78
 224:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1<<TWINT) | (1<<TWEN); //MAYBE 1<<TWEA also???
 228:	84 e8       	ldi	r24, 0x84	; 132
 22a:	80 93 bc 00 	sts	0x00BC, r24
			
		while(!TWI_Busy());
 22e:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 232:	89 2b       	or	r24, r25
 234:	e1 f3       	breq	.-8      	; 0x22e <LCD_set_outputpinlow+0x2c>
		if((TWSR & MASK) != MT_ADDRESS_ACK)Error(MR_ADDRESS_ACK);
 236:	80 91 b9 00 	lds	r24, 0x00B9
 23a:	88 7f       	andi	r24, 0xF8	; 248
 23c:	88 31       	cpi	r24, 0x18	; 24
 23e:	21 f0       	breq	.+8      	; 0x248 <LCD_set_outputpinlow+0x46>
 240:	80 e4       	ldi	r24, 0x40	; 64
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
			
		//Sends the data to the slave
		TWDR = b; //8bits
 248:	10 92 bb 00 	sts	0x00BB, r1
		TWCR = (1<<TWINT) | (1<<TWEN);
 24c:	84 e8       	ldi	r24, 0x84	; 132
 24e:	80 93 bc 00 	sts	0x00BC, r24
		while(!TWI_Busy());
 252:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 256:	89 2b       	or	r24, r25
 258:	e1 f3       	breq	.-8      	; 0x252 <LCD_set_outputpinlow+0x50>
		if((TWSR & MASK) !=  MT_BYTE_ACK)Error(MR_BYTE_NACK);
 25a:	80 91 b9 00 	lds	r24, 0x00B9
 25e:	88 7f       	andi	r24, 0xF8	; 248
 260:	88 32       	cpi	r24, 0x28	; 40
 262:	21 f0       	breq	.+8      	; 0x26c <LCD_set_outputpinlow+0x6a>
 264:	88 e5       	ldi	r24, 0x58	; 88
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
			
		//Sends the stop condition
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 26c:	84 e9       	ldi	r24, 0x94	; 148
 26e:	80 93 bc 00 	sts	0x00BC, r24
 272:	08 95       	ret

00000274 <LCD_toggle>:
	_delay_ms(4000);
}

void LCD_toggle(void){
	
	LCD_set_outputpinhigh();
 274:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_set_outputpinhigh>
 278:	2f ef       	ldi	r18, 0xFF	; 255
 27a:	84 e3       	ldi	r24, 0x34	; 52
 27c:	9c e0       	ldi	r25, 0x0C	; 12
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <LCD_toggle+0xa>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_toggle+0x14>
 288:	00 00       	nop
	_delay_ms(4000);
	LCD_set_outputpinlow();
 28a:	0e 94 01 01 	call	0x202	; 0x202 <LCD_set_outputpinlow>
 28e:	08 95       	ret

00000290 <LCD_Command>:



}

void LCD_Command(uint8_t command){
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	c8 2f       	mov	r28, r24

	
	dataport &= (0<<LCD_RS_PIN);
 296:	10 92 02 01 	sts	0x0102, r1
	dataport &= (0<<LCD_RW_PIN);
	

	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 29a:	84 ea       	ldi	r24, 0xA4	; 164
 29c:	80 93 bc 00 	sts	0x00BC, r24

		
	while(!TWI_Busy());
 2a0:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 2a4:	89 2b       	or	r24, r25
 2a6:	e1 f3       	breq	.-8      	; 0x2a0 <LCD_Command+0x10>
	if((TWSR & MASK) != START)Error(START);
 2a8:	80 91 b9 00 	lds	r24, 0x00B9
 2ac:	88 7f       	andi	r24, 0xF8	; 248
 2ae:	88 30       	cpi	r24, 0x08	; 8
 2b0:	21 f0       	breq	.+8      	; 0x2ba <LCD_Command+0x2a>
 2b2:	88 e0       	ldi	r24, 0x08	; 8
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
		
	//Loads the slave address and set the R/W bit to 1
	TWDR = (0x27<<1) | (LCD_WRITE);
 2ba:	8e e4       	ldi	r24, 0x4E	; 78
 2bc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN); //MAYBE 1<<TWEA also???
 2c0:	84 e8       	ldi	r24, 0x84	; 132
 2c2:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 2c6:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 2ca:	89 2b       	or	r24, r25
 2cc:	e1 f3       	breq	.-8      	; 0x2c6 <LCD_Command+0x36>
	if((TWSR & MASK) != MT_ADDRESS_ACK)Error((TWSR & MASK));
 2ce:	80 91 b9 00 	lds	r24, 0x00B9
 2d2:	88 7f       	andi	r24, 0xF8	; 248
 2d4:	88 31       	cpi	r24, 0x18	; 24
 2d6:	31 f0       	breq	.+12     	; 0x2e4 <LCD_Command+0x54>
 2d8:	80 91 b9 00 	lds	r24, 0x00B9
 2dc:	88 7f       	andi	r24, 0xF8	; 248
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
		
	//Sends the data to the slave
	TWDR = dataport; //8bits
 2e4:	80 91 02 01 	lds	r24, 0x0102
 2e8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 2ec:	84 e8       	ldi	r24, 0x84	; 132
 2ee:	80 93 bc 00 	sts	0x00BC, r24
	while(!TWI_Busy());
 2f2:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 2f6:	89 2b       	or	r24, r25
 2f8:	e1 f3       	breq	.-8      	; 0x2f2 <LCD_Command+0x62>
	if((TWSR & MASK) != MT_BYTE_ACK)Error((TWSR & MASK));
 2fa:	80 91 b9 00 	lds	r24, 0x00B9
 2fe:	88 7f       	andi	r24, 0xF8	; 248
 300:	88 32       	cpi	r24, 0x28	; 40
 302:	31 f0       	breq	.+12     	; 0x310 <LCD_Command+0x80>
 304:	80 91 b9 00 	lds	r24, 0x00B9
 308:	88 7f       	andi	r24, 0xF8	; 248
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
		
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 310:	84 e9       	ldi	r24, 0x94	; 148
 312:	80 93 bc 00 	sts	0x00BC, r24
	
	dataport &= (0<<LCD_DATA3_PIN);
	dataport &= (0<<LCD_DATA2_PIN);
	dataport &= (0<<LCD_DATA1_PIN);
	dataport &= (0<<LCD_DATA0_PIN);
	if(command & 0x80) dataport |= (1<<LCD_DATA3_PIN);
 316:	cc 23       	and	r28, r28
 318:	1c f0       	brlt	.+6      	; 0x320 <LCD_Command+0x90>
		
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);

	
	dataport &= (0<<LCD_DATA3_PIN);
 31a:	10 92 02 01 	sts	0x0102, r1
 31e:	03 c0       	rjmp	.+6      	; 0x326 <LCD_Command+0x96>
	dataport &= (0<<LCD_DATA2_PIN);
	dataport &= (0<<LCD_DATA1_PIN);
	dataport &= (0<<LCD_DATA0_PIN);
	if(command & 0x80) dataport |= (1<<LCD_DATA3_PIN);
 320:	88 e0       	ldi	r24, 0x08	; 8
 322:	80 93 02 01 	sts	0x0102, r24
	if(command & 0x40) dataport |= (1<<LCD_DATA2_PIN);
 326:	c6 ff       	sbrs	r28, 6
 328:	05 c0       	rjmp	.+10     	; 0x334 <LCD_Command+0xa4>
 32a:	80 91 02 01 	lds	r24, 0x0102
 32e:	84 60       	ori	r24, 0x04	; 4
 330:	80 93 02 01 	sts	0x0102, r24
	if(command & 0x20) dataport |= (1<<LCD_DATA1_PIN);
 334:	c5 ff       	sbrs	r28, 5
 336:	05 c0       	rjmp	.+10     	; 0x342 <LCD_Command+0xb2>
 338:	80 91 02 01 	lds	r24, 0x0102
 33c:	82 60       	ori	r24, 0x02	; 2
 33e:	80 93 02 01 	sts	0x0102, r24
	if(command & 0x10) dataport |= (1<<LCD_DATA0_PIN);
 342:	c4 ff       	sbrs	r28, 4
 344:	05 c0       	rjmp	.+10     	; 0x350 <LCD_Command+0xc0>
 346:	80 91 02 01 	lds	r24, 0x0102
 34a:	81 60       	ori	r24, 0x01	; 1
 34c:	80 93 02 01 	sts	0x0102, r24
		

	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 350:	84 ea       	ldi	r24, 0xA4	; 164
 352:	80 93 bc 00 	sts	0x00BC, r24
	
	
	while(!TWI_Busy());
 356:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 35a:	89 2b       	or	r24, r25
 35c:	e1 f3       	breq	.-8      	; 0x356 <LCD_Command+0xc6>
	if((TWSR & MASK) != REPEAT_START)Error((TWSR & MASK));
 35e:	80 91 b9 00 	lds	r24, 0x00B9
 362:	88 7f       	andi	r24, 0xF8	; 248
 364:	80 31       	cpi	r24, 0x10	; 16
 366:	31 f0       	breq	.+12     	; 0x374 <LCD_Command+0xe4>
 368:	80 91 b9 00 	lds	r24, 0x00B9
 36c:	88 7f       	andi	r24, 0xF8	; 248
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	


	//Loads the slave address and set the R/W bit to 1
	TWDR = (0x27<<1) | (LCD_WRITE);
 374:	8e e4       	ldi	r24, 0x4E	; 78
 376:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN); //MAYBE 1<<TWEA also???
 37a:	84 e8       	ldi	r24, 0x84	; 132
 37c:	80 93 bc 00 	sts	0x00BC, r24
	
	while(!TWI_Busy());
 380:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 384:	89 2b       	or	r24, r25
 386:	e1 f3       	breq	.-8      	; 0x380 <LCD_Command+0xf0>
	if((TWSR & MASK) != MT_ADDRESS_ACK)Error((TWSR & MASK));
 388:	80 91 b9 00 	lds	r24, 0x00B9
 38c:	88 7f       	andi	r24, 0xF8	; 248
 38e:	88 31       	cpi	r24, 0x18	; 24
 390:	31 f0       	breq	.+12     	; 0x39e <LCD_Command+0x10e>
 392:	80 91 b9 00 	lds	r24, 0x00B9
 396:	88 7f       	andi	r24, 0xF8	; 248
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	

	
	//Sends the data to the slave
	TWDR = dataport; //8bits
 39e:	80 91 02 01 	lds	r24, 0x0102
 3a2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 3a6:	84 e8       	ldi	r24, 0x84	; 132
 3a8:	80 93 bc 00 	sts	0x00BC, r24
	while(!TWI_Busy());
 3ac:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 3b0:	89 2b       	or	r24, r25
 3b2:	e1 f3       	breq	.-8      	; 0x3ac <LCD_Command+0x11c>
	if((TWSR & MASK) !=  MT_BYTE_ACK)Error((TWSR & MASK));
 3b4:	80 91 b9 00 	lds	r24, 0x00B9
 3b8:	88 7f       	andi	r24, 0xF8	; 248
 3ba:	88 32       	cpi	r24, 0x28	; 40
 3bc:	31 f0       	breq	.+12     	; 0x3ca <LCD_Command+0x13a>
 3be:	80 91 b9 00 	lds	r24, 0x00B9
 3c2:	88 7f       	andi	r24, 0xF8	; 248
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 3ca:	84 e9       	ldi	r24, 0x94	; 148
 3cc:	80 93 bc 00 	sts	0x00BC, r24
 3d0:	2f ef       	ldi	r18, 0xFF	; 255
 3d2:	84 e3       	ldi	r24, 0x34	; 52
 3d4:	9c e0       	ldi	r25, 0x0C	; 12
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	90 40       	sbci	r25, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <LCD_Command+0x146>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <LCD_Command+0x150>
 3e0:	00 00       	nop
	
	_delay_ms(4000);
	LCD_toggle();
 3e2:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_toggle>
					
	dataport &= (0<<LCD_DATA3_PIN);
	dataport &= (0<<LCD_DATA2_PIN);
	dataport &= (0<<LCD_DATA1_PIN);
	dataport &= (0<<LCD_DATA0_PIN);
	if(command & 0x08) dataport |= (1<<LCD_DATA3_PIN);
 3e6:	c3 fd       	sbrc	r28, 3
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <LCD_Command+0x160>
	_delay_ms(4000);
	LCD_toggle();
	

					
	dataport &= (0<<LCD_DATA3_PIN);
 3ea:	10 92 02 01 	sts	0x0102, r1
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <LCD_Command+0x166>
	dataport &= (0<<LCD_DATA2_PIN);
	dataport &= (0<<LCD_DATA1_PIN);
	dataport &= (0<<LCD_DATA0_PIN);
	if(command & 0x08) dataport |= (1<<LCD_DATA3_PIN);
 3f0:	88 e0       	ldi	r24, 0x08	; 8
 3f2:	80 93 02 01 	sts	0x0102, r24
	if(command & 0x04) dataport |= (1<<LCD_DATA2_PIN);
 3f6:	c2 ff       	sbrs	r28, 2
 3f8:	05 c0       	rjmp	.+10     	; 0x404 <LCD_Command+0x174>
 3fa:	80 91 02 01 	lds	r24, 0x0102
 3fe:	84 60       	ori	r24, 0x04	; 4
 400:	80 93 02 01 	sts	0x0102, r24
	if(command & 0x02) dataport |= (1<<LCD_DATA1_PIN);
 404:	c1 ff       	sbrs	r28, 1
 406:	05 c0       	rjmp	.+10     	; 0x412 <LCD_Command+0x182>
 408:	80 91 02 01 	lds	r24, 0x0102
 40c:	82 60       	ori	r24, 0x02	; 2
 40e:	80 93 02 01 	sts	0x0102, r24
	if(command & 0x01) dataport |= (1<<LCD_DATA0_PIN);
 412:	c0 ff       	sbrs	r28, 0
 414:	05 c0       	rjmp	.+10     	; 0x420 <LCD_Command+0x190>
 416:	80 91 02 01 	lds	r24, 0x0102
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	80 93 02 01 	sts	0x0102, r24

	
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 420:	84 ea       	ldi	r24, 0xA4	; 164
 422:	80 93 bc 00 	sts	0x00BC, r24
		
		
	while(!TWI_Busy());
 426:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 42a:	89 2b       	or	r24, r25
 42c:	e1 f3       	breq	.-8      	; 0x426 <LCD_Command+0x196>
	if((TWSR & MASK) != REPEAT_START)Error(START);
 42e:	80 91 b9 00 	lds	r24, 0x00B9
 432:	88 7f       	andi	r24, 0xF8	; 248
 434:	80 31       	cpi	r24, 0x10	; 16
 436:	21 f0       	breq	.+8      	; 0x440 <LCD_Command+0x1b0>
 438:	88 e0       	ldi	r24, 0x08	; 8
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
		
	//Loads the slave address and set the R/W bit to 1
	TWDR = (0x27<<1) | (LCD_WRITE);
 440:	8e e4       	ldi	r24, 0x4E	; 78
 442:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN); //MAYBE 1<<TWEA also???
 446:	84 e8       	ldi	r24, 0x84	; 132
 448:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 44c:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 450:	89 2b       	or	r24, r25
 452:	e1 f3       	breq	.-8      	; 0x44c <LCD_Command+0x1bc>
	if((TWSR & MASK) != MT_ADDRESS_ACK)Error((TWSR & MASK));
 454:	80 91 b9 00 	lds	r24, 0x00B9
 458:	88 7f       	andi	r24, 0xF8	; 248
 45a:	88 31       	cpi	r24, 0x18	; 24
 45c:	31 f0       	breq	.+12     	; 0x46a <LCD_Command+0x1da>
 45e:	80 91 b9 00 	lds	r24, 0x00B9
 462:	88 7f       	andi	r24, 0xF8	; 248
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	

		
	//Sends the data to the slave
	TWDR = dataport; //8bits
 46a:	80 91 02 01 	lds	r24, 0x0102
 46e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 472:	84 e8       	ldi	r24, 0x84	; 132
 474:	80 93 bc 00 	sts	0x00BC, r24
	while(!TWI_Busy());
 478:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 47c:	89 2b       	or	r24, r25
 47e:	e1 f3       	breq	.-8      	; 0x478 <LCD_Command+0x1e8>
	if((TWSR & MASK) !=  MT_BYTE_ACK)Error((TWSR & MASK));
 480:	80 91 b9 00 	lds	r24, 0x00B9
 484:	88 7f       	andi	r24, 0xF8	; 248
 486:	88 32       	cpi	r24, 0x28	; 40
 488:	31 f0       	breq	.+12     	; 0x496 <LCD_Command+0x206>
 48a:	80 91 b9 00 	lds	r24, 0x00B9
 48e:	88 7f       	andi	r24, 0xF8	; 248
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
		
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 496:	cc eb       	ldi	r28, 0xBC	; 188
 498:	d0 e0       	ldi	r29, 0x00	; 0
 49a:	84 e9       	ldi	r24, 0x94	; 148
 49c:	88 83       	st	Y, r24
 49e:	2f ef       	ldi	r18, 0xFF	; 255
 4a0:	84 e3       	ldi	r24, 0x34	; 52
 4a2:	9c e0       	ldi	r25, 0x0C	; 12
 4a4:	21 50       	subi	r18, 0x01	; 1
 4a6:	80 40       	sbci	r24, 0x00	; 0
 4a8:	90 40       	sbci	r25, 0x00	; 0
 4aa:	e1 f7       	brne	.-8      	; 0x4a4 <LCD_Command+0x214>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <LCD_Command+0x21e>
 4ae:	00 00       	nop
		
	_delay_ms(4000);
		
	LCD_toggle();
 4b0:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_toggle>
		
	dataport |= (1<<LCD_DATA0_PIN);
	dataport |= (1<<LCD_DATA1_PIN);
	dataport |= (1<<LCD_DATA2_PIN);
	dataport |= (1<<LCD_DATA3_PIN);
 4b4:	80 91 02 01 	lds	r24, 0x0102
 4b8:	8f 60       	ori	r24, 0x0F	; 15
 4ba:	80 93 02 01 	sts	0x0102, r24
	
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 4be:	84 ea       	ldi	r24, 0xA4	; 164
 4c0:	88 83       	st	Y, r24
	
	
	while(!TWI_Busy());
 4c2:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 4c6:	89 2b       	or	r24, r25
 4c8:	e1 f3       	breq	.-8      	; 0x4c2 <LCD_Command+0x232>
	if((TWSR & MASK) != REPEAT_START)Error(START);
 4ca:	80 91 b9 00 	lds	r24, 0x00B9
 4ce:	88 7f       	andi	r24, 0xF8	; 248
 4d0:	80 31       	cpi	r24, 0x10	; 16
 4d2:	21 f0       	breq	.+8      	; 0x4dc <LCD_Command+0x24c>
 4d4:	88 e0       	ldi	r24, 0x08	; 8
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 a4 00 	call	0x148	; 0x148 <Error>


	//Loads the slave address and set the R/W bit to 1
	TWDR = (0x27<<1) | (LCD_WRITE);
 4dc:	8e e4       	ldi	r24, 0x4E	; 78
 4de:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN); //MAYBE 1<<TWEA also???
 4e2:	84 e8       	ldi	r24, 0x84	; 132
 4e4:	80 93 bc 00 	sts	0x00BC, r24
	
	while(!TWI_Busy());
 4e8:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 4ec:	89 2b       	or	r24, r25
 4ee:	e1 f3       	breq	.-8      	; 0x4e8 <LCD_Command+0x258>
	if((TWSR & MASK) != MT_ADDRESS_ACK)Error((TWSR & MASK));
 4f0:	80 91 b9 00 	lds	r24, 0x00B9
 4f4:	88 7f       	andi	r24, 0xF8	; 248
 4f6:	88 31       	cpi	r24, 0x18	; 24
 4f8:	31 f0       	breq	.+12     	; 0x506 <LCD_Command+0x276>
 4fa:	80 91 b9 00 	lds	r24, 0x00B9
 4fe:	88 7f       	andi	r24, 0xF8	; 248
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Sends the data to the slave
	TWDR = dataport; //8bits
 506:	80 91 02 01 	lds	r24, 0x0102
 50a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 50e:	84 e8       	ldi	r24, 0x84	; 132
 510:	80 93 bc 00 	sts	0x00BC, r24
	while(!TWI_Busy());
 514:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 518:	89 2b       	or	r24, r25
 51a:	e1 f3       	breq	.-8      	; 0x514 <LCD_Command+0x284>
	if((TWSR & MASK) !=  MT_BYTE_ACK)Error((TWSR & MASK));
 51c:	80 91 b9 00 	lds	r24, 0x00B9
 520:	88 7f       	andi	r24, 0xF8	; 248
 522:	88 32       	cpi	r24, 0x28	; 40
 524:	31 f0       	breq	.+12     	; 0x532 <LCD_Command+0x2a2>
 526:	80 91 b9 00 	lds	r24, 0x00B9
 52a:	88 7f       	andi	r24, 0xF8	; 248
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 532:	84 e9       	ldi	r24, 0x94	; 148
 534:	80 93 bc 00 	sts	0x00BC, r24
 538:	2f ef       	ldi	r18, 0xFF	; 255
 53a:	84 e3       	ldi	r24, 0x34	; 52
 53c:	9c e0       	ldi	r25, 0x0C	; 12
 53e:	21 50       	subi	r18, 0x01	; 1
 540:	80 40       	sbci	r24, 0x00	; 0
 542:	90 40       	sbci	r25, 0x00	; 0
 544:	e1 f7       	brne	.-8      	; 0x53e <LCD_Command+0x2ae>
 546:	00 c0       	rjmp	.+0      	; 0x548 <LCD_Command+0x2b8>
 548:	00 00       	nop

	_delay_ms(4000);
}
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <LCD_Init>:
//#include <inttypes.h>
#include "TWI_Master.h"
#include "LCD.h"


void LCD_Init(uint8_t addr){
 550:	c8 2f       	mov	r28, r24
 552:	2f ef       	ldi	r18, 0xFF	; 255
 554:	89 e6       	ldi	r24, 0x69	; 105
 556:	98 e1       	ldi	r25, 0x18	; 24
 558:	21 50       	subi	r18, 0x01	; 1
 55a:	80 40       	sbci	r24, 0x00	; 0
 55c:	90 40       	sbci	r25, 0x00	; 0
 55e:	e1 f7       	brne	.-8      	; 0x558 <LCD_Init+0x8>
 560:	00 c0       	rjmp	.+0      	; 0x562 <LCD_Init+0x12>
 562:	00 00       	nop
	
	
	_delay_ms(8000);
	
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 564:	84 ea       	ldi	r24, 0xA4	; 164
 566:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 56a:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 56e:	89 2b       	or	r24, r25
 570:	e1 f3       	breq	.-8      	; 0x56a <LCD_Init+0x1a>
	if((TWSR & MASK) != START)Error(START);
 572:	90 91 b9 00 	lds	r25, 0x00B9
 576:	98 7f       	andi	r25, 0xF8	; 248
 578:	98 30       	cpi	r25, 0x08	; 8
 57a:	21 f0       	breq	.+8      	; 0x584 <LCD_Init+0x34>
 57c:	88 e0       	ldi	r24, 0x08	; 8
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
		
	//Loads the slave address and set the R/W bit to 1
	TWDR = (addr<<1) | LCD_WRITE;
 584:	cc 0f       	add	r28, r28
 586:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN); //MAYBE 1<<TWEA also???
 58a:	84 e8       	ldi	r24, 0x84	; 132
 58c:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 590:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 594:	89 2b       	or	r24, r25
 596:	e1 f3       	breq	.-8      	; 0x590 <LCD_Init+0x40>
	if((TWSR & MASK) !=  MT_ADDRESS_ACK)Error((TWSR & MASK));
 598:	80 91 b9 00 	lds	r24, 0x00B9
 59c:	88 7f       	andi	r24, 0xF8	; 248
 59e:	88 31       	cpi	r24, 0x18	; 24
 5a0:	31 f0       	breq	.+12     	; 0x5ae <LCD_Init+0x5e>
 5a2:	80 91 b9 00 	lds	r24, 0x00B9
 5a6:	88 7f       	andi	r24, 0xF8	; 248
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
		
	//Sends the data to the slave
	TWDR = 0x0; //8bits 
 5ae:	10 92 bb 00 	sts	0x00BB, r1
	TWCR = (1<<TWINT) | (1<<TWEN);
 5b2:	84 e8       	ldi	r24, 0x84	; 132
 5b4:	80 93 bc 00 	sts	0x00BC, r24
	while(!TWI_Busy());
 5b8:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 5bc:	89 2b       	or	r24, r25
 5be:	e1 f3       	breq	.-8      	; 0x5b8 <LCD_Init+0x68>
	if((TWSR & MASK) !=  MT_BYTE_ACK)Error((TWSR & MASK));
 5c0:	80 91 b9 00 	lds	r24, 0x00B9
 5c4:	88 7f       	andi	r24, 0xF8	; 248
 5c6:	88 32       	cpi	r24, 0x28	; 40
 5c8:	31 f0       	breq	.+12     	; 0x5d6 <LCD_Init+0x86>
 5ca:	80 91 b9 00 	lds	r24, 0x00B9
 5ce:	88 7f       	andi	r24, 0xF8	; 248
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
		
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);	
 5d6:	ec eb       	ldi	r30, 0xBC	; 188
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	84 e9       	ldi	r24, 0x94	; 148
 5dc:	80 83       	st	Z, r24
 5de:	2f e7       	ldi	r18, 0x7F	; 127
 5e0:	8a e1       	ldi	r24, 0x1A	; 26
 5e2:	96 e0       	ldi	r25, 0x06	; 6
 5e4:	21 50       	subi	r18, 0x01	; 1
 5e6:	80 40       	sbci	r24, 0x00	; 0
 5e8:	90 40       	sbci	r25, 0x00	; 0
 5ea:	e1 f7       	brne	.-8      	; 0x5e4 <LCD_Init+0x94>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <LCD_Init+0x9e>
 5ee:	00 00       	nop
	/* Initial write to LCD i 8 bit                                         */
	/************************************************************************/
	

	dataport |= (1<<LCD_DATA1_PIN);
	dataport |= (1<<LCD_DATA0_PIN);
 5f0:	80 91 02 01 	lds	r24, 0x0102
 5f4:	83 60       	ori	r24, 0x03	; 3
 5f6:	80 93 02 01 	sts	0x0102, r24
	
	
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 5fa:	84 ea       	ldi	r24, 0xA4	; 164
 5fc:	80 83       	st	Z, r24
	
	
	while(!TWI_Busy());
 5fe:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 602:	89 2b       	or	r24, r25
 604:	e1 f3       	breq	.-8      	; 0x5fe <LCD_Init+0xae>
	if((TWSR & MASK) != START)Error(START);
 606:	80 91 b9 00 	lds	r24, 0x00B9
 60a:	88 7f       	andi	r24, 0xF8	; 248
 60c:	88 30       	cpi	r24, 0x08	; 8
 60e:	21 f0       	breq	.+8      	; 0x618 <LCD_Init+0xc8>
 610:	88 e0       	ldi	r24, 0x08	; 8
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Loads the slave address and set the R/W bit to 1
	TWDR = (addr<<1) | (LCD_WRITE);
 618:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN); 
 61c:	84 e8       	ldi	r24, 0x84	; 132
 61e:	80 93 bc 00 	sts	0x00BC, r24
	
	while(!TWI_Busy());
 622:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 626:	89 2b       	or	r24, r25
 628:	e1 f3       	breq	.-8      	; 0x622 <LCD_Init+0xd2>
	if((TWSR & MASK) != MT_ADDRESS_ACK)Error((TWSR & MASK));
 62a:	80 91 b9 00 	lds	r24, 0x00B9
 62e:	88 7f       	andi	r24, 0xF8	; 248
 630:	88 31       	cpi	r24, 0x18	; 24
 632:	31 f0       	breq	.+12     	; 0x640 <LCD_Init+0xf0>
 634:	80 91 b9 00 	lds	r24, 0x00B9
 638:	88 7f       	andi	r24, 0xF8	; 248
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Sends the data to the slave
	TWDR = dataport; //8bits
 640:	80 91 02 01 	lds	r24, 0x0102
 644:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 648:	84 e8       	ldi	r24, 0x84	; 132
 64a:	80 93 bc 00 	sts	0x00BC, r24
	while(!TWI_Busy());
 64e:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 652:	89 2b       	or	r24, r25
 654:	e1 f3       	breq	.-8      	; 0x64e <LCD_Init+0xfe>
	if((TWSR & MASK) !=  MT_BYTE_ACK)Error((TWSR & MASK));
 656:	80 91 b9 00 	lds	r24, 0x00B9
 65a:	88 7f       	andi	r24, 0xF8	; 248
 65c:	88 32       	cpi	r24, 0x28	; 40
 65e:	31 f0       	breq	.+12     	; 0x66c <LCD_Init+0x11c>
 660:	80 91 b9 00 	lds	r24, 0x00B9
 664:	88 7f       	andi	r24, 0xF8	; 248
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 66c:	0c eb       	ldi	r16, 0xBC	; 188
 66e:	10 e0       	ldi	r17, 0x00	; 0
 670:	84 e9       	ldi	r24, 0x94	; 148
 672:	f8 01       	movw	r30, r16
 674:	80 83       	st	Z, r24
 676:	ff ef       	ldi	r31, 0xFF	; 255
 678:	29 e6       	ldi	r18, 0x69	; 105
 67a:	88 e1       	ldi	r24, 0x18	; 24
 67c:	f1 50       	subi	r31, 0x01	; 1
 67e:	20 40       	sbci	r18, 0x00	; 0
 680:	80 40       	sbci	r24, 0x00	; 0
 682:	e1 f7       	brne	.-8      	; 0x67c <LCD_Init+0x12c>
 684:	00 c0       	rjmp	.+0      	; 0x686 <LCD_Init+0x136>
 686:	00 00       	nop
	
	/************************************************************************/
	/* Toggle pin					                                        */
	/************************************************************************/

	LCD_toggle();
 688:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_toggle>
 68c:	9f ef       	ldi	r25, 0xFF	; 255
 68e:	e4 e3       	ldi	r30, 0x34	; 52
 690:	fc e0       	ldi	r31, 0x0C	; 12
 692:	91 50       	subi	r25, 0x01	; 1
 694:	e0 40       	sbci	r30, 0x00	; 0
 696:	f0 40       	sbci	r31, 0x00	; 0
 698:	e1 f7       	brne	.-8      	; 0x692 <LCD_Init+0x142>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <LCD_Init+0x14c>
 69c:	00 00       	nop
	_delay_ms(4000);
	LCD_toggle();
 69e:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_toggle>
 6a2:	2f e3       	ldi	r18, 0x3F	; 63
 6a4:	8d e0       	ldi	r24, 0x0D	; 13
 6a6:	93 e0       	ldi	r25, 0x03	; 3
 6a8:	21 50       	subi	r18, 0x01	; 1
 6aa:	80 40       	sbci	r24, 0x00	; 0
 6ac:	90 40       	sbci	r25, 0x00	; 0
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <LCD_Init+0x158>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <LCD_Init+0x162>
 6b2:	00 00       	nop
	_delay_ms(1000);
	LCD_toggle();
 6b4:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_toggle>
 6b8:	ef e3       	ldi	r30, 0x3F	; 63
 6ba:	fd e0       	ldi	r31, 0x0D	; 13
 6bc:	23 e0       	ldi	r18, 0x03	; 3
 6be:	e1 50       	subi	r30, 0x01	; 1
 6c0:	f0 40       	sbci	r31, 0x00	; 0
 6c2:	20 40       	sbci	r18, 0x00	; 0
 6c4:	e1 f7       	brne	.-8      	; 0x6be <LCD_Init+0x16e>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <LCD_Init+0x178>
 6c8:	00 00       	nop

	/************************************************************************/
	/* Set for 4 bit instead		                                        */
	/************************************************************************/	
		
	dataport &= (0<<LCD_DATA0_PIN);
 6ca:	10 92 02 01 	sts	0x0102, r1
	
		
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 6ce:	84 ea       	ldi	r24, 0xA4	; 164
 6d0:	f8 01       	movw	r30, r16
 6d2:	80 83       	st	Z, r24
		
	while(!TWI_Busy());
 6d4:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 6d8:	89 2b       	or	r24, r25
 6da:	e1 f3       	breq	.-8      	; 0x6d4 <LCD_Init+0x184>
	if((TWSR & MASK) != START)Error(START);
 6dc:	80 91 b9 00 	lds	r24, 0x00B9
 6e0:	88 7f       	andi	r24, 0xF8	; 248
 6e2:	88 30       	cpi	r24, 0x08	; 8
 6e4:	21 f0       	breq	.+8      	; 0x6ee <LCD_Init+0x19e>
 6e6:	88 e0       	ldi	r24, 0x08	; 8
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
		
	//Loads the slave address and set the R/W bit to 1
	TWDR = (addr<<1) | (LCD_WRITE);
 6ee:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN); //MAYBE 1<<TWEA also???
 6f2:	84 e8       	ldi	r24, 0x84	; 132
 6f4:	80 93 bc 00 	sts	0x00BC, r24
		
	while(!TWI_Busy());
 6f8:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 6fc:	89 2b       	or	r24, r25
 6fe:	e1 f3       	breq	.-8      	; 0x6f8 <LCD_Init+0x1a8>
	if((TWSR & MASK) != MT_ADDRESS_ACK)Error((TWSR & MASK));
 700:	80 91 b9 00 	lds	r24, 0x00B9
 704:	88 7f       	andi	r24, 0xF8	; 248
 706:	88 31       	cpi	r24, 0x18	; 24
 708:	31 f0       	breq	.+12     	; 0x716 <LCD_Init+0x1c6>
 70a:	80 91 b9 00 	lds	r24, 0x00B9
 70e:	88 7f       	andi	r24, 0xF8	; 248
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
		
	//Sends the data to the slave
	TWDR = dataport; //8bits
 716:	80 91 02 01 	lds	r24, 0x0102
 71a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 71e:	84 e8       	ldi	r24, 0x84	; 132
 720:	80 93 bc 00 	sts	0x00BC, r24
	while(!TWI_Busy());
 724:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 728:	89 2b       	or	r24, r25
 72a:	e1 f3       	breq	.-8      	; 0x724 <LCD_Init+0x1d4>
	if((TWSR & MASK) !=  MT_BYTE_ACK)Error((TWSR & MASK));
 72c:	80 91 b9 00 	lds	r24, 0x00B9
 730:	88 7f       	andi	r24, 0xF8	; 248
 732:	88 32       	cpi	r24, 0x28	; 40
 734:	31 f0       	breq	.+12     	; 0x742 <LCD_Init+0x1f2>
 736:	80 91 b9 00 	lds	r24, 0x00B9
 73a:	88 7f       	andi	r24, 0xF8	; 248
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
		
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);	
 742:	84 e9       	ldi	r24, 0x94	; 148
 744:	80 93 bc 00 	sts	0x00BC, r24
 748:	ff e3       	ldi	r31, 0x3F	; 63
 74a:	2d e0       	ldi	r18, 0x0D	; 13
 74c:	83 e0       	ldi	r24, 0x03	; 3
 74e:	f1 50       	subi	r31, 0x01	; 1
 750:	20 40       	sbci	r18, 0x00	; 0
 752:	80 40       	sbci	r24, 0x00	; 0
 754:	e1 f7       	brne	.-8      	; 0x74e <LCD_Init+0x1fe>
 756:	00 c0       	rjmp	.+0      	; 0x758 <LCD_Init+0x208>
 758:	00 00       	nop
		
	/************************************************************************/
	/* Toggle pin					                                        */
	/************************************************************************/
	_delay_ms(1000);
	LCD_toggle();
 75a:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_toggle>
 75e:	9f ef       	ldi	r25, 0xFF	; 255
 760:	e9 e6       	ldi	r30, 0x69	; 105
 762:	f8 e1       	ldi	r31, 0x18	; 24
 764:	91 50       	subi	r25, 0x01	; 1
 766:	e0 40       	sbci	r30, 0x00	; 0
 768:	f0 40       	sbci	r31, 0x00	; 0
 76a:	e1 f7       	brne	.-8      	; 0x764 <LCD_Init+0x214>
 76c:	00 c0       	rjmp	.+0      	; 0x76e <LCD_Init+0x21e>
 76e:	00 00       	nop
	_delay_ms(8000);


	LCD_Command(0x28); //4bit two line
 770:	88 e2       	ldi	r24, 0x28	; 40
 772:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Command>
 776:	2f ef       	ldi	r18, 0xFF	; 255
 778:	89 e6       	ldi	r24, 0x69	; 105
 77a:	98 e1       	ldi	r25, 0x18	; 24
 77c:	21 50       	subi	r18, 0x01	; 1
 77e:	80 40       	sbci	r24, 0x00	; 0
 780:	90 40       	sbci	r25, 0x00	; 0
 782:	e1 f7       	brne	.-8      	; 0x77c <LCD_Init+0x22c>
 784:	00 c0       	rjmp	.+0      	; 0x786 <LCD_Init+0x236>
 786:	00 00       	nop
	_delay_ms(8000);
	

			
			
	LCD_Command(0x08); //display off
 788:	88 e0       	ldi	r24, 0x08	; 8
 78a:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Command>
 78e:	ef ef       	ldi	r30, 0xFF	; 255
 790:	f9 e6       	ldi	r31, 0x69	; 105
 792:	28 e1       	ldi	r18, 0x18	; 24
 794:	e1 50       	subi	r30, 0x01	; 1
 796:	f0 40       	sbci	r31, 0x00	; 0
 798:	20 40       	sbci	r18, 0x00	; 0
 79a:	e1 f7       	brne	.-8      	; 0x794 <LCD_Init+0x244>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <LCD_Init+0x24e>
 79e:	00 00       	nop
	_delay_ms(8000);
	LCD_Command(0x01); //Clear screen
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Command>
 7a6:	8f ef       	ldi	r24, 0xFF	; 255
 7a8:	99 e6       	ldi	r25, 0x69	; 105
 7aa:	e8 e1       	ldi	r30, 0x18	; 24
 7ac:	81 50       	subi	r24, 0x01	; 1
 7ae:	90 40       	sbci	r25, 0x00	; 0
 7b0:	e0 40       	sbci	r30, 0x00	; 0
 7b2:	e1 f7       	brne	.-8      	; 0x7ac <LCD_Init+0x25c>
 7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <LCD_Init+0x266>
 7b6:	00 00       	nop

	_delay_ms(8000);
	uint8_t mode = 0;
	mode = (1<<LCD_ENTRY_MODE)|(1<<LCD_ENTRY_INC);
	LCD_Command(mode);//D MODE FEDAULT
 7b8:	84 e4       	ldi	r24, 0x44	; 68
 7ba:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Command>
 7be:	ff ef       	ldi	r31, 0xFF	; 255
 7c0:	29 e6       	ldi	r18, 0x69	; 105
 7c2:	88 e1       	ldi	r24, 0x18	; 24
 7c4:	f1 50       	subi	r31, 0x01	; 1
 7c6:	20 40       	sbci	r18, 0x00	; 0
 7c8:	80 40       	sbci	r24, 0x00	; 0
 7ca:	e1 f7       	brne	.-8      	; 0x7c4 <LCD_Init+0x274>
 7cc:	00 c0       	rjmp	.+0      	; 0x7ce <LCD_Init+0x27e>
 7ce:	00 00       	nop
	_delay_ms(8000);

	LCD_Command(0x0F); //Dispattr
 7d0:	8f e0       	ldi	r24, 0x0F	; 15
 7d2:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Command>
	
												Y_LED_On();
 7d6:	0e 94 c5 00 	call	0x18a	; 0x18a <Y_LED_On>
												while(1);
 7da:	ff cf       	rjmp	.-2      	; 0x7da <LCD_Init+0x28a>

000007dc <LCD_Print>:
	_delay_ms(4000);
	LCD_set_outputpinlow();
	
}

void LCD_Print(uint8_t command){
 7dc:	cf 93       	push	r28
 7de:	df 93       	push	r29
 7e0:	c8 2f       	mov	r28, r24
	

	
	dataport |= (1<<LCD_RS_PIN);
	dataport &= (0<<LCD_RW_PIN);
 7e2:	10 92 02 01 	sts	0x0102, r1
	

	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 7e6:	84 ea       	ldi	r24, 0xA4	; 164
 7e8:	80 93 bc 00 	sts	0x00BC, r24
	
	
	while(!TWI_Busy());
 7ec:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 7f0:	89 2b       	or	r24, r25
 7f2:	e1 f3       	breq	.-8      	; 0x7ec <LCD_Print+0x10>
	if((TWSR & MASK) != START)Error(START);
 7f4:	80 91 b9 00 	lds	r24, 0x00B9
 7f8:	88 7f       	andi	r24, 0xF8	; 248
 7fa:	88 30       	cpi	r24, 0x08	; 8
 7fc:	21 f0       	breq	.+8      	; 0x806 <LCD_Print+0x2a>
 7fe:	88 e0       	ldi	r24, 0x08	; 8
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Loads the slave address and set the R/W bit to 1
	TWDR = (0x27<<1) | (1<<0);
 806:	8f e4       	ldi	r24, 0x4F	; 79
 808:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN); //MAYBE 1<<TWEA also???
 80c:	84 e8       	ldi	r24, 0x84	; 132
 80e:	80 93 bc 00 	sts	0x00BC, r24
	
	while(!TWI_Busy());
 812:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 816:	89 2b       	or	r24, r25
 818:	e1 f3       	breq	.-8      	; 0x812 <LCD_Print+0x36>
	if((TWSR & MASK) != MT_ADDRESS_ACK)Error((TWSR & MASK));
 81a:	80 91 b9 00 	lds	r24, 0x00B9
 81e:	88 7f       	andi	r24, 0xF8	; 248
 820:	88 31       	cpi	r24, 0x18	; 24
 822:	31 f0       	breq	.+12     	; 0x830 <LCD_Print+0x54>
 824:	80 91 b9 00 	lds	r24, 0x00B9
 828:	88 7f       	andi	r24, 0xF8	; 248
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Sends the data to the slave
	TWDR = dataport; //8bits
 830:	80 91 02 01 	lds	r24, 0x0102
 834:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 838:	84 e8       	ldi	r24, 0x84	; 132
 83a:	80 93 bc 00 	sts	0x00BC, r24
	while(!TWI_Busy());
 83e:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 842:	89 2b       	or	r24, r25
 844:	e1 f3       	breq	.-8      	; 0x83e <LCD_Print+0x62>
	if((TWSR & MASK) !=  MR_BYTE_NACK)Error((TWSR & MASK));
 846:	80 91 b9 00 	lds	r24, 0x00B9
 84a:	88 7f       	andi	r24, 0xF8	; 248
 84c:	88 35       	cpi	r24, 0x58	; 88
 84e:	31 f0       	breq	.+12     	; 0x85c <LCD_Print+0x80>
 850:	80 91 b9 00 	lds	r24, 0x00B9
 854:	88 7f       	andi	r24, 0xF8	; 248
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 85c:	84 e9       	ldi	r24, 0x94	; 148
 85e:	80 93 bc 00 	sts	0x00BC, r24
 862:	2f ef       	ldi	r18, 0xFF	; 255
 864:	84 e3       	ldi	r24, 0x34	; 52
 866:	9c e0       	ldi	r25, 0x0C	; 12
 868:	21 50       	subi	r18, 0x01	; 1
 86a:	80 40       	sbci	r24, 0x00	; 0
 86c:	90 40       	sbci	r25, 0x00	; 0
 86e:	e1 f7       	brne	.-8      	; 0x868 <LCD_Print+0x8c>
 870:	00 c0       	rjmp	.+0      	; 0x872 <LCD_Print+0x96>
 872:	00 00       	nop
	
	dataport &= (0<<LCD_DATA3_PIN);
	dataport &= (0<<LCD_DATA2_PIN);
	dataport &= (0<<LCD_DATA1_PIN);
	dataport &= (0<<LCD_DATA0_PIN);
	if(command & 0x80) dataport |= (1<<LCD_DATA3_PIN);
 874:	cc 23       	and	r28, r28
 876:	1c f0       	brlt	.+6      	; 0x87e <LCD_Print+0xa2>
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
	
	_delay_ms(4000);
	
	dataport &= (0<<LCD_DATA3_PIN);
 878:	10 92 02 01 	sts	0x0102, r1
 87c:	03 c0       	rjmp	.+6      	; 0x884 <LCD_Print+0xa8>
	dataport &= (0<<LCD_DATA2_PIN);
	dataport &= (0<<LCD_DATA1_PIN);
	dataport &= (0<<LCD_DATA0_PIN);
	if(command & 0x80) dataport |= (1<<LCD_DATA3_PIN);
 87e:	88 e0       	ldi	r24, 0x08	; 8
 880:	80 93 02 01 	sts	0x0102, r24
	if(command & 0x40) dataport |= (1<<LCD_DATA2_PIN);
 884:	c6 ff       	sbrs	r28, 6
 886:	05 c0       	rjmp	.+10     	; 0x892 <LCD_Print+0xb6>
 888:	80 91 02 01 	lds	r24, 0x0102
 88c:	84 60       	ori	r24, 0x04	; 4
 88e:	80 93 02 01 	sts	0x0102, r24
	if(command & 0x20) dataport |= (1<<LCD_DATA1_PIN);
 892:	c5 ff       	sbrs	r28, 5
 894:	05 c0       	rjmp	.+10     	; 0x8a0 <LCD_Print+0xc4>
 896:	80 91 02 01 	lds	r24, 0x0102
 89a:	82 60       	ori	r24, 0x02	; 2
 89c:	80 93 02 01 	sts	0x0102, r24
	if(command & 0x10) dataport |= (1<<LCD_DATA0_PIN);
 8a0:	c4 ff       	sbrs	r28, 4
 8a2:	05 c0       	rjmp	.+10     	; 0x8ae <LCD_Print+0xd2>
 8a4:	80 91 02 01 	lds	r24, 0x0102
 8a8:	81 60       	ori	r24, 0x01	; 1
 8aa:	80 93 02 01 	sts	0x0102, r24
	
	
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 8ae:	84 ea       	ldi	r24, 0xA4	; 164
 8b0:	80 93 bc 00 	sts	0x00BC, r24
	
	
	while(!TWI_Busy());
 8b4:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 8b8:	89 2b       	or	r24, r25
 8ba:	e1 f3       	breq	.-8      	; 0x8b4 <LCD_Print+0xd8>
	if((TWSR & MASK) != START)Error(START);
 8bc:	80 91 b9 00 	lds	r24, 0x00B9
 8c0:	88 7f       	andi	r24, 0xF8	; 248
 8c2:	88 30       	cpi	r24, 0x08	; 8
 8c4:	21 f0       	breq	.+8      	; 0x8ce <LCD_Print+0xf2>
 8c6:	88 e0       	ldi	r24, 0x08	; 8
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Loads the slave address and set the R/W bit to 1
	TWDR = (0x27<<1) | (1<<0);
 8ce:	8f e4       	ldi	r24, 0x4F	; 79
 8d0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN); //MAYBE 1<<TWEA also???
 8d4:	84 e8       	ldi	r24, 0x84	; 132
 8d6:	80 93 bc 00 	sts	0x00BC, r24
	
	while(!TWI_Busy());
 8da:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 8de:	89 2b       	or	r24, r25
 8e0:	e1 f3       	breq	.-8      	; 0x8da <LCD_Print+0xfe>
	if((TWSR & MASK) != MR_ADDRESS_ACK)Error((TWSR & MASK));
 8e2:	80 91 b9 00 	lds	r24, 0x00B9
 8e6:	88 7f       	andi	r24, 0xF8	; 248
 8e8:	80 34       	cpi	r24, 0x40	; 64
 8ea:	31 f0       	breq	.+12     	; 0x8f8 <LCD_Print+0x11c>
 8ec:	80 91 b9 00 	lds	r24, 0x00B9
 8f0:	88 7f       	andi	r24, 0xF8	; 248
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Sends the data to the slave
	TWDR = dataport; //8bits
 8f8:	80 91 02 01 	lds	r24, 0x0102
 8fc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 900:	84 e8       	ldi	r24, 0x84	; 132
 902:	80 93 bc 00 	sts	0x00BC, r24
	while(!TWI_Busy());
 906:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 90a:	89 2b       	or	r24, r25
 90c:	e1 f3       	breq	.-8      	; 0x906 <__stack+0x7>
	if((TWSR & MASK) !=  MR_BYTE_NACK)Error((TWSR & MASK));
 90e:	80 91 b9 00 	lds	r24, 0x00B9
 912:	88 7f       	andi	r24, 0xF8	; 248
 914:	88 35       	cpi	r24, 0x58	; 88
 916:	31 f0       	breq	.+12     	; 0x924 <__stack+0x25>
 918:	80 91 b9 00 	lds	r24, 0x00B9
 91c:	88 7f       	andi	r24, 0xF8	; 248
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 924:	84 e9       	ldi	r24, 0x94	; 148
 926:	80 93 bc 00 	sts	0x00BC, r24
 92a:	2f ef       	ldi	r18, 0xFF	; 255
 92c:	84 e3       	ldi	r24, 0x34	; 52
 92e:	9c e0       	ldi	r25, 0x0C	; 12
 930:	21 50       	subi	r18, 0x01	; 1
 932:	80 40       	sbci	r24, 0x00	; 0
 934:	90 40       	sbci	r25, 0x00	; 0
 936:	e1 f7       	brne	.-8      	; 0x930 <__stack+0x31>
 938:	00 c0       	rjmp	.+0      	; 0x93a <__stack+0x3b>
 93a:	00 00       	nop
	
	_delay_ms(4000);
	
	LCD_toggle();
 93c:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_toggle>
	
	dataport &= (0<<LCD_DATA3_PIN);
	dataport &= (0<<LCD_DATA2_PIN);
	dataport &= (0<<LCD_DATA1_PIN);
	dataport &= (0<<LCD_DATA0_PIN);
	if(command & 0x08) dataport |= (1<<LCD_DATA3_PIN);
 940:	c3 fd       	sbrc	r28, 3
 942:	03 c0       	rjmp	.+6      	; 0x94a <__stack+0x4b>
	
	_delay_ms(4000);
	
	LCD_toggle();
	
	dataport &= (0<<LCD_DATA3_PIN);
 944:	10 92 02 01 	sts	0x0102, r1
 948:	03 c0       	rjmp	.+6      	; 0x950 <__stack+0x51>
	dataport &= (0<<LCD_DATA2_PIN);
	dataport &= (0<<LCD_DATA1_PIN);
	dataport &= (0<<LCD_DATA0_PIN);
	if(command & 0x08) dataport |= (1<<LCD_DATA3_PIN);
 94a:	88 e0       	ldi	r24, 0x08	; 8
 94c:	80 93 02 01 	sts	0x0102, r24
	if(command & 0x04) dataport |= (1<<LCD_DATA2_PIN);
 950:	c2 ff       	sbrs	r28, 2
 952:	05 c0       	rjmp	.+10     	; 0x95e <__stack+0x5f>
 954:	80 91 02 01 	lds	r24, 0x0102
 958:	84 60       	ori	r24, 0x04	; 4
 95a:	80 93 02 01 	sts	0x0102, r24
	if(command & 0x02) dataport |= (1<<LCD_DATA1_PIN);
 95e:	c1 ff       	sbrs	r28, 1
 960:	05 c0       	rjmp	.+10     	; 0x96c <__stack+0x6d>
 962:	80 91 02 01 	lds	r24, 0x0102
 966:	82 60       	ori	r24, 0x02	; 2
 968:	80 93 02 01 	sts	0x0102, r24
	if(command & 0x01) dataport |= (1<<LCD_DATA0_PIN);
 96c:	c0 ff       	sbrs	r28, 0
 96e:	05 c0       	rjmp	.+10     	; 0x97a <__stack+0x7b>
 970:	80 91 02 01 	lds	r24, 0x0102
 974:	81 60       	ori	r24, 0x01	; 1
 976:	80 93 02 01 	sts	0x0102, r24
	
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 97a:	84 ea       	ldi	r24, 0xA4	; 164
 97c:	80 93 bc 00 	sts	0x00BC, r24
	
	
	while(!TWI_Busy());
 980:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 984:	89 2b       	or	r24, r25
 986:	e1 f3       	breq	.-8      	; 0x980 <__stack+0x81>
	if((TWSR & MASK) != START)Error(START);
 988:	80 91 b9 00 	lds	r24, 0x00B9
 98c:	88 7f       	andi	r24, 0xF8	; 248
 98e:	88 30       	cpi	r24, 0x08	; 8
 990:	21 f0       	breq	.+8      	; 0x99a <__stack+0x9b>
 992:	88 e0       	ldi	r24, 0x08	; 8
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Loads the slave address and set the R/W bit to 1
	TWDR = (0x27<<1) | (1<<0);
 99a:	8f e4       	ldi	r24, 0x4F	; 79
 99c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN); //MAYBE 1<<TWEA also???
 9a0:	84 e8       	ldi	r24, 0x84	; 132
 9a2:	80 93 bc 00 	sts	0x00BC, r24
	
	while(!TWI_Busy());
 9a6:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 9aa:	89 2b       	or	r24, r25
 9ac:	e1 f3       	breq	.-8      	; 0x9a6 <__stack+0xa7>
	if((TWSR & MASK) != MT_ADDRESS_ACK)Error((TWSR & MASK));
 9ae:	80 91 b9 00 	lds	r24, 0x00B9
 9b2:	88 7f       	andi	r24, 0xF8	; 248
 9b4:	88 31       	cpi	r24, 0x18	; 24
 9b6:	31 f0       	breq	.+12     	; 0x9c4 <__stack+0xc5>
 9b8:	80 91 b9 00 	lds	r24, 0x00B9
 9bc:	88 7f       	andi	r24, 0xF8	; 248
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Sends the data to the slave
	TWDR = dataport; //8bits
 9c4:	80 91 02 01 	lds	r24, 0x0102
 9c8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 9cc:	84 e8       	ldi	r24, 0x84	; 132
 9ce:	80 93 bc 00 	sts	0x00BC, r24
	while(!TWI_Busy());
 9d2:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 9d6:	89 2b       	or	r24, r25
 9d8:	e1 f3       	breq	.-8      	; 0x9d2 <__stack+0xd3>
	if((TWSR & MASK) !=  MR_BYTE_NACK)Error((TWSR & MASK));
 9da:	80 91 b9 00 	lds	r24, 0x00B9
 9de:	88 7f       	andi	r24, 0xF8	; 248
 9e0:	88 35       	cpi	r24, 0x58	; 88
 9e2:	31 f0       	breq	.+12     	; 0x9f0 <__stack+0xf1>
 9e4:	80 91 b9 00 	lds	r24, 0x00B9
 9e8:	88 7f       	andi	r24, 0xF8	; 248
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 9f0:	cc eb       	ldi	r28, 0xBC	; 188
 9f2:	d0 e0       	ldi	r29, 0x00	; 0
 9f4:	84 e9       	ldi	r24, 0x94	; 148
 9f6:	88 83       	st	Y, r24
 9f8:	2f ef       	ldi	r18, 0xFF	; 255
 9fa:	84 e3       	ldi	r24, 0x34	; 52
 9fc:	9c e0       	ldi	r25, 0x0C	; 12
 9fe:	21 50       	subi	r18, 0x01	; 1
 a00:	80 40       	sbci	r24, 0x00	; 0
 a02:	90 40       	sbci	r25, 0x00	; 0
 a04:	e1 f7       	brne	.-8      	; 0x9fe <__stack+0xff>
 a06:	00 c0       	rjmp	.+0      	; 0xa08 <__stack+0x109>
 a08:	00 00       	nop
	
	_delay_ms(4000);
	
	LCD_toggle();
 a0a:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_toggle>
	
	dataport |= (1<<LCD_DATA0_PIN);
	dataport |= (1<<LCD_DATA1_PIN);
	dataport |= (1<<LCD_DATA2_PIN);
	dataport |= (1<<LCD_DATA3_PIN);
 a0e:	80 91 02 01 	lds	r24, 0x0102
 a12:	8f 60       	ori	r24, 0x0F	; 15
 a14:	80 93 02 01 	sts	0x0102, r24
	
	//Sends the start condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 a18:	84 ea       	ldi	r24, 0xA4	; 164
 a1a:	88 83       	st	Y, r24
	
	
	while(!TWI_Busy());
 a1c:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 a20:	89 2b       	or	r24, r25
 a22:	e1 f3       	breq	.-8      	; 0xa1c <__stack+0x11d>
	if((TWSR & MASK) != START)Error(START);
 a24:	80 91 b9 00 	lds	r24, 0x00B9
 a28:	88 7f       	andi	r24, 0xF8	; 248
 a2a:	88 30       	cpi	r24, 0x08	; 8
 a2c:	21 f0       	breq	.+8      	; 0xa36 <__stack+0x137>
 a2e:	88 e0       	ldi	r24, 0x08	; 8
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Loads the slave address and set the R/W bit to 1
	TWDR = (0x27<<1) | (1<<0);
 a36:	8f e4       	ldi	r24, 0x4F	; 79
 a38:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN); //MAYBE 1<<TWEA also???
 a3c:	84 e8       	ldi	r24, 0x84	; 132
 a3e:	80 93 bc 00 	sts	0x00BC, r24
	
	while(!TWI_Busy());
 a42:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 a46:	89 2b       	or	r24, r25
 a48:	e1 f3       	breq	.-8      	; 0xa42 <__stack+0x143>
	if((TWSR & MASK) != MT_ADDRESS_ACK)Error((TWSR & MASK));
 a4a:	80 91 b9 00 	lds	r24, 0x00B9
 a4e:	88 7f       	andi	r24, 0xF8	; 248
 a50:	88 31       	cpi	r24, 0x18	; 24
 a52:	31 f0       	breq	.+12     	; 0xa60 <__stack+0x161>
 a54:	80 91 b9 00 	lds	r24, 0x00B9
 a58:	88 7f       	andi	r24, 0xF8	; 248
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Sends the data to the slave
	TWDR = dataport; //8bits
 a60:	80 91 02 01 	lds	r24, 0x0102
 a64:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 a68:	84 e8       	ldi	r24, 0x84	; 132
 a6a:	80 93 bc 00 	sts	0x00BC, r24
	while(!TWI_Busy());
 a6e:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_Busy>
 a72:	89 2b       	or	r24, r25
 a74:	e1 f3       	breq	.-8      	; 0xa6e <__stack+0x16f>
	if((TWSR & MASK) !=  MR_BYTE_NACK)Error((TWSR & MASK));
 a76:	80 91 b9 00 	lds	r24, 0x00B9
 a7a:	88 7f       	andi	r24, 0xF8	; 248
 a7c:	88 35       	cpi	r24, 0x58	; 88
 a7e:	31 f0       	breq	.+12     	; 0xa8c <__stack+0x18d>
 a80:	80 91 b9 00 	lds	r24, 0x00B9
 a84:	88 7f       	andi	r24, 0xF8	; 248
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	0e 94 a4 00 	call	0x148	; 0x148 <Error>
	
	//Sends the stop condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 a8c:	84 e9       	ldi	r24, 0x94	; 148
 a8e:	80 93 bc 00 	sts	0x00BC, r24
 a92:	2f ef       	ldi	r18, 0xFF	; 255
 a94:	84 e3       	ldi	r24, 0x34	; 52
 a96:	9c e0       	ldi	r25, 0x0C	; 12
 a98:	21 50       	subi	r18, 0x01	; 1
 a9a:	80 40       	sbci	r24, 0x00	; 0
 a9c:	90 40       	sbci	r25, 0x00	; 0
 a9e:	e1 f7       	brne	.-8      	; 0xa98 <__stack+0x199>
 aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <__stack+0x1a3>
 aa2:	00 00       	nop
	_delay_ms(4000);
	
	
	
	
}
 aa4:	df 91       	pop	r29
 aa6:	cf 91       	pop	r28
 aa8:	08 95       	ret

00000aaa <main>:

int main(void)
{


	System_Init(); //Checked - OK!
 aaa:	0e 94 53 00 	call	0xa6	; 0xa6 <System_Init>
	//Baudrate max is 19200 (double speed enabled)

	UART_Init(19200); //Checked - OK!
 aae:	80 e0       	ldi	r24, 0x00	; 0
 ab0:	9b e4       	ldi	r25, 0x4B	; 75
 ab2:	0e 94 77 00 	call	0xee	; 0xee <UART_Init>

	//Connects to BT device
	//while(BT_Init()==0);
	
	TWI_Master_Init();
 ab6:	0e 94 aa 05 	call	0xb54	; 0xb54 <TWI_Master_Init>
	
	LCD_Init(0x27);
 aba:	87 e2       	ldi	r24, 0x27	; 39
 abc:	0e 94 a8 02 	call	0x550	; 0x550 <LCD_Init>
 ac0:	2f ef       	ldi	r18, 0xFF	; 255
 ac2:	8f e4       	ldi	r24, 0x4F	; 79
 ac4:	93 ec       	ldi	r25, 0xC3	; 195
 ac6:	21 50       	subi	r18, 0x01	; 1
 ac8:	80 40       	sbci	r24, 0x00	; 0
 aca:	90 40       	sbci	r25, 0x00	; 0
 acc:	e1 f7       	brne	.-8      	; 0xac6 <main+0x1c>
 ace:	00 c0       	rjmp	.+0      	; 0xad0 <main+0x26>
 ad0:	00 00       	nop

	_delay_ms(8000);
	LCD_Command(0x28); //4bit two line
 ad2:	88 e2       	ldi	r24, 0x28	; 40
 ad4:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Command>
 ad8:	2f ef       	ldi	r18, 0xFF	; 255
 ada:	8f e4       	ldi	r24, 0x4F	; 79
 adc:	93 ec       	ldi	r25, 0xC3	; 195
 ade:	21 50       	subi	r18, 0x01	; 1
 ae0:	80 40       	sbci	r24, 0x00	; 0
 ae2:	90 40       	sbci	r25, 0x00	; 0
 ae4:	e1 f7       	brne	.-8      	; 0xade <main+0x34>
 ae6:	00 c0       	rjmp	.+0      	; 0xae8 <main+0x3e>
 ae8:	00 00       	nop
	_delay_ms(8000);
	LCD_Command(0x08); //display off
 aea:	88 e0       	ldi	r24, 0x08	; 8
 aec:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Command>
 af0:	2f ef       	ldi	r18, 0xFF	; 255
 af2:	8f e4       	ldi	r24, 0x4F	; 79
 af4:	93 ec       	ldi	r25, 0xC3	; 195
 af6:	21 50       	subi	r18, 0x01	; 1
 af8:	80 40       	sbci	r24, 0x00	; 0
 afa:	90 40       	sbci	r25, 0x00	; 0
 afc:	e1 f7       	brne	.-8      	; 0xaf6 <main+0x4c>
 afe:	00 c0       	rjmp	.+0      	; 0xb00 <main+0x56>
 b00:	00 00       	nop
	_delay_ms(8000);
 	LCD_Command(0x01); //Clear screen
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Command>
 b08:	2f ef       	ldi	r18, 0xFF	; 255
 b0a:	8f e4       	ldi	r24, 0x4F	; 79
 b0c:	93 ec       	ldi	r25, 0xC3	; 195
 b0e:	21 50       	subi	r18, 0x01	; 1
 b10:	80 40       	sbci	r24, 0x00	; 0
 b12:	90 40       	sbci	r25, 0x00	; 0
 b14:	e1 f7       	brne	.-8      	; 0xb0e <main+0x64>
 b16:	00 c0       	rjmp	.+0      	; 0xb18 <main+0x6e>
 b18:	00 00       	nop
	_delay_ms(8000);
	LCD_Command(LCD_MODE_DEFAULT); //LCD MODE FEDAULT
 b1a:	84 e4       	ldi	r24, 0x44	; 68
 b1c:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Command>
 b20:	2f ef       	ldi	r18, 0xFF	; 255
 b22:	8f e4       	ldi	r24, 0x4F	; 79
 b24:	93 ec       	ldi	r25, 0xC3	; 195
 b26:	21 50       	subi	r18, 0x01	; 1
 b28:	80 40       	sbci	r24, 0x00	; 0
 b2a:	90 40       	sbci	r25, 0x00	; 0
 b2c:	e1 f7       	brne	.-8      	; 0xb26 <main+0x7c>
 b2e:	00 c0       	rjmp	.+0      	; 0xb30 <main+0x86>
 b30:	00 00       	nop
	_delay_ms(8000);
	LCD_Command(0x0E); //Dispattr
 b32:	8e e0       	ldi	r24, 0x0E	; 14
 b34:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Command>
 b38:	2f ef       	ldi	r18, 0xFF	; 255
 b3a:	8f e4       	ldi	r24, 0x4F	; 79
 b3c:	93 ec       	ldi	r25, 0xC3	; 195
 b3e:	21 50       	subi	r18, 0x01	; 1
 b40:	80 40       	sbci	r24, 0x00	; 0
 b42:	90 40       	sbci	r25, 0x00	; 0
 b44:	e1 f7       	brne	.-8      	; 0xb3e <main+0x94>
 b46:	00 c0       	rjmp	.+0      	; 0xb48 <main+0x9e>
 b48:	00 00       	nop
	_delay_ms(8000);
	LCD_Print('S');
 b4a:	83 e5       	ldi	r24, 0x53	; 83
 b4c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_Print>


	 
	while(1){
		PORTB |= (1<<PORTB0);
 b50:	28 9a       	sbi	0x05, 0	; 5
	}
 b52:	fe cf       	rjmp	.-4      	; 0xb50 <main+0xa6>

00000b54 <TWI_Master_Init>:


void TWI_Master_Init (void){
	
	//Sets the power reduction register for TWI to 0.
	PRR &= ~(1<<PRTWI);
 b54:	e4 e6       	ldi	r30, 0x64	; 100
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	80 81       	ld	r24, Z
 b5a:	8f 77       	andi	r24, 0x7F	; 127
 b5c:	80 83       	st	Z, r24
	
	//Sets the prescaler to 1 by setting TWPS1 and 0 to 0
	TWSR &= ~(1<<TWPS1) & ~(1<<TWPS0); 
 b5e:	e9 eb       	ldi	r30, 0xB9	; 185
 b60:	f0 e0       	ldi	r31, 0x00	; 0
 b62:	80 81       	ld	r24, Z
 b64:	8c 7f       	andi	r24, 0xFC	; 252
 b66:	80 83       	st	Z, r24
	
	//Sets the speed of TWI to 100khz
	TWBR = 0x20;
 b68:	80 e2       	ldi	r24, 0x20	; 32
 b6a:	80 93 b8 00 	sts	0x00B8, r24
		TWWC - Write Collision Flag
		TWEN - Enable Bit
		TWIE - Interrupt Enable

	************************************************************************/
	TWDR = 0xFF;
 b6e:	8f ef       	ldi	r24, 0xFF	; 255
 b70:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (0<<TWINT) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWWC) | (1<<TWIE) | (1<<TWEN);
 b74:	85 e0       	ldi	r24, 0x05	; 5
 b76:	80 93 bc 00 	sts	0x00BC, r24
 b7a:	08 95       	ret

00000b7c <TWI_Busy>:

}

int TWI_Busy(void){
	//Returns 0 if the MCU is busy
	return TWCR & (1<<TWINT);
 b7c:	80 91 bc 00 	lds	r24, 0x00BC
 b80:	80 78       	andi	r24, 0x80	; 128
}
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	08 95       	ret

00000b86 <__udivmodsi4>:
 b86:	a1 e2       	ldi	r26, 0x21	; 33
 b88:	1a 2e       	mov	r1, r26
 b8a:	aa 1b       	sub	r26, r26
 b8c:	bb 1b       	sub	r27, r27
 b8e:	fd 01       	movw	r30, r26
 b90:	0d c0       	rjmp	.+26     	; 0xbac <__udivmodsi4_ep>

00000b92 <__udivmodsi4_loop>:
 b92:	aa 1f       	adc	r26, r26
 b94:	bb 1f       	adc	r27, r27
 b96:	ee 1f       	adc	r30, r30
 b98:	ff 1f       	adc	r31, r31
 b9a:	a2 17       	cp	r26, r18
 b9c:	b3 07       	cpc	r27, r19
 b9e:	e4 07       	cpc	r30, r20
 ba0:	f5 07       	cpc	r31, r21
 ba2:	20 f0       	brcs	.+8      	; 0xbac <__udivmodsi4_ep>
 ba4:	a2 1b       	sub	r26, r18
 ba6:	b3 0b       	sbc	r27, r19
 ba8:	e4 0b       	sbc	r30, r20
 baa:	f5 0b       	sbc	r31, r21

00000bac <__udivmodsi4_ep>:
 bac:	66 1f       	adc	r22, r22
 bae:	77 1f       	adc	r23, r23
 bb0:	88 1f       	adc	r24, r24
 bb2:	99 1f       	adc	r25, r25
 bb4:	1a 94       	dec	r1
 bb6:	69 f7       	brne	.-38     	; 0xb92 <__udivmodsi4_loop>
 bb8:	60 95       	com	r22
 bba:	70 95       	com	r23
 bbc:	80 95       	com	r24
 bbe:	90 95       	com	r25
 bc0:	9b 01       	movw	r18, r22
 bc2:	ac 01       	movw	r20, r24
 bc4:	bd 01       	movw	r22, r26
 bc6:	cf 01       	movw	r24, r30
 bc8:	08 95       	ret

00000bca <__divmodsi4>:
 bca:	05 2e       	mov	r0, r21
 bcc:	97 fb       	bst	r25, 7
 bce:	1e f4       	brtc	.+6      	; 0xbd6 <__divmodsi4+0xc>
 bd0:	00 94       	com	r0
 bd2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__negsi2>
 bd6:	57 fd       	sbrc	r21, 7
 bd8:	07 d0       	rcall	.+14     	; 0xbe8 <__divmodsi4_neg2>
 bda:	0e 94 c3 05 	call	0xb86	; 0xb86 <__udivmodsi4>
 bde:	07 fc       	sbrc	r0, 7
 be0:	03 d0       	rcall	.+6      	; 0xbe8 <__divmodsi4_neg2>
 be2:	4e f4       	brtc	.+18     	; 0xbf6 <__divmodsi4_exit>
 be4:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__negsi2>

00000be8 <__divmodsi4_neg2>:
 be8:	50 95       	com	r21
 bea:	40 95       	com	r20
 bec:	30 95       	com	r19
 bee:	21 95       	neg	r18
 bf0:	3f 4f       	sbci	r19, 0xFF	; 255
 bf2:	4f 4f       	sbci	r20, 0xFF	; 255
 bf4:	5f 4f       	sbci	r21, 0xFF	; 255

00000bf6 <__divmodsi4_exit>:
 bf6:	08 95       	ret

00000bf8 <__negsi2>:
 bf8:	90 95       	com	r25
 bfa:	80 95       	com	r24
 bfc:	70 95       	com	r23
 bfe:	61 95       	neg	r22
 c00:	7f 4f       	sbci	r23, 0xFF	; 255
 c02:	8f 4f       	sbci	r24, 0xFF	; 255
 c04:	9f 4f       	sbci	r25, 0xFF	; 255
 c06:	08 95       	ret

00000c08 <_exit>:
 c08:	f8 94       	cli

00000c0a <__stop_program>:
 c0a:	ff cf       	rjmp	.-2      	; 0xc0a <__stop_program>
