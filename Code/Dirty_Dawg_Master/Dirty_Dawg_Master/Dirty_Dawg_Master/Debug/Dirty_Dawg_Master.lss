
Dirty_Dawg_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000769  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b0  00000000  00000000  00000bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046a  00000000  00000000  00000fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00001410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031f  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000188  00000000  00000000  000018b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00001a3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:


uint16_t Read_ADC(void){
	
	//Starts conversion
	ADCSRA = (1<<ADSC);
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
	//While the flag is set, wait
	while (ADCSRA & (1<<ADSC));
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
	//while(ADCSRA & (1<<ADIF));
	
	uint16_t analogval = 0;
	
	//Saves the first two bits in variable
	analogval = ADCH;
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
	//Shifts the value with 8
	analogval = (analogval<<8);
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
	//Saves the rest in the first 8 bits
	analogval += ADCL;
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
	

	return analogval;
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  88:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <System_Init>:



void System_Init(void){
	
	status = 0;
  90:	10 92 01 01 	sts	0x0101, r1
  94:	10 92 00 01 	sts	0x0100, r1
	
	/*Setting ports - page 75*/
		
	DDRB = (1<<BRAKELIGHT) | (1<<HEADLIGHT) | (1<<RIGHT);
  98:	8e e0       	ldi	r24, 0x0E	; 14
  9a:	84 b9       	out	0x04, r24	; 4
	DDRD = (1<<FORWARD) | (1<<BACKWARD) | (1<<LEFT);
  9c:	88 e6       	ldi	r24, 0x68	; 104
  9e:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f e3       	ldi	r18, 0x3F	; 63
  a2:	8d e0       	ldi	r24, 0x0D	; 13
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <System_Init+0x16>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <System_Init+0x20>
  b0:	00 00       	nop
	
	//Turn on the front and backlights
	_delay_ms(1000);
	PORTB = (1<<BRAKELIGHT) | (1<<HEADLIGHT);
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	2f e3       	ldi	r18, 0x3F	; 63
  b8:	8d e0       	ldi	r24, 0x0D	; 13
  ba:	93 e0       	ldi	r25, 0x03	; 3
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <System_Init+0x2c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <System_Init+0x36>
  c6:	00 00       	nop
	_delay_ms(1000);
	PORTB = ~(1<<BRAKELIGHT) | ~(1<<HEADLIGHT);
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	85 b9       	out	0x05, r24	; 5
	
	
	//Signs the status
	status = MCU_STARTED;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	90 93 01 01 	sts	0x0101, r25
  d4:	80 93 00 01 	sts	0x0100, r24
  d8:	08 95       	ret

000000da <UART_Init>:
	
	
	
}

void UART_Init(unsigned int baud){
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
	
		
	//Initiate in asynchronous mode
	UCSR0C &= ~(1<<7) & ~(1<<6);
  de:	c2 ec       	ldi	r28, 0xC2	; 194
  e0:	d0 e0       	ldi	r29, 0x00	; 0
  e2:	28 81       	ld	r18, Y
  e4:	2f 73       	andi	r18, 0x3F	; 63
  e6:	28 83       	st	Y, r18

	//Set baudrate
	unsigned int baudrate;
	baudrate = 8000000/16/baud;
  e8:	9c 01       	movw	r18, r24
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	60 e2       	ldi	r22, 0x20	; 32
  f0:	71 ea       	ldi	r23, 0xA1	; 161
  f2:	87 e0       	ldi	r24, 0x07	; 7
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 41 01 	call	0x282	; 0x282 <__divmodsi4>
	//Double speed use frequency/8/baud
	
	//Set the baudrate in the registry
	UBRR0H = (unsigned char) (baudrate>>8);
  fa:	23 2f       	mov	r18, r19
  fc:	33 27       	eor	r19, r19
  fe:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = (unsigned char) (baudrate>>8);
 102:	20 93 c4 00 	sts	0x00C4, r18
	
	//Enables Receive and Transmit over UART
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 106:	88 e1       	ldi	r24, 0x18	; 24
 108:	80 93 c1 00 	sts	0x00C1, r24
	
	//Sets to 1 stop bit and 8 databits
	UCSR0C &= ~(1<<USBS0) | (3<<UCSZ00);
 10c:	88 81       	ld	r24, Y
 10e:	87 7f       	andi	r24, 0xF7	; 247
 110:	88 83       	st	Y, r24
	
	//Disables Parity
	UCSR0C &= ~(1<<UPM01) & ~(1<<UPM00);
 112:	88 81       	ld	r24, Y
 114:	8f 7c       	andi	r24, 0xCF	; 207
 116:	88 83       	st	Y, r24
	
	
	status |= UART_STARTED;
 118:	80 91 00 01 	lds	r24, 0x0100
 11c:	90 91 01 01 	lds	r25, 0x0101
 120:	82 60       	ori	r24, 0x02	; 2
 122:	90 93 01 01 	sts	0x0101, r25
 126:	80 93 00 01 	sts	0x0100, r24
	
	
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <BT_Recieve>:

uint8_t BT_Recieve(void){
	
	//Wait for data to be received (wait for flag to be set)
	while(!(UCSR0A & (1<<RXC0)));
 130:	e0 ec       	ldi	r30, 0xC0	; 192
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	88 23       	and	r24, r24
 138:	ec f7       	brge	.-6      	; 0x134 <BT_Recieve+0x4>
	PORTB = ~(1<<PORTB1);
 13a:	8d ef       	ldi	r24, 0xFD	; 253
 13c:	85 b9       	out	0x05, r24	; 5
	//Returns the data from buffer
	return UDR0;
 13e:	80 91 c6 00 	lds	r24, 0x00C6
}
 142:	08 95       	ret

00000144 <BT_Send>:

void BT_Send(unsigned char data){
	
	//Waits for the transmit buffer to be empty (wait for flag)
	while(!(UCSR0A & (1<<UDRE0)));
 144:	e0 ec       	ldi	r30, 0xC0	; 192
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	90 81       	ld	r25, Z
 14a:	95 ff       	sbrs	r25, 5
 14c:	fd cf       	rjmp	.-6      	; 0x148 <BT_Send+0x4>
	PORTB = ~(1<<PORTB1);
 14e:	9d ef       	ldi	r25, 0xFD	; 253
 150:	95 b9       	out	0x05, r25	; 5
 152:	2f e3       	ldi	r18, 0x3F	; 63
 154:	3d e0       	ldi	r19, 0x0D	; 13
 156:	93 e0       	ldi	r25, 0x03	; 3
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	30 40       	sbci	r19, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <BT_Send+0x14>
 160:	00 c0       	rjmp	.+0      	; 0x162 <BT_Send+0x1e>
 162:	00 00       	nop
	_delay_ms(1000);
	//Put data in buffer and sends it
	UDR0 = data;
 164:	80 93 c6 00 	sts	0x00C6, r24
	PORTB = (1<<PORTB1);
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	85 b9       	out	0x05, r24	; 5
 16c:	08 95       	ret

0000016e <Error>:
void Sense_Light(void){
	
	
}

void Error(unsigned int errorcode){
 16e:	d8 2f       	mov	r29, r24
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
 170:	c1 2c       	mov	r12, r1
 172:	d1 2c       	mov	r13, r1
 174:	76 01       	movw	r14, r12
	for(;;){
		if(ticks%100000 == 0){
 176:	0f 2e       	mov	r0, r31
 178:	f0 ea       	ldi	r31, 0xA0	; 160
 17a:	8f 2e       	mov	r8, r31
 17c:	f6 e8       	ldi	r31, 0x86	; 134
 17e:	9f 2e       	mov	r9, r31
 180:	aa 24       	eor	r10, r10
 182:	a3 94       	inc	r10
 184:	b1 2c       	mov	r11, r1
 186:	f0 2d       	mov	r31, r0
			PINB = (1<<BRAKELIGHT);
			BT_Send(errorcode);
		}
		if(ticks%100000 == 50000){
			PINB = ~(1<<BRAKELIGHT);
 188:	1d ef       	ldi	r17, 0xFD	; 253
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
	for(;;){
		if(ticks%100000 == 0){
			PINB = (1<<BRAKELIGHT);
 18a:	c2 e0       	ldi	r28, 0x02	; 2
void Error(unsigned int errorcode){
	
	//Flashes the red lights and send errorcode through Bluetooth
	unsigned long ticks = 0;
	for(;;){
		if(ticks%100000 == 0){
 18c:	c7 01       	movw	r24, r14
 18e:	b6 01       	movw	r22, r12
 190:	a5 01       	movw	r20, r10
 192:	94 01       	movw	r18, r8
 194:	0e 94 1f 01 	call	0x23e	; 0x23e <__udivmodsi4>
 198:	61 15       	cp	r22, r1
 19a:	71 05       	cpc	r23, r1
 19c:	81 05       	cpc	r24, r1
 19e:	91 05       	cpc	r25, r1
 1a0:	29 f4       	brne	.+10     	; 0x1ac <Error+0x3e>
			PINB = (1<<BRAKELIGHT);
 1a2:	c3 b9       	out	0x03, r28	; 3
			BT_Send(errorcode);
 1a4:	8d 2f       	mov	r24, r29
 1a6:	0e 94 a2 00 	call	0x144	; 0x144 <BT_Send>
 1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <Error+0x4a>
		}
		if(ticks%100000 == 50000){
 1ac:	60 35       	cpi	r22, 0x50	; 80
 1ae:	73 4c       	sbci	r23, 0xC3	; 195
 1b0:	81 05       	cpc	r24, r1
 1b2:	91 05       	cpc	r25, r1
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <Error+0x4a>
			PINB = ~(1<<BRAKELIGHT);
 1b6:	13 b9       	out	0x03, r17	; 3
		}
		ticks++;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	c8 1a       	sub	r12, r24
 1bc:	d8 0a       	sbc	r13, r24
 1be:	e8 0a       	sbc	r14, r24
 1c0:	f8 0a       	sbc	r15, r24
	}
 1c2:	e4 cf       	rjmp	.-56     	; 0x18c <Error+0x1e>

000001c4 <BT_Init>:
	while (UCSR0A & (1<<RXC0)) dummy = UDR0;	
}

void BT_Init(void){
	
	for(int i = 0; i<3; i++) BT_Send('$');
 1c4:	84 e2       	ldi	r24, 0x24	; 36
 1c6:	0e 94 a2 00 	call	0x144	; 0x144 <BT_Send>
 1ca:	84 e2       	ldi	r24, 0x24	; 36
 1cc:	0e 94 a2 00 	call	0x144	; 0x144 <BT_Send>
 1d0:	84 e2       	ldi	r24, 0x24	; 36
 1d2:	0e 94 a2 00 	call	0x144	; 0x144 <BT_Send>
 1d6:	8f e4       	ldi	r24, 0x4F	; 79
 1d8:	93 ec       	ldi	r25, 0xC3	; 195
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <BT_Init+0x16>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <BT_Init+0x1c>
 1e0:	00 00       	nop
	_delay_ms(200);
	if(BT_Recieve() == 'E'){
 1e2:	0e 94 98 00 	call	0x130	; 0x130 <BT_Recieve>
 1e6:	85 34       	cpi	r24, 0x45	; 69
 1e8:	31 f4       	brne	.+12     	; 0x1f6 <BT_Init+0x32>
		PORTB = ~(1<<PORTB1);
 1ea:	8d ef       	ldi	r24, 0xFD	; 253
 1ec:	85 b9       	out	0x05, r24	; 5
		Error(0x01);
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 b7 00 	call	0x16e	; 0x16e <Error>
	}
	BT_Send('C');
 1f6:	83 e4       	ldi	r24, 0x43	; 67
 1f8:	0e 94 a2 00 	call	0x144	; 0x144 <BT_Send>
	BT_Send(',');
 1fc:	8c e2       	ldi	r24, 0x2C	; 44
 1fe:	0e 94 a2 00 	call	0x144	; 0x144 <BT_Send>
	BT_Send(BT121ADRESS);
 202:	85 e4       	ldi	r24, 0x45	; 69
 204:	0e 94 a2 00 	call	0x144	; 0x144 <BT_Send>
	PORTB = ~(1<<PORTB1);
 208:	8d ef       	ldi	r24, 0xFD	; 253
 20a:	85 b9       	out	0x05, r24	; 5
 20c:	08 95       	ret

0000020e <main>:
//Name of the main struct with all the data in for the different sensors and values
dataptn DirtyDawg;

int main(void)
{
	DDRB = (1<<PORTB1);
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	84 b9       	out	0x04, r24	; 4
	PORTB = (1<<PORTB1);
 212:	85 b9       	out	0x05, r24	; 5
 214:	2f e3       	ldi	r18, 0x3F	; 63
 216:	8d e0       	ldi	r24, 0x0D	; 13
 218:	93 e0       	ldi	r25, 0x03	; 3
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0xc>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x16>
 224:	00 00       	nop
	_delay_ms(1000);
	
	System_Init(); //Checked - OK!
 226:	0e 94 48 00 	call	0x90	; 0x90 <System_Init>
	UART_Init(115200); //Checked - OK!
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	92 ec       	ldi	r25, 0xC2	; 194
 22e:	0e 94 6d 00 	call	0xda	; 0xda <UART_Init>
	
	
	BT_Init();
 232:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <BT_Init>
	
	
	
	PORTB = ~(1<<PORTB1);
 236:	8d ef       	ldi	r24, 0xFD	; 253
 238:	85 b9       	out	0x05, r24	; 5
	
	
	
	
	PORTB = ~(1<<PORTB1);
 23a:	85 b9       	out	0x05, r24	; 5
	while(1);
 23c:	ff cf       	rjmp	.-2      	; 0x23c <main+0x2e>

0000023e <__udivmodsi4>:
 23e:	a1 e2       	ldi	r26, 0x21	; 33
 240:	1a 2e       	mov	r1, r26
 242:	aa 1b       	sub	r26, r26
 244:	bb 1b       	sub	r27, r27
 246:	fd 01       	movw	r30, r26
 248:	0d c0       	rjmp	.+26     	; 0x264 <__udivmodsi4_ep>

0000024a <__udivmodsi4_loop>:
 24a:	aa 1f       	adc	r26, r26
 24c:	bb 1f       	adc	r27, r27
 24e:	ee 1f       	adc	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	a2 17       	cp	r26, r18
 254:	b3 07       	cpc	r27, r19
 256:	e4 07       	cpc	r30, r20
 258:	f5 07       	cpc	r31, r21
 25a:	20 f0       	brcs	.+8      	; 0x264 <__udivmodsi4_ep>
 25c:	a2 1b       	sub	r26, r18
 25e:	b3 0b       	sbc	r27, r19
 260:	e4 0b       	sbc	r30, r20
 262:	f5 0b       	sbc	r31, r21

00000264 <__udivmodsi4_ep>:
 264:	66 1f       	adc	r22, r22
 266:	77 1f       	adc	r23, r23
 268:	88 1f       	adc	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	1a 94       	dec	r1
 26e:	69 f7       	brne	.-38     	; 0x24a <__udivmodsi4_loop>
 270:	60 95       	com	r22
 272:	70 95       	com	r23
 274:	80 95       	com	r24
 276:	90 95       	com	r25
 278:	9b 01       	movw	r18, r22
 27a:	ac 01       	movw	r20, r24
 27c:	bd 01       	movw	r22, r26
 27e:	cf 01       	movw	r24, r30
 280:	08 95       	ret

00000282 <__divmodsi4>:
 282:	05 2e       	mov	r0, r21
 284:	97 fb       	bst	r25, 7
 286:	1e f4       	brtc	.+6      	; 0x28e <__divmodsi4+0xc>
 288:	00 94       	com	r0
 28a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__negsi2>
 28e:	57 fd       	sbrc	r21, 7
 290:	07 d0       	rcall	.+14     	; 0x2a0 <__divmodsi4_neg2>
 292:	0e 94 1f 01 	call	0x23e	; 0x23e <__udivmodsi4>
 296:	07 fc       	sbrc	r0, 7
 298:	03 d0       	rcall	.+6      	; 0x2a0 <__divmodsi4_neg2>
 29a:	4e f4       	brtc	.+18     	; 0x2ae <__divmodsi4_exit>
 29c:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__negsi2>

000002a0 <__divmodsi4_neg2>:
 2a0:	50 95       	com	r21
 2a2:	40 95       	com	r20
 2a4:	30 95       	com	r19
 2a6:	21 95       	neg	r18
 2a8:	3f 4f       	sbci	r19, 0xFF	; 255
 2aa:	4f 4f       	sbci	r20, 0xFF	; 255
 2ac:	5f 4f       	sbci	r21, 0xFF	; 255

000002ae <__divmodsi4_exit>:
 2ae:	08 95       	ret

000002b0 <__negsi2>:
 2b0:	90 95       	com	r25
 2b2:	80 95       	com	r24
 2b4:	70 95       	com	r23
 2b6:	61 95       	neg	r22
 2b8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ba:	8f 4f       	sbci	r24, 0xFF	; 255
 2bc:	9f 4f       	sbci	r25, 0xFF	; 255
 2be:	08 95       	ret

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
